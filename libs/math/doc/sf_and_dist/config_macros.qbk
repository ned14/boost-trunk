[section:config_macros Configuration Macros]

Almost all configuration details are set up automatically by
`<boost\math\tools\config.hpp>`.

In normal use, only policy configuration macros are likely to be used. See __policy_ref.

For reference, information on Boost.Math macros used internally are described briefly below.

[table Boost.Math Macros
[[MACRO][Notes]]
[[`BOOST_MATH_NO_REAL_CONCEPT_TESTS`] [Do not try to use real concept tests (hardware or software does not support real concept).]]
[[`BOOST_MATH_NO_LONG_DOUBLE_MATH_FUNCTIONS`] [Do not produce or use long double functions]]
[[`BOOST_MATH_CONTROL_FP _control87(MCW_EM,MCW_EM)`] [FP hardware - our tests don't support hardware exceptions on MSVC.]]
[[`BOOST_MATH_NO_DEDUCED_FUNCTION_POINTERS`] [?]]
[[`BOOST_MATH_USE_C99` ] [Use C99 functions.]] 
[[`BOOST_NO_NATIVE_LONG_DOUBLE_FP_CLASSIFY`] [define if no native long double.]]
[[`BOOST_MATH_EXPLICIT_TEMPLATE_TYPE`] [?]] 
[[`BOOST_MATH_EXPLICIT_TEMPLATE_NON_TYPE`] [?]]
[[`BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_TYPE_SPEC`] [?]]
[[`BOOST_MATH_APPEND_EXPLICIT_TEMPLATE_NON_TYPE_SPEC`] [?]]
[[`BOOST_MATH_SMALL_CONSTANT`] [If defined, underflowing constants set to zero.]]
[[`BOOST_MATH_BUGGY_LARGE_FLOAT_CONSTANTS`] [If constants too large for a float, cause "bad" values to be stored in the data, rather than infinity or a suitably large value.]]
[[`BOOST_MATH_POLY_METHOD`] [Set the method used to evaluate polynomials and rationals.]]
] [/table]

[table Boost.Math Tuning 
[[ Macros for Tuning performance options for specific compilers] [Notes]] 
[[`BOOST_MATH_RATIONAL_METHOD`] [?]]
[[`BOOST_MATH_MAX_POLY_ORDER`] [The maximum order of polynomial that will be evaluated via an unrolled specialisation.]]
[[`BOOST_MATH_INT_TABLE_TYPE`] [Define if to store constants as integers or reals.]]
[[`BOOST_MATH_INT_VALUE_SUFFIX`] [Suffix for integer value output.]]
[[`BOOST_MATH_CONTROL_FP`] [MACRO for controlling the FP hardware behaviour.]]
[[`BOOST_MATH_STD_USING`] [Provides `using` statements for many std:: (abs to sqrt) and boost::math (rounds, modf) functions. This 'helps' [@http://en.wikipedia.org/wiki/Argument-dependent_name_lookup]argument-dependent lookup(ADL) (ensures that std:: functions are used if these are the most appropriate match for the argument type).]]
[[`BOOST_MATH_INSTRUMENT`] [Define to output diagnostics for math functions. This is rather 'global' to Boost.Math and so coarse-grained that it will probably produce copious output! (Especially because full precision values are output).Designed primarily for internal use and development.]]
[[`BOOST_MATH_INSTRUMENT_CODE(x)`] [Output selected named variable, for example `BOOST_MATH_INSTRUMENT_CODE("guess = " << guess)`; Used by `BOOST_MATH_INSTRUMENT`]]
[[`BOOST_MATH_INSTRUMENT_VARIABLE(name)`] [Output selected variable, for example `BOOST_MATH_INSTRUMENT_VARIABLE(result);` Used by `BOOST_MATH_INSTRUMENT`]]
[[`BOOST_MATH_INSTRUMENT_FPU`] [?]]
[[`BOOST_FPU_EXCEPTION_GUARD`] [?]]
] [/table]

[endsect] [/section:config_macros Configuration Macros]

[/ 
  Copyright 2010 John Maddock and Paul A. Bristow.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

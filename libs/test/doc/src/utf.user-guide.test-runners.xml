<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN"  "../../../../tools/boostbook/dtd/boostbook.dtd" [
 <!ENTITY utf "<acronym>UTF</acronym>">
]>

 <section id="utf.user-guide.test-runners">
  <title>The supplied test runners &hellip; or where is the entrance?</title>
  <titleabbrev>Supplied test runners</titleabbrev>

  <para role="first-line-indented">
   All usage variants of the &utf;, excluding the 
   <link linkend="utf.user-guide.external-test-runner">external test runner</link>, supply the test runner in a form of 
   free function named unit_test_main with the following signature:
  </para>

  <programlisting>int unit_test_main( init_unit_test_func init_func, int argc, char* argv[] );</programlisting>

  <para role="first-line-indented">
   To invoke the test runner you are required to supply the pointer to the <link linkend="test-module.def">test module</link>
   initialization function as the first argument to the test runner function. In majority of the cases this function is 
   invoked directly from test executable entry point - function main(). In most usage variants the &utf; can 
   automatically generate default function main() implementation as either part of the library or test module itself. 
   Since the function main needs to refer to the initialization function by name, it is predefined by the default 
   implementation and you are required to match both specific signature and name, when implementing initialization 
   function. If you for any reason prefer more flexibility you can opt to implement the function main() yourself, in 
   which case it's going to be your responsibility to invoke the test runner, but the initialization function name is 
   not enforces the &utf;. See below for flags that needs to be defined/undefined in each usage variant to enable this.
  </para>
  
  <warning>
   <simpara>
    In spite syntactic similarity the signatures of the test runner function in fact are different for different usage 
    variants. The cause is different signature of the test module initialization function referred by the 
    <link linkend="utf.user-guide.initialization.signature-typedef">typedef init_unit_test_func</link>. This makes static
    and dynamic library usage variants incompatible and they can't be easily switched on a fly.
   </simpara>
  </warning>

  <section id="utf.user-guide.static-lib-runner">
   <title>Static library variant of the &utf;</title>
   <titleabbrev>Static library</titleabbrev>

   <para role="first-line-indented">
    By default this variant supplies the function main() as part of static library. If this is for any reason undesirable 
    you need to define the flag <xref linkend="utf.flag.no-main" endterm="utf.flag.no-main"/> during the library 
    compilation and the function main() implementation won't be generated.
   </para>
   
   <para role="first-line-indented">
    In addition to the <link linkend="utf.user-guide.static-lib-variant">initialization function signature requirement</link>
    default function main() implementation assumes the name of initialization function is init_unit_test_suite
   </para>
   
  </section>

  <section id="utf.user-guide.dynamic-lib-runner">
   <title>Dynamic library variant of the &utf;</title>
   <titleabbrev>Dynamic library</titleabbrev>

   <para role="first-line-indented">
    Unlike the static library variant function main() can't reside in the dynamic library body. Instead this variant
    supplies default function main() implementation as part of the header 
    <filename class="headerfile">boost/test/unit_test.hpp</filename> to be generated as part of your test file body. 
    The function main() is generated only if either the <xref linkend="utf.flag.main" endterm="utf.flag.main"/> or 
    the <xref linkend="utf.flag.module" endterm="utf.flag.module"/> flags are defined during a test module compilation. 
    For <link linkend="single-file-test-module.def">single-file test module</link> flags can be defined either in a 
    test module's makefile or before the header <filename class="headerfile">boost/test/unit_test.hpp</filename>
    inclusion. For a <xref linkend="multi-file-test-module.def" endterm="multi-file-test-module.def"/> flags can't
    be defined in makefile and have to be defined in only one of the test files to avoid duplicate copies of the 
    function main().
   </para>

   <important>
    <simpara>
     The same flags also govern generation of an empty 
     <link linkend="utf.user-guide.initialization">test module initialization function</link>. This means that if you 
     need to implement either function main() or initialization function manually, you can't define the above flags
     and are required to manually implement both of them.
    </simpara>
   </important>
  </section>

  <section id="utf.user-guide.single-header-runner">
   <title>Single-header variant of the &utf;</title>
   <titleabbrev>Single header</titleabbrev>

   <para role="first-line-indented">
    By default this variant supplies function main() as part of the header 
    <filename class="headerfile">boost/test/included/unit_test.hpp</filename> to be generated as part of your test file 
    body. If this is for any reason undesirable you need to define the flag 
    <xref linkend="utf.flag.no-main" endterm="utf.flag.no-main"/> during test module compilation and the function main()
    implementation won't be generated.
   </para>
  </section>

  <section id="utf.user-guide.external-test-runner">
   <title>External test runner variant of the &utf;</title>
   <titleabbrev>External test runner</titleabbrev>

   <para role="first-line-indented">
    The external test runner variant of the &utf; supplies the test runner in a form of standalone utility
    boost_test_runner. You are free to implement different, more advanced, test runners that can be used with this
    variant.
   </para>

   <simpara>
    <!-- TO FIX -->
   </simpara>
  </section>

  <section id="utf.user-guide.runners-exit-status">
   <title>Generated exit status values</title>

   <para role="first-line-indented">
    Once testing is finished, all supplied test runners report the results and returns an exit status value. Here are
    the summary of all possible generated values:
   </para>

   <table id="utf.user-guide.runners-exit-status-summary">
    <title>Generated exit status values</title>
    <tgroup cols="2">
     <colspec colname="c1"/>
     <colspec colname="c2"/>
     <thead>
      <row>
        <entry>Value</entry>
        <entry>Meaning</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>boost::exit_success</entry>
       <entry>
        No errors occurred during the test or the success result code was explicitly requested with the no_result_code
        parameter.
       </entry>
      </row>
      <row>
       <entry>boost::exit_test_failure</entry>
       <entry>
        Non-fatal errors detected and no uncaught exceptions were thrown during testing or the &utf; fails during
        initialization.
       </entry>
      </row>
      <row>
       <entry>boost::exit_exception_failure</entry>
       <entry>
        Fatal errors were detected or uncaught exceptions thrown during testing.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </section>
 </section>

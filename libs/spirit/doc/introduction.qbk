[/==============================================================================
    Copyright (C) 2001-2008 Joel de Guzman
    Copyright (C) 2001-2008 Hartmut Kaiser

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
===============================================================================/]

[section Introduction]

Boost Spirit is an object oriented, recursive-descent parser and output generation 
library for C++. It allows to write grammars and format descriptions using a 
format very similar to EBNF (Extended Backus Naur Form, see [4]) directly in 
C++. It allows to describe the input structure and the output format 
specification in a very similar way, and based on a single syntax and semantics.
The syntax and semantics of the libraries API directly form domain specific 
languages (DSEL - domain specific languages). In fact, Spirit exposes 3
different DSEL's to the user: 

* one for creating parser grammars, 
* one for the specification of the required tokens to be used for parsing, 
* and one for the description of the required output formats. 

Since the target input grammars and output formats are written entirely in C++ 
we do not need any separate tools to compile, preprocess, or integrate those 
into the build process. __spirit__ allows seamless integration of the parsing 
and output gerenation process with other C++ code. Often this allows for 
simpler and more efficient code.

Both, the created parsers and generators, are fully attributed which allows to 
easily build and handle hierarchical data structures in memory. These data
structures resemble the structure of the input data and can directly be used to 
generate arbitrarily formatted output.

Immediately executable

The [link spirit.spiritstructure picture] below depicts the overall structure 
of the Boost Spirit library. The library consists out of 4 major parts:

* __classic__: This is the almost unchanged code base taken from the 
  former Boost Spirit V1.8 distribution. It has been moved into the namespace 
  boost::spirit::classic. A special compatibility layer has been added to 
  ensure complete compatibility with existing code using Spirit V1.8.
* __qi__: This is the parser library allowing to build recursive 
  descent parsers. The exposed domain specific language can be used to describe
  the grammars to implement, and the rules for storing the parsed information.
* __lex__: This is the library usable to create tokinizers (lexers). The domain
  specific language exposed by __lex__ 
* __karma__: This is the generator library allowing to create code for 
  recursive descent, data type driven output formatting. The exposed domain 
  specific language is almost equivalent to the parser description language 
  used in __qi__, except that it is used to describe the required output 
  format to generate from a given data structure.

[fig ./images/spiritstructure.png..The overall structure of the Boost Spirit library..spirit.spiritstructure]

The separate sublibraries __qi__, __karma__ and __lex__ are well integrated 
with any of the other parts. Because of their similar structure and identical 
underlying technology these are usable either separately or together at the 
same time. For instance is it possible to directly feed the hierarchical data 
structures generated by __qi__ into output generators created using __karma__.


The [link spirit.spiritkarmaflow picture] below shows the typical data flow of 
some input being converted to some internal representation. After some 
(optional) transformation this data is converted back into some external 
representation. The picture highlights the place in this data transformation 
flow where __spirit__ can be used.

[fig ./images/spiritkarmaflow.png..The place of __qi__ and __karma__ in a typical data transformation application..spirit.spiritkarmaflow]

[endsect]

[/
 / Copyright (C) 2007-2009 Andrew Sutton
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section Dijkstra Visitor]
This concept defines the visitor interface for [dijkstra_shortest_paths] and related
algorithms. The user can create a class that matches this interface, and then pass objects
of the class into [dijkstra_shortest_paths] to augment the actions taken during the
search.

[h4 Refinement Of]
[Visitor]

[h4 Valid Expressions]
[table
    [[Expression] [Description]]
    [
        [`vis.initialize_vertex(v,g)`]
        [
            This is invoked on every vertex of the graph before the start of the graph search.

            *Returns* `void`
        ]
    ]
    [
        [`vis.discover_vertex(v,g)`]
        [
            This is invoked when a vertex is encountered for the first time. This happens immediately
            before `examine_edge()` is invoked on each of the out-edges of `v`.

            *Returns* `void`
        ]
    ]
    [
        [`vis.examine_vertex(v,g)`]
        [
            This is invoked on a vertex as it is popped from the queue. This happens immediately
            before `examine_edge(v,g)` s invoked on each of the out-edges of vertex `v`.

            *Returns* `void`
        ]
    ]
    [
        [`vis.examine_edge(v,g)`]
        [
            This is invoked on every out-edge of each vertex after it is discovered.

            *Returns* `void`
        ]
    ]
    [
        [`vis.edge_relaxed(e,g)`]
        [
            If the relaxation predicate holds for this given edge then this method is invoked.
            See [dijkstra_shortest_paths] for more information on relaxation.

            *Returns* `void`
        ]
    ]
    [
        [`vis.edge_not_relaxed(e,g)`]
        [
            If the relaxation predicate does not hold for this edge, then this method is invoked.
            See [dijkstra_shortest_paths] for more information on relaxation.

            *Returns* `void`
        ]
    ]
    [
        [`vis.finish_vertex(v,g)`]
        [
            This is invoked on a vertex after all of its out edges have been added to the search
            tree and all of the adjacent vertices have been discovered (but before their out edgs)
            have been examined).

            *Returns* `void`
        ]
    ]
]

[h4 Models]
* [boost_dijkstra_visitor]

[endsect]

[/
 / Copyright (C) 2007-2009 Andrew Sutton
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section Depth-First Search Visitor]
This concept defines the visitor interface for [booost_depth_first_search] algorithm. Users
can define a class with the DFS Visitor interface and pass and object of the class to
[boost_depth_first_search], thereby augmenting the actions taken during the graph search.

[h4 Refinement Of]
[BoostVisitor]

[h4 Valid Expressions]
[table
    [[Expression] [Description]]
    [
        [`vis.initialize_vertex(v,g)`]
        [
            This is invoked on every vertex of the graph before the start of the graph search.

            *Returns* `void`
        ]
    ]
    [
        [`vis.start_vertex(v,g)`]
        [
            This is invoked on the source vertex once before the start of the search.

            *Returns* `void`
        ]
    ]
    [
        [`vis.discover_vertex(v,g)`]
        [
            This is invoked when a vertex is encountered for the first time.

            *Returns* `void`
        ]
    ]
    [
        [`vis.examine_edge(e,g)`]
        [
            This is invoked on every out-edge of each vertex after it is discovered.

            *Returns* `void`
        ]
    ]
    [
        [`vis.tree_edge(e,g)`]
        [
            This is invoked on each edge as it becomes a member of the edges that form the
            search tree.

            *Returns* `void`
        ]
    ]
    [
        [`vis.back_edge(v,g)`]
        [
            This is invoked on the back edges of the graph. For an undirected graph there
            is some ambiguity between tree edges and back edges since the edge /(u,v)/
            and /(v,u)/ are the same edge, but both `tree_edge(v,g)` and `back_edge(v,g)`
            will be invoked. One way to resolve this ambiguity is to record the tree
            edges and then disregard the back edges that are already marked as tree edges.
            An easy way to record tree edges is to record predecessors at the `tree_edge`
            event point.

            *Returns* `void`
        ]
    ]
    [
        [`vis.forward_or_cross_edge(e,g)`]
        [
            This is invoked on forward or cross edges in the graph. In an undirected graph,
            this method is never called.

            *Returns* `void`
        ]
    ]
    [
        [`vis.finish_vertex(v,g)`]
        [
            This is invoked on a vertex after all `finish_vertex(x,g)` has been invoked for
            all vertices in the search tree rooted at `v` (i.e., after all its children
            have finished). If `v` is a leaf in the search tree, `finish_vertex(v,g)` is
            called after all its out-edges have been examined.

            *Returns* `void`
        ]
    ]
]

[h4 Models]
* [dfs_visitor]

[endsect]

[/
 / Copyright (C) 2007-2009 Andrew Sutton
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section Edge Index Graph]
The [EdgeIndexGraph] concept requires that a graph type `G` provide edge indices
for each edge in the graph, and that those indices are ordered in the range
\[0, `num_edges(g)`).

Because the removal of edges causes "gaps" in the index space, graphs that model
this concept must also provide functions that allow them to re-index the edges.

[heading Refinement Of]
[MutablePropertyGraph]

[heading Notation]
[table
    [[Expression] [Description]]
    [[`G`] [A type that models the [Graph] concept.]]
    [[`g`] [An object of type `G`.]]
    [
        [`P`]
        [A synonym for `property_map<G,vertex_index_t>`.]
    ]
]

[heading Associated Types]
[table
    [[Name] [Expression] [Result Type] [Description]]
    [
        [Edge Index Type]
        [`property_traits<P::const_type>::value_type`]
        [An unsigned integer type]
        [
            The unsigned integral type representing edge indices.

            *Requirements:* `T` must model the [NoConcept UnsignedIntegral] concept.
        ]
    ]
    [
        [Edge Index Property Type]
        [
            `P::type`
        ]
        [A mutable property map]
        [
            The type of property map through which edge indices are readable and
            writable.

            *Requirements:* This type must be a model of the [ReadWritePropertyMap]
            concept. The `value_type` of the `property_traits` of this type must
            be the same as `edge_index_type`.
        ]
    ]
    [
        [Edge Index Property Type]
        [
            `P::const_type`
        ]
        [ A `const` property map]
        [
            The type of property map through which edge indices are readable.

            *Requirements:* This type must be a model of the [ReadablePropertyMap]
            concept. The `value_type` of the `property_traits` of this type must
            be the same as `edge_index_type`.
        ]
    ]
]

[heading Requirements]
[table
    [[Name] [Expression] [Result Type] [Description]]
    [
        [Edge Index Property]
        [`get(edge_index,g)`]
        [`P::type` or `P::const_type`]
        [
            Returns the property map that provides read/write access to the
            edge indices of the graph.

            *Complexity:* Constant.
        ]
    ]
    [
        [Edge Index]
        [`get(edge_index,g,v)`]
        [`G::edge_index_type`]
        [
            Returns the index of the given edge within the graph. This is
            equvalent to `get(get(edge_index, g), v)`.

            *Complexity:* Amortized constant.
        ]
    ]
    [
        [Renumber Edge Indices]
        [`renumber_edge_indices(g)`]
        []
        [
            Renumbers all vertices in the graph such that each edge is in the
            range \[0, `num_vertices(g)`).

            *Complexity:* Linear in `num_vertices(g)`.
        ]
    ]
]

[endsect]

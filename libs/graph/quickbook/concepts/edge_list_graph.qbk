[/
 / Copyright (C) 2007-2009 Andrew Sutton
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section Edge List Graph]
The EdgeListGraph concept refines the [Graph] concept, and adds the requirement
for efficient access to all the edges in a graph.

[h4 Refinement Of]
[Graph]

[h4 Associated Types]
[table
    [[Type] [Description]]
    [
        [`graph_traits<G>::traversal_category`]
        [
            This tag type must be convertible to `edge_list_graph_tag`.
        ]
    ]
    [
        [`graph_traits<G>::edge_iterator`]
        [
            An edge iterator (obtained via edges(g)) provides access to all of the edges
            in a graph. An edge iterator type must meet the requirements of
            [MultiPassInputIterator]. The value type of the edge iterator must be the
            same as the edge descriptor of the graph.
        ]
    ]
    [
        [`graph_traits<G>::edges_size_type`]
        [
            The unsigned integer type used to represent the number of edges in the graph.
        ]
    ]
]

[h4 Valid Expressions]
[table
    [[Expression] [Description]]
    [
        [`edges(g)`]
        [
            Returns an iterator range providing access to all the edges in the graph `g`.

            *Returns* `std::pair<edge_iterator, edge_iterator>`
        ]
    ]
    [
        [`num_edges(g)`]
        [
            Returns the number of edges in the graph `g`.

            *Returns* `edges_size_type`
        ]
    ]
    [
        [`source(e,g)`]
        [
            If `e` is an edge /(u,v)/ in `g`, this function returns the source vertex `u`.

            *Returns* `vertex_descriptor`
        ]
    ]
    [
        [`target(e,g)`]
        [
            If `e` is an edge /(u,v)/ in `g`, this function returns the target vertex `v`.

            *Returns* `vertex_descriptor`
        ]
    ]
]

[h4 Models]
* [undirected_graph]
* [directed_graph]
* [adjacency_list]
* [edge_list]

[h4 Complexity Guarantees]
The `edges(g)`, `source(e,g)`, and `target(e,g)` functions must return in constant time.

[h4 Design Rationale]
One issue in the design of this concept is whether to include the refinement from the
[IncidenceGraph] and [AdjacencyGraph] concepts. The ability to traverse the vertices
of a graph is orthogonal to traversing out-edges, so it would make sense to have a edgeListGraph
concept that only includes edge traversal. However, such a concept would no longer really be a
graph, but would just be a set, and the STL already has concepts for dealing with such things.
However, there are many BGL algorithms that need to traverse the vertices and out-edges of a graph,
so for convenience a concept is needed that groups these requirements together, hence the edgeListGraph
concept.


[endsect]

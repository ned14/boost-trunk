[/
 / Copyright (C) 2007-2009 Andrew Sutton
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section Bidirectional Graph]
The BidirectionalGraph concept refines IncidenceGraph and adds the requirement for efficient
access to the in-edges of each vertex. This concept is separated from IncidenceGraph because for
directed graphs efficient access to in-edges typically requires more storage space, and many
algorithms do not require access to in-edges. For undirected graphs this is not an issue, since
the in_edges() and out_edges() functions are the same, they both return the edges incident to
the vertex.

[heading Refinement Of]
[IncidenceGraph]

[h4 Associated Types]
[table
    [[Type] [Description]]
    [
        [`graph_traits<G>::traversal_category`]
        [
            This tag type must be convertible to `bidirectional_graph_tag`.
        ]
    ]
    [
        [`graph_traits<G>::in_edge_iterator`]
        [
            An in-edge iterator for a vertex v provides access to the in-edges of a vertex. As
            such, the value type of an in-edge iterator is the edge descriptor type of its graph.
            An in-edge iterator must meet the requirements of MultiPassInputIterator.
        ]
    ]
]

[h4 Valid Expressions]
[table
    [[Expression] [Description]]
    [
        [`in_edges(v,g)`]
        [
            Returns an iterator range providing access to the in-edges (for directed graphs)
            or the incident edges (for undirected graphs). The target vertex of an edge obtained
            via an in-edge iterator is guaranteed to be the vertex `v` in the call to
            `in_edges(v,g)`, and the source vertex must be adjacenct to `v`.

            *Returns* `std::pair<in_edge_iterator, in_edge_iterator>`
        ]
    ]
    [
        [`in_degree(v,g)`]
        [
            Returns the number of in-edges (for directed graphs) or the number of incident
            edges (for undirected graphs) of the vertex `v`.

            *Returns* `degree_size_type`.
        ]
    ]
]

[h4 Models]
* [undirected_graph]
* [directed_graph]
* [adjacency_list] with the `Directed` template parameter as `bidirectionalS` or
`undirectedS`.

[h4 Complexity Guarantees]
The `in_edges(g)` function is required to return in constant time.

The `in_degree()` and `degree()` functions must be linear in the number of in-edges (for
directed graph) or incident edges (for undirected graphs).


[endsect]

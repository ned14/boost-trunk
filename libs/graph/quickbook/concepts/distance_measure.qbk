[/
 / Copyright (C) 2007-2009 Andrew Sutton
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[/ TODO: Redefine this as a function taking some distance value and a graph. /]

[section Distance Measure]
The [DistanceMeasure] concept defines requirements for function objects
that are used in computations of distances.

[heading Notation]
The following expressions are used within this document:
[table
    [[Expression] [Description]]
    [[M] [A type modeling the [DistanceMeasure] concept.]]
    [[m] [An object of type `M`.]]
    [[d] [An object of type `M::distance_type`.]]
    [[G] [A type modeling the [Graph] concept.]]
    [[g] [An object of type `G`.]]
]

[heading Associated Types]
[table
    [[Name] [Type] [Description]]
    [
        [Distance Type]
        [`M::distance_type`]
        [
            The type used to measure distances in graphs. The `distance_type`
            is typically derived from the value type of a distance map or
            the edge-weight type of a graph type `G`. However, this is not
            required.

            *Requirements:* The `distance_type` must be a model of the
            [NumericValue] concept.
        ]
    ]
    [
        [Result Type]
        [`M::result_type`]
        [
            The type being computed as the measure.

            *Requirements:* The `result_type` must be a model of the
            [NumericValue] concept.
        ]
    ]
]

[heading Expressions]
[table
    [[Name] [Expression] [Result Type] [Description]]
    [
        [Function Call]
        [`m(d, g)`]
        [`M::result_type`]
        [
            Invoke the measure on the sum distance `d`, with respect
            to the graph `g`. This returns the result as type `result_type`.
            Note that in many computations `d` is given as the sum of distances
            from one vertex to all others in the graph and may be infinite.
        ]
    ]
]

[heading C++0x]

    concept DistanceMeasure<M>
    {
        typename Graph;
        typename M::distance_type;
        typename M::result_type;

        result_type M::operator(distance_type, const Graph&);
    };

[endsect]

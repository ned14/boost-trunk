[/ 
  (C) Copyright Edward Diener 2011
  Use, modification and distribution are subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:tti_detail_has_static_member_function_sig Introspecting static member function using signature]

The TTI macro [macroref BOOST_TTI_HAS_STATIC_MEMBER_FUNCTION_WITH_SIG] introspects
a static member function of a class using a function signature.

BOOST_TTI_HAS_STATIC_MEMBER_FUNCTION_WITH_SIG macro takes a single
parameter which is the name of an inner static member function whose existence
the programmer wants to check. The macro generates a metafunction
called 'has_static_member_function_with_sig_'name_of_inner_static_member_function'. 

The metafunction can be invoked by passing it the enclosing type to 
introspect and a signature for the static member function as a plain function.

The metafunction returns a single type called 'type', which is a 
boost::mpl::bool_. As a convenience the metafunction 
returns the value of this type directly as a compile time bool constant 
called 'value'. This is true or false depending on whether the inner 
static member function, of the specified function signature, exists or not.

[heading Generating the metafunction]

You generate the metafunction by invoking the macro with the name 
of an inner static member function:

  BOOST_TTI_HAS_STATIC_MEMBER_FUNCTION_WITH_SIG(AStaticMemberFunction)
  
generates a metafunction called 
'has_static_member_function_with_sig_AStaticMemberFunction' in the current scope.

[heading Invoking the metafunction]

You invoke the metafunction by instantiating the template with 
an enclosing type to introspect and a type as a function signature.
A return value called 'value' is a compile time bool constant.

[heading Examples]

First we generate metafunctions for various inner member function names: 

 #include <boost/tti/has_static_member_function_with_sig.hpp>
 
 BOOST_TTI_HAS_STATIC_MEMBER_FUNCTION_WITH_SIG(function1)
 BOOST_TTI_HAS_STATIC_MEMBER_FUNCTION_WITH_SIG(function2)
 BOOST_TTI_HAS_STATIC_MEMBER_FUNCTION_WITH_SIG(function3)
 
Next let us create some user-defined types we want to introspect. 

 struct AClass { };
 struct Top
   {
   static int function1();
   static AClass function2(double,short *);
   };
 struct Top2
   {
   static long function2(Top &,int,bool,short,float);
   static Top * function3(long,int,AClass &);
   };
   
Finally we invoke our metafunction and return our value.
This all happens at compile time, and can be used by 
programmers doing compile time template metaprogramming.
 
 has_static_member_function_with_sig_function1<Top,int ()>::value; // true
 has_static_member_function_with_sig_function1<Top2,int ()>::value; // false
 
 has_static_member_function_with_sig_function2<Top,AClass (double,short *)>::value; // true
 has_static_member_function_with_sig_function2<Top2,AClass (double,short *)>::value; // false
 has_static_member_function_with_sig_function2<Top2,long (Top &,int,bool,short,float)>::value; // true
 
 has_static_member_function_with_sig_function3<Top2,int ()>::value; // false
 has_static_member_function_with_sig_function3<Top2,Top * (long,int,AClass &)>::value; // true;
   
It should be noticed that once we create our metafunction for 
introspecting an inner static member function by name, we can reuse the 
metafunction for introspecting any enclosing user-defined type,
with any inner static member function, for that name.

[endsect]

[/ 
  (C) Copyright Edward Diener 2011
  Use, modification and distribution are subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:tti_func_sig Nested Types and Function Signatures]

The strength of `BOOST_TTI_MEMBER_TYPE` to represent a type which may or may not exist, and which 
then can be subsequently used in other macro metafunctions whenever a type is needed as a template 
parameter, without producing a compiler error, should not be underestimated. It is one of the  
reasons why we have two different versions of metafunctions for introspecting a member function or 
static member function of a type.

In the more general case, when using `BOOST_TTI_HAS_MEMBER_FUNCTION_WITH_SIG` and 
`BOOST_TTI_HAS_STATIC_MEMBER_FUNCTION_WITH_SIG`, the signature for the member function and 
the static member function is a single composite type. This makes for a syntactical notation 
which is natural to specify, but because of the composite type notation we 
can not use the nested type functionality in `BOOST_TTI_MEMBER_TYPE` for potential parts
of that composite type. If any part of this signature, which specifies a composite of various 
types, is invalid, a compiler time error will occur.

But in the more specific case, when we use `BOOST_TTI_HAS_MEMBER_FUNCTION` and 
`BOOST_TTI_HAS_STATIC_MEMBER_FUNCTION`, the composite types in our signatures are broken down 
into their individual types so that using `BOOST_TTI_MEMBER_TYPE`, if necessary, for any one 
of the individual types will not lead to a compile time error if the type specified does not 
actually exist.

A few examples will suffice. 

Given known types T and U, and the supposed type Ntype as a 
nested type of U, we want to find out if type T has a member function whose signature is 
`void aMemberFunction(U::Ntype)`.

First using `BOOST_TTI_HAS_MEMBER_FUNCTION_WITH_SIG` we would code:

 #include <boost/tti/has_member_function_with_sig.hpp>
 
 BOOST_TTI_HAS_MEMBER_FUNCTION_WITH_SIG(aMemberFunction)
  
 has_member_function_with_sig_aMemberFunction<void (T::*)(U::Ntype)>::value;
 
If the nested type U::Ntype does not exist, this leads to a compiler error. 
We really want to avoid this situation, so let's try our alternative.

Second using `BOOST_TTI_HAS_MEMBER_FUNCTION` we would code:
  
 #include <boost/tti/member_type.hpp>
 #include <boost/tti/has_member_function.hpp>
 
 BOOST_TTI_HAS_MEMBER_TYPE(Ntype)
 BOOST_TTI_HAS_MEMBER_FUNCTION(aMemberFunction)
  
 typedef typename has_member_type_Ntype<U>::type OurType;
 has_member_function_aMemberFunction<T,void,boost::mpl::vector<OurType> >::value;
 
If the nested type U::Ntype does exist and T does have a member function 
whose signature is `void aMemberFunction(U::Ntype)` our 'value' is true, 
otherwise it is false. We will never get a compiler error in this case.

As a second example we will once again use the suppositions of our first
example; given known types T and U, and the supposed type Ntype as a 
nested type of U. But this time let us look for a static member function
whose signature is `void aStaticMemberFunction(U::Ntype)`.

First using `BOOST_TTI_HAS_STATIC_MEMBER_FUNCTION_WITH_SIG` we would code:

 #include <boost/tti/has_static_member_function_with_sig.hpp>
 
 BOOST_TTI_HAS_STATIC_MEMBER_FUNCTION_WITH_SIG(aStaticMemberFunction)
  
 has_static_member_function_with_sig_aStaticMemberFunction<T,void (U::Ntype)>::value;
 
Once again if the nested type U::Ntype does not exist, this leads to a compiler error, 
so let's try our alternative.

Second using `BOOST_TTI_HAS_STATIC_MEMBER_FUNCTION` we would code:
  
 #include <boost/tti/member_type.hpp>
 #include <boost/tti/has_static_member_function.hpp>
 
 BOOST_TTI_HAS_MEMBER_TYPE(Ntype)
 BOOST_TTI_HAS_STATIC_MEMBER_FUNCTION(aStaticMemberFunction)
  
 typedef typename has_member_type_Ntype<U>::type OurType;
 has_static_member_function_aStaticMemberFunction<T,void,boost::mpl::vector<OurType> >::value;
 
If the nested type U::Ntype does exist and T does have a member function 
whose signature is `void aMemberFunction(U::Ntype)` our 'value' is true, 
otherwise it is false. We will never get a compiler error in this case.

[endsect]

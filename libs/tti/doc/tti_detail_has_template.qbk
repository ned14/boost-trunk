[/ 
  (C) Copyright Edward Diener 2011
  Use, modification and distribution are subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:tti_detail_has_template Introspecting an inner class template]

The TTI macro [macroref BOOST_TTI_HAS_TEMPLATE] introspects
an inner class template of a class.

BOOST_TTI_HAS_TEMPLATE takes a single 
parameter which is the name of an inner class template whose 
existence the programmer wants to check. The inner class template
must have all class ( or typename ) template parameters. The macro 
generates a metafunction called 'has_template_'name_of_inner_class_template'.

The metafunction can be invoked by passing it the enclosing type 
to introspect.

The metafunction returns a single type called 'type', which is a 
boost::mpl::bool_. As a convenience the metafunction returns the 
value of this type directly as a compile time bool constant 
called 'value'. This is true or false depending on whether the inner 
class template exists or not.

[heading Generating the metafunction]

You generate the metafunction by invoking the macro with the name 
of an inner class template:

  BOOST_TTI_HAS_TEMPLATE(AType)
  
generates a metafunction called 'has_template_AType' in the current scope.

[heading Invoking the metafunction]

You invoke the metafunction by instantiating the template with an enclosing 
type to introspect. A return value called 'value' is a compile time bool constant.

  has_template_AType<Enclosing_Type>::value
  
[heading Examples]

First we generate metafunctions for various inner class template names:

 #include <boost/tti/has_template.hpp>
 
 BOOST_TTI_HAS_TEMPLATE(Template1)
 BOOST_TTI_HAS_TEMPLATE(Template2)
 BOOST_TTI_HAS_TEMPLATE(Template3)
 BOOST_TTI_HAS_TEMPLATE(Template4)
 BOOST_TTI_HAS_TEMPLATE(Template5)
 
Next let us create some user-defined types we want to introspect. 

 struct Top
   {
   template <class X> struct Template1 { };
   template <typename A,typename B,typename C> class Template2 { };
   template <typename A,typename B,typename C,int D> class Template3 { };
   };
 struct Top2
   {
   template <typename A,typename B,typename C,class D> class Template3 { };
   template <class X,typename Y> struct Template4 { };
   template <typename A,class B,typename C,class D,typename E> class Template5 { };
   };
   
Finally we invoke our metafunction and return our value.
This all happens at compile time, and can be used by 
programmers doing compile time template metaprogramming.
  
 has_template_Template1<Top>::value; // true
 has_template_Template1<Top2>::value; // false
 
 has_template_Template2<Top>::value; // true
 has_template_Template2<Top2>::value; // false
 
 has_template_Template3<Top>::value; // false, not all typename/class tempate parameters
 has_template_Template3<Top2>::value; // true
 
 has_template_Template4<Top>::value; // false
 has_template_Template4<Top2>::value; // true
 
 has_template_Template5<Top>::value; // false
 has_template_Template5<Top2>::value; // true
  
It should be noticed that once we create our metafunction for 
introspecting an inner class template by name, we can reuse the 
metafunction for introspecting any enclosing user-defined type 
for that name.

[endsect]

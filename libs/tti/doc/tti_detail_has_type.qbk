[/ 
  (C) Copyright Edward Diener 2011
  Use, modification and distribution are subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:tti_detail_has_type Introspecting an inner type]

The TTI macro [macroref BOOST_TTI_HAS_TYPE] introspects
a nested type of a class.

BOOST_TTI_HAS_TYPE takes a single 
parameter which is the name of an inner type whose existence
the programmer wants to check. The macro generates a metafunction
called 'has_type_'name_of_inner_type'. The purpose of the macro
is to check for the existence by name of an inner type and,
optionally, check whether that inner type is equivalent to 
a particular type. This latter functionality is normally only 
used to check whether or not the inner type is a typedef for
another type, since an inner user-defined type declares its
own type by its name.

The metafunction can be invoked by passing it the enclosing type 
to introspect. Optionally a second type can be passed to the 
metafunction, whose purpose is to check that if the inner type 
exists it is of the same type as this second type.

The metafunction returns a single type called 'type', which is a 
boost::mpl::bool_. As a convenience the metafunction 
returns the value of this type directly as a compile time bool constant 
called 'value'. This is true or false depending on whether the inner 
type exists or not and, if a second optional type is passed, whether .
the second type is the same as the type which exists.

[heading Generating the metafunction]

You generate the metafunction by invoking the macro with the name 
of an inner type:

  BOOST_TTI_HAS_TYPE(AType) 
  
generates a metafunction called 'has_type_AType' in the current scope.

[heading Invoking the metafunction]

You invoke the metafunction by instantiating the template with an enclosing 
type to introspect and, optionally, a type which the inner type must match.
A return value called 'value' is a compile time bool constant.

  has_type_AType<Enclosing_Type>::value
  has_type_AType<Enclosing_Type,Another_Type>::value
  
[heading Examples]

First we generate metafunctions for various inner type names: 

 #include <boost/tti/has_type.hpp>
 
 BOOST_TTI_HAS_TYPE(MyTypeDef)
 BOOST_TTI_HAS_TYPE(AType)
 BOOST_TTI_HAS_TYPE(ATypeDef)
 BOOST_TTI_HAS_TYPE(MyType)
 
Next let us create some user-defined types we want to introspect. 
 
 struct Top
   {
   typedef int MyTypeDef;
   struct AType { };
   };
 struct Top2
   {
   typedef long ATypeDef;
   struct MyType { };
   };
   
Finally we invoke our metafunction and return our value.
This all happens at compile time, and can be used by 
programmers doing compile time template metaprogramming.
  
 has_type_MyTypeDef<Top>::value;  // true
 has_type_MyTypeDef<Top2>::value; // false
 has_type_MyTypeDef<Top,int>::value; // true
 has_type_MyTypeDef<Top,long>::value; // false

 has_type_AType<Top>::value;  // true
 has_type_AType<Top2>::value; // false
 
 has_type_ATypeDef<Top>::value;  // false
 has_type_ATypeDef<Top2>::value; // true
 has_type_ATypeDef<Top2,int>::value; // false
 has_type_ATypeDef<Top2,long>::value; // true

 has_type_MyType<Top>::value;  // false
 has_type_MyType<Top2>::value; // true

It should be noticed that once we create our metafunction for 
introspecting an inner type by name, we can reuse the metafunction 
for introspecting any enclosing user-defined type for that name.

[endsect]

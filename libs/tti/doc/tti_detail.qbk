[/ 
  (C) Copyright Edward Diener 2011
  Use, modification and distribution are subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:tti_detail Macro Metafunctions]

The TTI library uses macros to create metafunctions, in the current scope, 
for introspecting an inner element by name. Each macro for a particular type of inner 
element has two forms, the simple one where the first macro parameter designating the 
'name' of the inner element is used to create the name of the metafunction, and the 
complex one where the first macro parameter, called 'trait', designates 
the name of the metafunction and the second macro parameter designates the 'name' to be 
introspected. Other than that difference, the two forms of the macro produce the exact same 
results.

To use these metafunctions you can include the main general header file 'boost/tti/tti.hpp',
unless otherwise noted. Alternatively you can include a specific header file as 
given in the table below.

A table of these macros is given, based on the inner element whose 
existence the metaprogrammer is introspecting. More detailed explanations  
and examples for each of the macro metafunctions will follow this 
section in the documentation. The actual syntax for each macro metafunction
can be found in the reference section, and examples of usage for all the 
macro metafunctions can be found in the 
[link sectti_usingMM "Using the Macro Metafunctions"] section.

In the Template column only the name generated by the simple form 
of the template is given since the name generated by the complex form is always 'trait'
where 'trait' is the first parameter to the corresponding complex form macro. All of the 
introspecting metafunctions in the table below return a boolean constant called 'value', which 
specifies whether or not the inner element exists.

[table:tbmacros TTI Macro Metafunctions
  [
    [Inner Element]
    [Macro]
    [Template]
    [Specific Header File]
  ]
  [
    [Type]
    [
    [macroref BOOST_TTI_HAS_TYPE](name)
    ]
    [
    `has_type_'name'`
    
    class T = enclosing type
    ]
    [[headerref boost/tti/has_type.hpp `has_type.hpp`]]
  ]
  [
    [Type with check]
    [
    [macroref BOOST_TTI_HAS_TYPE](name)
    ]
    [
    `has_type_'name'`
    
    class T = enclosing type
    
    class U = type to check against
    ]
    [[headerref boost/tti/has_type.hpp `has_type.hpp`]]
  ]
  [
    [Class Template ( using variadic macros )]
    [
    [macroref BOOST_TTI_HAS_TEMPLATE](name)
    ]
    [
    `has_template_'name'`
    
    class T = enclosing type
    
    All of the template parameters must be 'class' ( or 'typename' ) parameters
    ]
    [[headerref boost/tti/has_template.hpp `has_template.hpp`]]
  ]
  [
    [Class Template ( not using variadic macros )]
    [
    [macroref BOOST_TTI_HAS_TEMPLATE](name,BOOST_PP_NIL)
    ]
    [
    `has_template_'name'`
    
    class T = enclosing type
    
    All of the template parameters must be 'class' ( or 'typename' ) parameters
    ]
    [[headerref boost/tti/has_template.hpp `has_template.hpp`]]
  ]
  [
    [Class Template with params ( using variadic macros )]
    [
    [macroref BOOST_TTI_HAS_TEMPLATE](name,...[footnote The template parameters as variadic data.])
    ]
    [
    `has_template_'name'`
    
    class T = enclosing type
    ]
    [[headerref boost/tti/has_template.hpp `has_template.hpp`]]
  ]
  [
    [Class Template with params]
    [
    [macroref BOOST_TTI_HAS_TEMPLATE](name,ppArray[footnote The template parameters as the tuple part of the PP array.])
    ]
    [
    `has_template_'name'`
    
    class T = enclosing type
    ]
    [[headerref boost/tti/has_template.hpp `has_template.hpp`]]
  ]
  [
    [Member data]
    [
    [macroref BOOST_TTI_HAS_MEMBER_DATA](name)
    ]
    [
    `has_member_data_'name'`
    
    class T = enclosing type
    
    class R = data type
    ]
    [[headerref boost/tti/has_member_data.hpp `has_member_data.hpp`]]
  ]
  [
    [Member function as individual types]
    [
    [macroref BOOST_TTI_HAS_MEMBER_FUNCTION](name)
    ]
    [
    `has_member_function_'name'`
    
    class T   = enclosing type
    
    class R   = return type
    
    class FS  = (optional) function parameter types as a Boost MPL forward sequence.
                If there are no function parameters this does not have to be specified.
                Defaults to boost::mpl::vector<>.
    
    class TAG = (optional) Boost `function_types` tag type.
                Defaults to `boost::function_types::null_tag`.
    ]
    [[headerref boost/tti/has_member_function.hpp `has_member_function.hpp`]]
  ]
  [
    [Member function as a composite type]
    [
    [macroref BOOST_TTI_HAS_MEMBER_FUNCTION_WITH_SIG](name)
    ]
    [
    `has_member_function_with_sig_'name'`
    
    class T = pointer to member function
    
    The form for T is 'ReturnType (Class::*)(Zero or more comma-separated parameter types)'
    ]
    [[headerref boost/tti/has_member_function_with_sig.hpp `has_member_function_with_sig.hpp`]]
  ]
  [
    [Static member data]
    [
    [macroref BOOST_TTI_HAS_STATIC_MEMBER_DATA](name)
    ]
    [
    `has_static_member_data_'name'`
    
    class T = enclosing type
    
    class Type = data type
    ]
    [[headerref boost/tti/has_static_member_data.hpp `has_static_member_data.hpp`]]
  ]
  [
    [Static member function as individual types]
    [
    [macroref BOOST_TTI_HAS_STATIC_MEMBER_FUNCTION](name)
    ]
    [
    `has_static_member_function_'name'`
    
    class T   = enclosing type
    
    class R   = return type
    
    class FS  = (optional) function parameter types as a Boost MPL forward sequence.
                If there are no function parameters this does not have to be specified.
                Defaults to boost::mpl::vector<>.
    
    class TAG = (optional) Boost `function_types` tag type.
                Defaults to `boost::function_types::null_tag`.
    ]
    [[headerref boost/tti/has_static_member_function.hpp `has_static_member_function.hpp`]]
  ]
  [
    [Static member function as a composite type]
    [
    [macroref BOOST_TTI_HAS_STATIC_MEMBER_FUNCTION_WITH_SIG](name)
    ]
    [
    `has_static_member_function_with_sig_'name'`
    
    class T = enclosing type
    
    class Type = function type
    
    The form for Type is 'ReturnType (Zero or more comma-separated parameter types)'
    ]
    [[headerref boost/tti/has_static_member_function_with_sig.hpp `has_static_member_function_with_sig.hpp`]]
  ]
]

[endsect]

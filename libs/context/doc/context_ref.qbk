[/
          Copyright Oliver Kowalke 2009.
 Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
          http://www.boost.org/LICENSE_1_0.txt
]

[section:context Context]

Each instance of __context__ represents a context (CPU registers and stack
space) of execution or __not_a_context__. Objects of type __context__ are
moveable but not copyable and can be returned by a function.

        boost::contexts::context make_context();

        void f()
        {
            boost::contexts::context ctx( make_context() );
            ctx.resume();
        }

[note __boost_move__ is used to emulate rvalue references.]

[warning If contexts are used in a multithreaded application, they can migrated
between threads, but must not reference __tls__.]

[note If __fls__ is used on Windows, the user is responsible for calling 
__fls_alloc__, __fls_free__.]


[heading Executing a context]

A new context is created from a callable object (known as the __context_fn__).
The stack size, stack unwinding behavior, and context termination behavior are
determined by additional arguments.

The __context__ constructor uses a __stack_allocator_concept__ to allocate an
associated stack, and the destructor uses the same __stack_allocator_concept__
to deallocate the stack.  The default __stack_allocator_concept__ is
__stack_allocator__, but a custom stack-allocator can be passed to the
constructor.

Additional arguments needed by a __context_fn__ are supplied as additional
arguments to the context constructor.

        void f( int i);

        boost::contexts::context ctx( f, 42,
            boost::contexts::default_stacksize(),
            boost::contexts::no_stack_unwind,
            boost::contexts::return_to_caller);

The __context_fn__, as well as its arguments, if any, are copied into the
context's state.  If a reference is required, use boost::ref.

The maximum number of arguments of __context_fn__ is defined by
BOOST_CONTEXT_ARITY (default is 10 and might be increased).

Calling __context_start__ invokes the __context_fn__ in a newly created context
complete with registers, flags, stack and instruction pointers.  When control
should be returned to the original calling context, call __context_suspend__.
The current context information (registers, flags, and stack and instruction
pointers) is saved and the original context information is restored. Calling
__context_resume__ resumes execution in the second context after saving the new
state of the original context.
Note that __context_start__ must be called first and only once.

        boost::contexts::context ctx;

        void fn( int j)
        {
            for( int i = 0; i < j; ++i)
            {
                std::cout << "fn(): local variable i == " << i << std::endl;

                // save current context
                // value of local variable is preserved
                // transfer execution control back to main()
                ctx.suspend();

                // ctx.resume() was called
                // execution control transfered back from main()    
            }
        }

        int main( int argc, char * argv[])
        {
            ctx = boost::contexts::context( fn, 7,
                boost::contexts::default_stacksize(),
                boost::contexts::no_stack_unwind,
                boost::contexts::return_to_caller);

            std::cout << "main() starts context ctx" << std::endl;
            // start the context ctx for the first time; enter fn()
            ctx.start();

            // ctx.suspend() was called so we returned from start()
            while ( ! ctx.is_complete() )
            {
                std::cout << "main() calls context ctx" << std::endl;
                // resume inside fn()
                // execution control is transfered to ctx
                ctx.resume();

                // ctx.suspend() was called within fn()
            }

            std::cout << "Done" << std::endl;

            return EXIT_SUCCESS;
        }

        output:
            main() starts context ctx
            fn(): local variable i == 0
            main() calls context ctx
            fn(): local variable i == 1
            main() calls context ctx
            fn(): local variable i == 2
            main() calls context ctx
            fn(): local variable i == 3
            main() calls context ctx
            fn(): local variable i == 4
            main() calls context ctx
            fn(): local variable i == 5
            main() calls context ctx
            fn(): local variable i == 6
            main() calls context ctx
            Done

[warning Calling __context_resume__ from inside the same context results in
undefined behaviour.]

[note In contrast to threads, which are preemtive, __context__ switches are
cooperative (programmer controls when switch will happen). The kernel is not
involved in the context switches.]


[heading Transfer of data]

The argument passed to __context_resume__, in one context, is returned by
__context_suspend__ in the other context.  The intptr_t passed to
__context_suspend__, in one context, is returned by __context_resume__ (or
__context_start__, depending upon which function was called previously) in the
other context. 
__context_start__ has no argument because it enters the start of the function,
and there is no previous call to __context_suspend__ to return a value.

        boost::contexts::context ctx;

        void fn()
        {
            int i = 7;
            std::cout << "fn(): local variable i == " << i << std::endl;

            // save current context
            // transfer execution control back to caller
            // pass content of variable back
            int j = ctx.suspend( i);
            // j == 10 because x == 10 in main()

            std::cout << "transfered value: " << j << std::endl;
        }

        int main( int argc, char * argv[])
        {
            ctx = boost::contexts::context( fn,
                     boost::contexts::default_stacksize(),
                     boost::contexts::no_stack_unwind,
                     boost::contexts::return_to_caller);

            std::cout << "main() calls context ctx" << std::endl;

            // start the context ctx for the first time
            // enter fn()
            int x = ctx.start();
            // x == 7 because i == 7 in fn()

            std::cout << "transfered value: " << x << std::endl;

            x = 10;
            // ctx.suspend() was called so we returned from start()
            ctx.resume( x);

            std::cout << "Done" << std::endl;

            return EXIT_SUCCESS;
        }

        output:
            main() calls context ctx
            fn(): local variable i == 7
            transfered value: 7
            transfered value: 10
            Done


[heading Exceptions in __context_fn__]

If the __context_fn__ emits an exception, std::terminate() is called.

[important Code executed by context must not prevent the propagation of the
__forced_unwind__ exception.  Absorbing that exception will cause stack
unwinding to fail.  Thus, any code that catches all exceptions must rethrow the
pending exception.]

        try
        {
            // code that might throw
        }
        catch( forced_unwind)
        {
            throw;
        }
        catch(...)
        {
            // possibly not rethrow pending exception
        }


[heading Handling execution context termination]

The last context constructor argument is an enumerated type which determines
what should happen when the context is complete (that is, when the
__context_fn__ returns). The available values are `return_to_caller` and
`exit_application`.

When the last constructor argument is `return_to_caller`, execution control is
transferred back to the last invocation of __context_start__ or
__context_resume__ when the context is complete, as shown in this example:

        boost::contexts::context ctx;

        void fn( int j)
        {
            for( int i = 0; i < j; ++i)
            {
                std::cout << "fn(): local variable i == " << i << std::endl;
                ctx.suspend();
            }

            // fn() returns
            // execution control is transfered back to main()
        }

        int main( int argc, char * argv[])
        {
            ctx = boost::contexts::context( fn, 7,
                boost::contexts::default_stacksize(),
                boost::contexts::no_stack_unwind,
                boost::contexts::return_to_caller);

            ctx.start();
            while ( ! ctx.is_complete() )
            {
                std::cout << "main() calls context ctx" << std::endl;
                ctx.resume();
            }

            // fn() returned; the context is complete

            std::cout << "Done" << std::endl;

            return EXIT_SUCCESS;
        }

        output:
            fn(): local variable i == 0
            main() calls context ctx
            fn(): local variable i == 1
            main() calls context ctx
            fn(): local variable i == 2
            main() calls context ctx
            fn(): local variable i == 3
            main() calls context ctx
            fn(): local variable i == 4
            main() calls context ctx
            fn(): local variable i == 5
            main() calls context ctx
            fn(): local variable i == 6
            main() calls context ctx
            Done

When the last constructor argument is `exit_application`, the application
terminates with an exit status of zero when the context is complete, as shown in
the following example:

        boost::contexts::context ctx;

        void fn( int j)
        {
            for( int i = 0; i < j; ++i)
            {
                std::cout << "fn(): local variable i == " << i << std::endl;
                ctx.suspend();
            }

            // fn() returns
            // application will terminate
        }

        int main( int argc, char * argv[])
        {
            ctx = boost::contexts::context( fn, 7,
                boost::contexts::default_stacksize(),
                boost::contexts::no_stack_unwind,
                boost::contexts::exit_application);

            ctx.start();
            while ( ! ctx.is_complete() )
            {
                std::cout << "main() calls context ctx" << std::endl;
                ctx.resume();
            }

            // never reached
            return EXIT_SUCCESS;
        }

        output:
            fn() calls context ctx
            fn(): local variable i == 1
            main() calls context ctx
            fn(): local variable i == 2
            main() calls context ctx
            fn(): local variable i == 3
            main() calls context ctx
            fn(): local variable i == 4
            main() calls context ctx
            fn(): local variable i == 5
            main() calls context ctx
            fn(): local variable i == 6
            main() calls context ctx


[heading Chaining contexts]

__boost_context__ provides the ability to chain context instances by passing
a reference to another context, other than that __not_a_context__, as the
last constructor argument.
In this way, it is possible to create a chain of contexts. Depending on the
`do_return` argument in the constructor of the last context in the chain, the
application terminates or execution control is transferred back to the last
invocation of __context_resume__. Each call of __context_suspend__, for the
chained context instances, will return to __context_resume__.

        boost::contexts::context ctx2;

        void fn1()
        {
            std::cout << "fn1(): when this function returns fn2() will be entered" << std::endl;
        }

        void fn2()
        {
            std::cout << "fn2(): first time entered" << std::endl;
            ctx2.suspend();
            std::cout << "fn2(): second time entered\n";
            std::cout << "fn2(): return to main()" << std::endl;
        }

        int main( int argc, char * argv[])
        {
            {
                // ctx2 will return to ctx2.resume()
                ctx2 = boost::contexts::context(
                    fn2, 
                    boost::contexts::default_stacksize(),
                    boost::contexts::no_stack_unwind,
                    boost::contexts::return_to_caller);

                // ctx1 defines ctx2 as its successor
                boost::contexts::context ctx1(
                    fn1, 
                    boost::contexts::default_stacksize(),
                    boost::contexts::no_stack_unwind,
                    ctx2);

                // transfer execution control to ctx1
                // fn1() is entered 
                ctx1.start();

                // ctx2.suspend() was called
            }

            // ctx2 was already started by ctx1 
            ctx2.resume();

            std::cout << "Done" << std::endl;

            return EXIT_SUCCESS;
        }

        output:
            fn1(): when this function returns fn2() will be entered
            fn2(): first time entered
            fn2(): second time entered
            fnd2(): return to main()
            Done

[important Call __context_start__ only on the first context in a chain.]


[heading Stack unwinding]

Sometimes it is necessary to unwind the stack of an unfinished context to
destroy local stack variables so they can release allocated resources (RAII
pattern). The next to last argument of the context constructor, `do_unwind`,
indicates whether the destructor should unwind the stack.
Stack unwinding can also be triggered by calling __context_unwind__.

Stack unwinding assumes the following preconditions:

* The context is not __not_a_context__
* The context is not complete
* The context is not running
* The context owns a stack

After unwinding, a __context__ is complete.


        boost::contexts::context ctx;

        struct X
        {
            X()
            { std::cout << "X()" << std::endl; }

            ~X()
            { std::cout << "~X()" << std::endl; }
        };

        void fn()
        {
            X x;

            for( int i = 0;; ++i)
            {
                std::cout << "fn(): " << i << std::endl;
                // transfer execution control back to main()
                ctx.suspend();
            }
        }

        int main( int argc, char * argv[])
        {
            ctx = boost::contexts::context(
                    fn,
                    boost::contexts::default_stacksize(),
                    boost::contexts::no_stack_unwind,
                    boost::contexts::return_to_caller);
            ctx.start();
            for ( int i = 0; i < 5; ++i)
            {
                // transfer execution control to fn()
                ctx.resume();
            }

            std::cout << "ctx is complete: " << std::boolalpha << ctx.is_complete() << "\n";
            std::cout << "call ctx.unwind_stack()" << std::endl;

            // unwind the stack
            // X::~X() will be called
            ctx.unwind_stack(); // unwind the stack

            std::cout << "ctx is complete: " << std::boolalpha << ctx.is_complete() << "\n";
            std::cout << "Done" << std::endl;

            return EXIT_SUCCESS;
        }

        output:
            X()
            fn(): 0
            fn(): 1
            fn(): 2
            fn(): 3
            fn(): 4
            fn(): 5
            ctx is complete: false
            call ctx.unwind_stack()
            ~X()
            ctx is complete: true
            Done

[important You must not swallow __forced_unwind__ exceptions!]


[section:context Class `context`]

    #include <boost/context/context.hpp>

    class context
    {
    public:
        context();

        template< typename Fn >
        context( Fn fn, std::size_t size, flag_unwind_t do_unwind, flag_return_t do_return);

        template< typename Fn, typename Allocator >
        context( Fn fn, std::size_t size, flag_unwind_t do_unwind, flag_return_t do_return, Allocator const& alloc);

        template< typename Fn >
        context( Fn fn, std::size_t size, flag_unwind_t do_unwind, context & nxt);

        template< typename Fn, typename Allocator >
        context( Fn fn, std::size_t size, flag_unwind_t do_unwind, context & nxt, Allocator const& alloc);

        template< typename Fn, typename A0 >
        context( Fn fn A0 a0, std::size_t size, flag_unwind_t do_unwind, flag_return_t do_return);
        ...
        template< typename Fn, typename A0,..., typename A9 >
        context( Fn fn A0 a0,..., A9, a9, std::size_t size, flag_unwind_t do_unwind, flag_return_t do_return);

        template< typename Fn, typename Allocator, typename A0 >
        context( Fn fn A0 a0, std::size_t size, flag_unwind_t do_unwind, flag_return_t do_return, Allocator const& alloc);
        ...
        template< typename Fn, typename Allocator, typename A0,..., typename A9 >
        context( Fn fn A0 a0,..., A9, a9, std::size_t size, flag_unwind_t do_unwind, flag_return_t do_return, Allocator const& alloc);

        template< typename Fn, typename A0 >
        context( Fn fn A0 a0, std::size_t size, flag_unwind_t do_unwind, context & nxt);
        ...
        template< typename Fn, typename A0,..., typename A9 >
        context( Fn fn A0 a0,..., A9, a9, std::size_t size, flag_unwind_t do_unwind, context & nxt);

        template< typename Fn, typename Allocator, typename A0 >
        context( Fn fn A0 a0, std::size_t size, flag_unwind_t do_unwind, context & nxt, Allocator const& alloc);
        ...
        template< typename Fn, typename Allocator, typename A0,..., typename A9 >
        context( Fn fn A0 a0,..., A9, a9, std::size_t size, flag_unwind_t do_unwind, context & nxt, Allocator const& alloc);

        template< typename Fn >
        context( Fn && fn, std::size_t size, flag_unwind_t do_unwind, flag_return_t do_return);

        template< typename Fn, typename Allocator >
        context( Fn && fn, std::size_t size, flag_unwind_t do_unwind, flag_return_t do_return, Allocator const& alloc);

        template< typename Fn >
        context( Fn && fn, std::size_t size, flag_unwind_t do_unwind, context & nxt);

        template< typename Fn, typename Allocator >
        context( Fn && fn, std::size_t size, flag_unwind_t do_unwind, context & nxt, Allocator const& alloc);

        ~context();

        context( context && other);

        context & operator=( context && other);

        operator unspecified-bool-type() const;

        bool operator!() const;

        void swap( context & other);

        bool is_complete() const;

        bool is_running() const;

        intptr_t start();

        intptr_t resume( intptr_t vp = 0);

        intptr_t suspend( intptr_t vp = 0);

        void unwind_stack();
    };

    void swap( context & l, context & r);

[heading `context()`]
[variablelist
[[Effects:] [Creates a context representing a __not_a_context__.]]
[[Throws:] [Nothing.]]
]

[heading `template< typename Fn > context( Fn fn, std::size_t size, flag_unwind_t do_unwind, flag_return_t do_return)`]
[variablelist
[[Preconditions:] [`size` > minimum_stacksize(), `size` < maximum_stacksize() when ! is_stack_unbound().]]
[[Effects:] [Creates a context which will execute `fn`. If `do_unwind` is `stack_unwind` the destructor of `*this` unwinds
the stack before destructing it. If `do_return` is `exit_application` the application exits with return code `0`, otherwise
execution control is transfered back to the invoker (`resume()` returns).]]
[[Throws:] [__invalid_argument__ if a precondition is not satisfied.]]
]

[heading `template< typename Fn, typename Allocator > context( Fn fn, std::size_t size, flag_unwind_t do_unwind, flag_return_t do_return, Allocator const& alloc)`]
[variablelist
[[Effects:] [Creates a context which will execute `fn`. If `do_unwind` is `stack_unwind` the destructor of `*this` unwinds
the stack before destructing it. If `do_return` is `exit_application` the application exits with return code `0`, otherwise
execution control is transfered back to the invoker (`resume()` returns).]]
[[Throws:] [depends on `alloc` if a precondition is not satisfied.]]
]

[heading `template< typename Fn > context( Fn fn, std::size_t size, flag_unwind_t do_unwind, context & nxt)`]
[variablelist
[[Preconditions:] [`size` > minimum_stacksize(), `size` < maximum_stacksize() when ! is_stack_unbound(), `nxt` is not a __not_a_context__.]]
[[Effects:] [Creates a context which will execute `fn`. If `do_unwind` is `stack_unwind` the destructor of `*this` unwinds
the stack before destructing it. execution control is transfered to `nxt` if `fn` returns (`nxt` is linked).]]
[[Throws:] [__invalid_argument__ if a precondition is not satisfied.]]
]

[heading `template< typename Fn, typename Allocator > context( Fn fn, std::size_t size, flag_unwind_t do_unwind, context & nxt, Allocatorconst& alloc)`]
[variablelist
[[Preconditions:] [`nxt` is not a __not_a_context__.]]
[[Effects:] [Creates a context which will execute `fn`. If `do_unwind` is `stack_unwind` the destructor of `*this` unwinds
the stack before destructing it. execution control is transfered to `nxt` if `fn` returns (`nxt` is linked).]]
[[Throws:] [depends on `alloc` if a precondition is not satisfied.]]
]

[heading `template< typename Fn, typename A0,... > context( Fn fn, A0 a0,..., std::size_t size, flag_unwind_t do_unwind, flag_return_t do_return)`]
[variablelist
[[Preconditions:] [`size` > minimum_stacksize(), `size` < maximum_stacksize() when ! is_stack_unbound().]]
[[Effects:] [Creates a context which will execute `fn` (arguments `A0`,... are bound to `fn`). If `do_unwind` is `stack_unwind` the destructor of `*this` unwinds
the stack before destructing it. If `do_return` is `exit_application` the application exits with return code `0`, otherwise
execution control is transfered back to the invoker (`resume()` returns).]]
[[Throws:] [__invalid_argument__ if a precondition is not satisfied.]]
]

[heading `template< typename Fn, typename Allocator, typename A0,... > context( Fn fn, A0 a0,..., std::size_t size, flag_unwind_t do_unwind, flag_return_t do_return, Allocator const& alloc)`]
[variablelist
[[Preconditions:] [`size` > minimum_stacksize(), `size` < maximum_stacksize() when ! is_stack_unbound().]]
[[Effects:] [Creates a context which will execute `fn` (arguments `A0`,... are bound to `fn`). If `do_unwind` is `stack_unwind` the destructor of `*this` unwinds
the stack before destructing it. If `do_return` is `exit_application` the application exits with return code `0`, otherwise
execution control is transfered back to the invoker (`resume()` returns).]]
[[Throws:] [depends on `alloc` if a precondition is not satisfied.]]
]

[heading `template< typename Fn, typename A0,... > context( Fn fn, A0 a0,..., std::size_t size, flag_unwind_t do_unwind, context & nxt)`]
[variablelist
[[Preconditions:] [`size` > minimum_stacksize(), `size` < maximum_stacksize() when ! is_stack_unbound(), `nxt` is not a __not_a_context__.]]
[[Effects:] [Creates a context which will execute `fn` (arguments`A0`,... are bound to `fn`). If `do_unwind` is `stack_unwind` the destructor of `*this` unwinds
the stack before destructing it. execution control is transfered to `nxt` if `fn` returns (`nxt` is linked).]]
[[Throws:] [__invalid_argument__ if a precondition is not satisfied.]]
]

[heading `template< typename Fn, typename Allocator, typename A0,... > context( Fn fn, A0 a0,..., std::size_t size, flag_unwind_t do_unwind, context & nxt, Allocator const& alloc)`]
[variablelist
[[Preconditions:] [`nxt` is not a __not_a_context__.]]
[[Effects:] [Creates a context which will execute `fn` (arguments`A0`,... are bound to `fn`). If `do_unwind` is `stack_unwind` the destructor of `*this` unwinds
the stack before destructing it. execution control is transfered to `nxt` if `fn` returns (`nxt` is linked).]]
[[Throws:] [depends on `alloc` if a precondition is not satisfied.]]
]

[heading `~context()`]
[variablelist
[[Effects:] [Destroys the instance and deallocates the stack. Unwinds the stack if it was specified in the
constructor of `*this`.]]
[[Throws:] [Nothing.]]
]

[heading `context( context && other)`]
[variablelist
[[Effects:] [Moves the internal data of `other` to `*this`.
`other` becomes __not_a_context__.]]
[[Throws:] [Nothing.]]
]

[heading `context & operator=( context && other)`]
[variablelist
[[Effects:] [Destroys the internal data of `*this` and moves the
internal data of `other` to `*this`. `other` becomes __not_a_context__.]]
[[Throws:] [Nothing.]]
]

[heading `operator unspecified-bool-type() const`]
[variablelist
[[Returns:] [If `*this` refers to __not_a_context__, the function returns
false. Otherwise true.]]
[[Throws:] [Nothing.]]
]

[heading `bool operator!() const`]
[variablelist
[[Returns:] [If `*this` refers not to __not_a_context__, the function returns
true. Otherwise false.]]
[[Throws:] [Nothing.]]
]

[heading `void swap( context & other)`]
[variablelist
[[Effects:] [Swaps the internal data from `*this` with the values
of `other`.]]
[[Throws:] [Nothing.]]
]

[heading `bool is_complete() const`]
[variablelist
[[Preconditions:] [`*this` is not a __not_a_context__.]]
[[Effects:] [Returns `true` if context-function of `*this` has returned.]]
[[Throws:] [Nothing.]]
]

[heading `bool is_running() const`]
[variablelist
[[Preconditions:] [`*this` is not a __not_a_context__.]]
[[Effects:] [Returns `true` if `*this` is the currently active context.]]
[[Throws:] [Nothing.]]
]

[heading `bool is_started() const`]
[variablelist
[[Preconditions:] [`*this` is not a __not_a_context__.]]
[[Effects:] [Returns `true` if context-function of `*this` has started.]]
[[Throws:] [Nothing.]]
]

[heading `bool is_resumed() const`]
[variablelist
[[Preconditions:] [`*this` is not a __not_a_context__.]]
[[Effects:] [Returns `true` if context-function of `*this` has resumed.]]
[[Throws:] [Nothing.]]
]

[heading `intptr_t start()`]
[variablelist
[[Preconditions:] [`*this` is not a __not_a_context__, `! is_complete()` and
`! is_running()`.]]
[[Effects:] [`start()` enters the __context_fn__ `fn` with which the context was
constructed. Upon return, the context was either left via
`suspend()` or the __context_fn__ returned.]]
[[Returns:] [A intptr_t passed to `suspend()` is returned if the context
was left with `suspend()`.]]
[[Throws:] [Nothing.]]
]

[heading `intptr_t resume( intptr_t vp = 0)`]
[variablelist
[[Preconditions:] [`*this` is not a __not_a_context__, `! is_complete()` and
`! is_running()`, `start()` was called before.]]
[[Effects:] [None, if *this was not suspended by a previous call to suspend().
Otherwise, execution control is transferred back to the caller of suspend(), thereby
resuming *this. The argument, vp, will be returned by the previous call to suspend().]]
[[Throws:] [Nothing.]]
]

[heading `intptr_t suspend( intptr_t vp = 0)`]
[variablelist
[[Preconditions:] [`*this` is not a __not_a_context__, `! is_complete()` and
`is_running()`.]]
[[Effects:] [Transfers execution control to the caller of the most recent call to
start() or resume().  The argument, vp, will be returned by start() or resume().]]
[[Throws:] [__forced_unwind__ if __context_unwind__ was called.]]
]

[heading `void unwind_stack()`]
[variablelist
[[Preconditions:] [`*this` is not a __not_a_context__, `! is_complete()` and
`! is_running()`.]]
[[Effects:] [Destroys all objects allocated on the stack, owned by *this, in the
reverse order of their allocation.]] 
[[Throws:] [Nothing.]]
[[Postconditions:] [`*this` is not a __not_a_context__ and `is_complete()`.]]
]

[heading Non-member function `swap()`]

    void swap( context & l, context & r);

[variablelist
[[Effects:] [As if 'l.swap( r)'.]]
]

[endsect]

[endsect]

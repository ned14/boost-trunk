
# Boost.Context Library Build Jamfile

#          Copyright Oliver Kowalke 2009.
# Distributed under the Boost Software License, Version 1.0.
#    (See accompanying file LICENSE_1_0.txt or copy at
#          http://www.boost.org/LICENSE_1_0.txt)

import common ;
import feature ;
import indirect ;
import modules ;
import os ;
import toolset ;
import architecture ;

project boost/context
    : source-location ../src
    : usage-requirements
      <link>shared:<define>BOOST_CONTEXT_DYN_LINK=1
    ;

local rule default_binary_format ( )
{
    local tmp = elf ;
    if [ os.name ] = "MACOSX" { tmp = mach-o ; }
    if [ os.name ] = "NT" { tmp = pe ; }
    return $(tmp) ;
}

feature.feature binary-format
   : elf
     mach-o
     pe
   : propagated
   ;
feature.set-default binary-format : [ default_binary_format ] ;


local rule default_abi ( )
{
    local tmp = sysv ;
    if [ os.name ] = "NT" { tmp = ms ; }
    else if [ os.platform ] = "ARM" { tmp = aapcs ; }
    else if [ os.platform ] = "MIPS" { tmp = o32 ; }
    return $(tmp) ;
}

feature.feature abi
   : aapcs
     eabi
     ms
     n32
     n64
     o32
     o64
     sysv
   : propagated
   ;
feature.set-default abi : [ default_abi ] ;


actions masm
{
	ml /c /Fo"$(<)" "$(>)"
}

actions masm64
{
	ml64 /c /Fo"$(<)" "$(>)"
}


alias asm_context_sources
   : asm/fcontext_arm_aapcs_elf_gas.S
   : <abi>aapcs
     <architecture>arm
     <binary-format>elf
   ;

alias asm_context_sources
   : asm/fcontext_mips32_o32_elf_gas.S
   : <abi>o32
     <architecture>mips1
     <binary-format>elf
   ;

#alias asm_context_sources
#   : asm/fcontext_mips64_n32_elf_gas.S
#   : <abi>n32
#     <architecture>mips1
#     <binary-format>elf
#   ;
#
#alias asm_context_sources
#   : asm/fcontext_mips64_n64_elf_gas.S
#   : <abi>n64
#     <architecture>mips1
#     <binary-format>elf
#   ;
#
#alias asm_context_sources
#   : asm/fcontext_mips64_o64_elf_gas.S
#   : <abi>o64
#     <architecture>mips1
#     <binary-format>elf
#   ;

alias asm_context_sources
   : asm/fcontext_ppc32_sysv_elf_gas.S
   : <abi>sysv
     <address-model>32
     <architecture>power
     <binary-format>elf
   ;

alias asm_context_sources
   : asm/fcontext_ppc64_sysv_elf_gas.S
   : <abi>sysv
     <address-model>64
     <architecture>power
     <binary-format>elf
   ;

alias asm_context_sources
   : asm/fcontext_i386_sysv_elf_gas.S
   : <abi>sysv
     <address-model>32
     <architecture>x86
     <binary-format>elf
   ;

alias asm_context_sources
   : asm/fcontext_x86_64_sysv_elf_gas.S
   : <abi>sysv
     <address-model>64
     <architecture>x86
     <binary-format>elf
   ;

alias asm_context_sources
   : asm/fcontext_x86_64_sysv_macho_gas.S
   : <abi>sysv
     <address-model>64
     <architecture>x86
     <binary-format>mach-o
     <target-os>darwin
   ;

alias asm_context_sources
   : [ make asm/fcontext_i386_ms_pe_masm.o : asm/fcontext_i386_ms_pe_masm.asm : @masm ]
   : <abi>ms
     <address-model>32
     <architecture>x86
     <binary-format>pe
     <target-os>windows
   ;

alias asm_context_sources
   : [ make asm/fcontext_x86_64_ms_pe_masm.o : asm/fcontext_x86_64_ms_pe_masm.asm : @masm64 ]
   : <abi>ms
     <address-model>64
     <architecture>x86
     <binary-format>pe
     <target-os>windows
   ;

explicit asm_context_sources ;


alias select_asm_context_sources
  : asm_context_sources
  : [ architecture.architecture ]
    [ architecture.address-model ]
  ;


alias context_sources
   : fcontext.cpp
     seh.cpp
     stack_allocator_windows.cpp
     stack_utils_windows.cpp
   : <target-os>windows
   ;

alias context_sources
   : fcontext.cpp
     stack_allocator_posix.cpp
     stack_utils_posix.cpp
   ;

explicit context_sources ;


lib boost_context
   : select_asm_context_sources
     context_sources
   : <link>shared:<define>BOOST_CONTEXT_DYN_LINK=1
   ;


boost-install boost_context ;

[article Boost.Jam
    [quickbook 1.3]
    [version 3.1.12]
    [authors [Rivera, Rene], [Abrahams, David], [Prus, Vladimir]]
    [copyright 2003 2004 2005 Rene Rivera, David Abrahams, Vladimir Prus]
    [category tool-build]
    [id jam]
    [dirname jam]
    [purpose
        Jam is a make(1) replacement that makes building simple things simple 
        and building complicated things manageable.
    ]
    [license
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE_1_0.txt or copy at
        [@http://www.boost.org/LICENSE_1_0.txt])
    ]
]

[/ QuickBook Document version 1.3 ]

[/ Shortcuts ]

[def :version:              3.1.12]

[/ Images ]

[def :note:                 [$images/note.png]]
[def :alert:                [$images/caution.png]]
[def :detail:               [$images/note.png]]
[def :tip:                  [$images/tip.png]]

[/ Links ]

[def :Boost:                [@http://www.boost.org Boost]]
[def :Perforce_Jam:         [@http://www.perforce.com/jam/jam.html Perforce Jam]]

[section:intro Introduction]

Boost.Jam (BJam)  is a build tool based on FTJam, which in turn is based on :Perforce_Jam:. It contains significant improvements made to facilitate its use in the Boost Build System, but should be backward compatible with :Perforce_Jam:.

This is version :version: of BJam and is based on version 2.4 of Jam/MR:

[pre
/+\
+\  Copyright 1993-2002 Christopher Seiwald and Perforce Software, Inc.
\+/
This is Release 2.4 of Jam/MR, a make-like program.
License is hereby granted to use this software and distribute it
freely, as long as this copyright notice is retained and modifications
are clearly marked.
ALL WARRANTIES ARE HEREBY DISCLAIMED.
]

[section:features Features]

Jam is a make(1) replacement that makes building simple things simple and building complicated things manageable. 

Jam's language is expressive, making Jamfiles (c.f. Makefiles) compact.

Jam handles header file dependencies automatically and on-the-fly.

Jam is very portable: it runs on UNIX, VMS, Mac, and NT. Most Jamfiles themselves are portable.

Jam is unintrusive: it is small, it has negligible CPU overhead, and it doesn't create any of its own funny files (c.f. Odin, nmake, SunOS make).

Jam can build large projects spread across many directories in one pass, without recursing, tracking the relationships among all files. Jam can do this with multiple, concurrent processes.

Jam isn't under the blinkin GNU copyright, so you can incorporate it into commercial products.

[endsect]

[endsect]

[section:building Building BJam]
[endsect]

[section:usage Using BJam]

If /target/ is provided on the command line, =bjam=  builds /target/; otherwise =bjam= builds the target =all=.

[pre
bjam ( -option \[value\] | target ) *
]

[section:options Options]

Options are either singular or have an accompanying value. When a value is allowed, or required, it can be either given as an argument following the option argument, or it can be given immediately after the option as part of the option argument. The allowed options are:

[table

  []
  
  [ [[^-a]]
    [Build all targets anyway, even if they are up-to-date.] ]
  
  [ [[^-d'''&nbsp;'''/n/]]
    [
    Enable cummulative debugging levels from 1 to n. Values are:\n
    
    1 - Show the actions taken for building targets, as they are executed (the default).\n
    2 - Show "quiet" actions and display all action text, as they are executed.\n
    3 - Show dependency analysis, and target/source timestamps/paths.\n
    4 - Show arguments and timming of shell invocations.\n
    5 - Show rule invocations and variable expansions.\n
    6 - Show directory/header file/archive scans, and attempts at binding to targets.\n
    7 - Show variable settings.\n
    8 - Show variable fetches, variable expansions, and evaluation of '"if"' expressions.\n
    9 - Show variable manipulation, scanner tokens, and memory usage.\n
    10 - Show profile information for rules, both timing and memory.\n
    11 - Show parsing progress of Jamfiles.\n
    12 - Show graph of target dependencies.\n
    13 - Show change target status (fate).
    ] ]
  
  [ [[^-d'''&nbsp;'''+/n/]]
    [Enable debugging level /n/.] ]
  
  [ [[^-d'''&nbsp;'''0]]
    [Turn off all debugging levels. Only errors are reported.] ]
  
  [ [[^-f'''&nbsp;'''/Jambase/]]
    [Read /Jambase/ instead of using the built-in Jambase. Only one -f flag is permitted, but the /Jambase/ may explicitly include other files. A /Jambase/ name of "-" is allowed, in which case console input is read until it is closed. At which point the input is treated as the Jambase.] ]
  
  [ [[^-j'''&nbsp;'''/n/]]
    [Run up to /n/ shell commands concurrently (UNIX and NT only). The default is 1.] ]
  
  [ [[^-l'''&nbsp;'''/n/]]
    [Limit actions to running for /n/ number of seconds, after which they are stopped. Note: Windows only.] ]
  
  [ [[^-n]]
    [Don't actually execute the updating actions, but do everything else. This changes the debug level default to =-d 2=.] ]
  
  [ [[^-o'''&nbsp;'''/file/]]
    [Write the updating actions to the specified file instead of running them.] ]
  
  [ [[^-q]]
    [Quit quickly (as if an interrupt was received) as soon as *any* target fails.] ]
  
  [ [[^-s'''&nbsp;'''/var/=/value/]]
    [Set the variable /var/ to /value/, overriding both internal variables and variables imported from the environment.] ]
  
  [ [[^-t'''&nbsp;'''/target/]]
    [Rebuild /target/ and everything that depends on it, even if it is up-to-date.] ]
  
  [ [[^--'''&nbsp;'''/value/]]
    [The option and /value/ is ignored, but is available from the =$(ARGV)= variable. ]]
  
  [ [[^-v]]
    [Print the version of =bjam= and exit.] ]
]

[endsect]

[section:operation Operation]

BJam has four phases of operation: start-up, parsing, binding, and updating.

[section:startup Start-up]

Upon start-up, =bjam= imports environment variable settings into =bjam= variables. Environment variables are split at blanks with each word becoming an element in the variable's list of values. Environment variables whose names end in =PATH= are split at =$(SPLITPATH)= characters (e.g., =":"= for Unix).

To set a variable's value on the command line, overriding the variable's environment value, use the =-s= option. To see variable assignments made during bjam's execution, use the =-d+7= option.

[endsect]

[section:parsing Parsing]

In the parsing phase, =bjam= reads and parses the =Jambase= file, by default the built-in one. It is written in the [link jam.language jam language]. The last action of the =Jambase= is to read (via the "include" rule) a user-provided file called "=Jamfile=".

Collectively, the purpose of the =Jambase= and the =Jamfile= is to name built target and source files, construct the dependency graph among them, and associate build actions with targets. The =Jambase= defines boilerplate rules and variable assignments, and the =Jamfile= uses these to specify the actual relationship among the target and source files.

[endsect]

[section:binding Binding]

After parsing, =bjam= recursively descends the dependency graph and binds every file target with a location in the filesystem. If =bjam= detects a circular dependency in the graph, it issues a warning.

File target names are given as absolute or relative path names in the filesystem. If the path name is absolute, it is bound as is. If the path name is relative, it is normally bound as is, and thus relative to the current directory. This can be modified by the settings of the =$(SEARCH)= and =$(LOCATE)= variables, which enable jam to find and build targets spread across a directory tree. See [link jam.language.variables.builtins.search SEARCH and LOCATE Variables] below.

[section:fate Update Determination]

After binding each target, =bjam= determines whether the target needs updating, and if so marks the target for the updating phase. A target is normally so marked if it is missing, it is older than any of its sources, or any of its sources are marked for updating. This behavior can be modified by the application of special built-in rules, =ALWAYS=, =LEAVES=, =NOCARE=, =NOTFILE=, =NOUPDATE=, and =TEMPORARY=. See [link jam.language.rules.builtins.modifying_binding Modifying Binding] below.

[endsect]

[section:headerscan Header File Scanning]

During the binding phase, =bjam= also performs header file scanning, where it looks inside source files for the implicit dependencies on other files caused by C's #include syntax. This is controlled by the special variables $(HDRSCAN) and $(HDRRULE). The result of the scan is formed into a rule invocation, with the scanned file as the target and the found included file names as the sources. Note that this is the only case where rules are invoked outside the parsing phase. See [link jam.language.variables.builtins.hdrscan HDRSCAN and HDRRULE Variables] below.

[endsect]

[endsect]

[section:updating Updating]

After binding, =bjam= again recursively descends the dependency graph, this time executing the update actions for each target marked for update during the binding phase. If a target's updating actions fail, then all other targets which depend on that target are skipped.

The =-j= flag instructs =bjam= to build more than one target at a time. If there are multiple actions on a single target, they are run sequentially.

[endsect]

[endsect]

[endsect]

[section:language Language]

=BJam= has an interpreted, procedural language. Statements in =bjam= are rule (procedure) definitions, rule invocations, flow-of-control structures, variable assignments, and sundry language support.

[section:lexical Lexical Features]

=BJam= treats its input files as whitespace-separated tokens, with two exceptions: double quotes (") can enclose whitespace to embed it into a token, and everything between the matching curly braces ({}) in the definition of a rule action is treated as a single string. A backslash (\) can escape a double quote, or any single whitespace character.

=BJam= requires whitespace (blanks, tabs, or newlines) to surround all tokens, including the colon (:) and semicolon (;) tokens.

=BJam= keywords (an mentioned in this document) are reserved and generally must be quoted with double quotes (") to be used as arbitrary tokens, such as variable or target names. 

[endsect]

[section:target Targets]

The essential =bjam= data entity is a target. Built targets are files to be updated. Source targets are the files used in updating built targets. Built targets and source targets are collectively referred to as file targets, and frequently built targets are source targets for other built targets. Pseudotargets are symbols which represent dependencies on other targets, but which are not themselves associated with any real file.

A file target's identifier is generally the file's name, which can be absolutely rooted, relative to the directory of =bjam='s invocation, or simply local (no directory). Most often it is the last case, and the actual file path is bound using the =$(SEARCH)= and =$(LOCATE)= special variables. See [link jam.language.variables.builtins.search SEARCH and LOCATE Variables] below. A local filename is optionally qualified with grist, a string value used to assure uniqueness. A file target with an identifier of the form /file(member)/ is a library member (usually an =ar=(1) archive on Unix).

[endsect]

[section:rules Rules]

[section Action Modifiers]
[endsect]

[section:builtins Built-in Rules]

[section Dependency Building]
[endsect]

[section Modifying Binding]
[endsect]

[section Utility]
[endsect]

[endsect]

[endsect]

[section Flow-of-Control]
[endsect]

[section Variables]

[section:expansion Variable Expansion]
[endsect]

[section:builtins Built-in Variables]

[section:search SEARCH and LOCATE]
[endsect]

[section:hdrscan HDRSCAN and HDRRULE]
[endsect]

[section Platform Identifier]
[endsect]

[section Jam Version]
[endsect]

[section JAMSHELL]
[endsect]

[endsect]

[endsect]

[endsect]

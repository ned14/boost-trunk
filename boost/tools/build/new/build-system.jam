#  (C) Copyright David Abrahams 2001. Permission to copy, use, modify, sell and
#  distribute this software is granted provided this copyright notice appears in
#  all copies. This software is provided "as is" without express or implied
#  warranty, and with no claim as to its suitability for any purpose.
import project ;
import sequence ;
import modules ;
import feature ;
import build-request ;

import builtin ;
import make ;

import site-config ;
import user-config ;

current-project = [ project.load "."  ] ;
if [ MATCH (--dump-projects) : [ modules.peek : ARGV ] ]
{
    project-root.print ;
}

build-request = [ build-request.from-command-line [ modules.peek : ARGV ] ] ;

properties = [ $(build-request).get-at 2 ] ;
# For the time being, just stick toolset to the build request. We'd need to
# find a way to select default toolset collection and a method to override
# that from command line
expanded = [ build-request.expand $(properties) <toolset>gcc ] ;


local target-ids = [ $(build-request).get-at 1 ] ;
local targets
local clean ;

if "--clean" in [ modules.peek : ARGV ]
{
    clean = true ;
}

for local id in $(target-ids)
{
    if $(id) = clean
    {
        clean = true ;
    }
    else
    {
        local t = [ project.find-target $(id) : "." ] ;
        if ! $(t)
        {
            print.wrapped-text "error: target" $(id) "does not exist" ;
            EXIT ;
        }
        else
        {
            targets += $(t) ;
        }                
    }    
}

if ! $(targets)
{
    targets += [ project.target "." ] ; 
}

virtual-targets = ;

if $(expanded) 
{
    for local p in $(expanded)
    {
        for local t in $(targets) 
        {            
            $(t).direct-build-request [ feature.split $(p) ] ;
        }        
    }
    
    for local p in $(expanded)
    {
        for local t in $(targets)
        {            
            virtual-targets += [ $(t).generate [ feature.split $(p) ] ] ;
        }        
    }
}
else
{
    for local t in $(targets)
    {        
        virtual-targets += [ $(t).generate ] ;
    }    
}


actual-targets = ;
for t in $(virtual-targets)
{
    actual-targets += [ $(t).actualize ] ;
}
NOTFILE all ;
DEPENDS all : $(actual-targets) ;

if $(clean)
{
    UPDATE clean ;
}
else
{
    UPDATE all ;
}




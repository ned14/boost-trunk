#  Copyright (C) Vladimir Prus 2002. Permission to copy, use, modify, sell and
#  distribute this software is granted provided this copyright notice appears in
#  all copies. This software is provided "as is" without express or implied
#  warranty, and with no claim as to its suitability for any purpose.

#  This module defines a special generator, which handles targets with
#  <file> property. It allows to use prebuilt targets.

import class : class new xnew ;
import generators ; 
import feature : feature ;

feature file : : free path ;

xclass prebuilt-file-generator : generator 
{    
    import feature type errors path ;
    import regex : match ;
    import class : xnew ;
        
    rule __init__ ( )
    {        
        generator.__init__ prebuilt-file-generator : : * : <file> ;    
    }
        
    rule run ( project name ? : property-set : sources * )
    {
        local properties = [ $(property-set).raw ] ;
        local filename = [ feature.get-values <file> : $(properties) ] ;
        local type = [ type.type $(filename:S) ] ;
        if ! $(type) 
        {
            errors.error "Unknown type for prebuilt target " $(name) in $(project) ;
        }
        
        local t = [ xnew file-target $(filename:S=:D=) : $(type) : $(project) ] ;
        $(t).set-path [ path.parent $(filename) ] ;
        # By default, Boost.Build determines the suffix of file from its type.
        # Since we already have file, specify suffix explicitly.
        $(t).suffix [ regex.match .(.*) : $(filename:S) ] ;
                               
        $(t).action [ xnew null-action $(t) : $(property-set) ] ;
        
        $(t).suffix [ MATCH .(.*) : $(name:S) ] ;
        return $(t) ;            
        
    }
}

generators.register [ xnew prebuilt-file-generator ] ;




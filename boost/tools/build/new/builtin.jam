#  Copyright (C) Vladimir Prus 2002. Permission to copy, use, modify, sell and
#  distribute this software is granted provided this copyright notice appears in
#  all copies. This software is provided "as is" without express or implied
#  warranty, and with no claim as to its suitability for any purpose.

#  Defines standard features and rules.

import class : class new ;

import feature : feature compose ;
import type ;
import scanner ;
import generators ;
import regex ;
import virtual-target ;
import os ;

feature toolset : gcc : implicit propagated ;
feature shared : false true : propagated ;
feature optimization : off on : propagated ;
feature threading : single multi : link-incompatible propagated ;
feature rtti : on off : link-incompatible propagated ;
feature debug-symbols : on off : propagated ;
feature define : : free ;
feature "include" : : free path ;
feature dependency : : free dependency ;
feature library : : free dependency ;
feature find-library : : free ;
feature library-path : : free path ;

feature variant : : implicit composite propagated ;

# Declarating of new variants should be done via this rule
rule variant ( name : parents-or-properties * : tool-properties * )
{
    local parents ;
    if ! $(tool-properties)
    {
        if $(parents-or-properties[1]:G)
        {
            tool-properties = $(parents-or-properties) ;
        }
        else
        {
            parents = $(parents-or-properties) ;
        }
    }
    else
    {
        parents = $(parents-or-properties) ;
    }

    # The problem is that we have to check for conflicts
    # between base variants.
    if $(parents[2])
    {
        print.wrapped-text "error: multiple base variants are not yet supported" ;
        EXIT ;
    }
    
    # Record explicitly specified properties for this variant
    .explicit-properties.$(name) = $(tool-properties) ;

    local inherited ;
    # Add explicitly specified properties for parents
    for local p in $(parents)
    {
        # TODO: the check may be sticter
        if ! [ feature.is-implicit-value $(p) ]
        {
            error "Invalid base varaint" $(p)  ;
        }
        
        inherited += $(.explicit-properties.$(p)) ;
    }
    tool-properties = [ property.refine $(inherited) : $(tool-properties) ] ;
    
    tool-properties = [ feature.add-defaults $(tool-properties) ] ;

    # We should remove default value of 'variant'.
    # Also, remove default value of 'toolset'. CONSIDER: this move is questionable,
    # if we have default toolset, then why eliminate it? We'll have simple target
    # paths of "bin/debug" for default toolset.
    # TODO: we need to eliminate all 'symmetric' features.
    local tool-properties2 ;
    for local p in $(tool-properties)
    {
        if $(p:G) != <variant> && $(p:G) != <toolset>
        {
            tool-properties2 += $(p) ;
        }        
    }
        
    feature.extend variant : $(name) ;
    feature.compose <variant>$(name) : $(tool-properties2) ;    
}
IMPORT $(__name__) : variant : : variant ;

variant debug : <optimization>off <debug-symbols>on ;
variant release : <optimization>on <debug-symbols>off ;

if [ os.name ] in NT CYGWIN
{
    type.register EXE : exe : : main ;
}
else
{
    type.register EXE : : : main ;
}

type.register LIB : : : main ;
type.register STATIC-LIB : a : LIB : main ;
type.register SHARED-LIB : so : LIB : main ;

type.register CPP : cpp cxx ;

rule c-scanner ( includes * )
{
    scanner.__init__ ;
    self.includes = $(includes) ;

    rule pattern ( )
    {
        return "#include[ ]*(<(.*)>|\"(.*)\")" ;
    }

    rule process ( target : matches * )
    {
        local angle = [ regex.transform $(matches) : "<(.*)>" ] ;
        local quoted = [ regex.transform $(matches) : "\"(.*)\"" ] ;

        # CONSIDER: the new scoping rule seem to defeat "on target" variables.
        local g = [ on $(target) return $(HDRGRIST) ] ;  
        local b = [ path.native [ path.parent [ path.make
                      [ virtual-target.binding $(target) ] ] ] ] ;

        # Attach binding of including file to included targets.
        # When target is directly created from virtual target
        # this extra information is unnecessary. But in other
        # cases, it allows to distinguish between two headers of the 
        # same name included from different places.      
        # We don't need this extra information for angle includes,
        # since they should not depend on including file (we can't
        # get literal "." in include path).
        local g2 = $(g)"#"$(b) ;
       
        angle = $(angle:G=$(g)) ;
        quoted = $(quoted:G=$(g2)) ;

        for local i in $(angle)
        {            
            local i2 = [ SEARCH_FOR_TARGET $(i) : $(self.includes:G=) ] ;
            INCLUDES $(target) : $(i2) ;
            if $(i2) = $(i)
            {
                NOCARE $(i) ;
                SEARCH on $(i) = $(self.includes:G=) ;
            }
        }
        
        for local i in $(quoted)
        {
            local path = $(b) $(self.includes:G=) ;
            local i2 = [ SEARCH_FOR_TARGET $(i) : $(path) ] ;
            INCLUDES $(target) : $(i2) ;
            if $(i2) = $(i)
            {
                NOCARE $(i) ;
                SEARCH on $(i) = $(path) ;
            }
        }

        BINDRULE on $(angle) $(quoted) = virtual-target.remember-binding ;

        # Just propagate current scanner to includes, in a hope
        # that includes do not change scanners. 
        for local a in $(angle)
        {            
            scanner.install $(__name__) : $(a) : $(target) ;
        }
    }        
}

class c-scanner : scanner ;
scanner.register c-scanner : include ;

type.set-scanner CPP : c-scanner ;


type.register H : h ;
type.register C : c ;
type.register OBJ : o : : main ;

rule lib-generator ( ) 
{
    composing-generator.__init__ lib-generator : unknown-source-type : LIB ;
    
    rule run ( project name ? : properties * : sources + )
    {
        local actual-type ;
        if <shared>true in $(properties)
        {
            actual-type = SHARED-LIB ;
        }
        else 
        {
            actual-type = STATIC-LIB ;
        }
        return [ generators.construct $(project) $(name) : $(actual-type) : $(properties)
          : $(sources) : allow-composing-generators ] ;
    }
}

class lib-generator : composing-generator ;

generators.register [ new lib-generator ] ;

rule compile-action ( targets + : sources * : action-name : properties * )
{
    action.__init__ $(targets) : $(sources) : $(action-name) : $(properties) ;
    
    rule adjust-properties ( properties * )
    {
        local dg = [ $(self.targets[1]).dg ] ;
        local target-paths = [ $(dg).all-target-directories ] ;    
        # Note that target-paths here are already relative to invocation
        # directory, and can be used as-is.
        
        return $(properties) $(target-paths:G=include) ;
    }    
}

class compile-action : action ;

rule C-compiling-generator ( id : source-types + : target-types + :
                             requirements * )
{
    generator.__init__ $(id) : $(source-types) : $(target-types) :
                       $(requirements) ;

    rule action-class ( )
    {
        return compile-action ;
    }
}

class C-compiling-generator : generator ;


rule register-c-compiler ( id : source-types + : target-types + :
                            requirements * )
{
    local g = [ new C-compiling-generator $(id) : $(source-types) 
                : $(target-types) : $(requirements) ] ;
    generators.register $(g) ;
}

# FIXME: this is ugly, should find a better way (we'd want client code to
# register all generators as "generator.some-rule", not with "some-module.some-rule".)
IMPORT $(__name__) : register-c-compiler : : generators.register-c-compiler ;







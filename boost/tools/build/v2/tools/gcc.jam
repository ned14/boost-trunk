#  Copyright (c) 2001 David Abrahams.
#  Copyright (c) 2002-2003 Rene Rivera.
#  Copyright (c) 2002-2003 Vladimir Prus.
#
#  Use, modification and distribution is subject to the Boost Software
#  License Version 1.0. (See accompanying file LICENSE_1_0.txt or
#  http://www.boost.org/LICENSE_1_0.txt)

import toolset : flags ;
import property ;
import generators ;
import os ;
import type ;
import feature ;
import "class" : new ;
import set ;
import common ;

feature.extend toolset : gcc ;
toolset.inherit gcc : unix ;

# Make the "o" suffix used for gcc toolset on all
# platforms
type.set-generated-target-suffix OBJ : <toolset>gcc : o ;
type.set-generated-target-suffix STATIC_LIB : <toolset>gcc : a ;


# Initializes the gcc toolset
# The name parameter specifies the name used to invoke the compiler, and
# can be absolute.
rule init ( version ? : command * )
{
    local condition = [ common.check-init-parameters gcc : version $(version) ] ;
    
    local command = [ common.get-invocation-command gcc : g++ : $(command) ] ;
    
    flags gcc CONFIG_COMMAND $(condition) : $(command) ;
}

if [ os.name ] = NT
{
    # This causes single-line command invocation to not go through
    # .bat files, thus avoiding command-line length limitations
    JAMSHELL = % ;  
}

generators.register-c-compiler gcc.compile.c++ : CPP : OBJ : <toolset>gcc ;
generators.register-c-compiler gcc.compile.c : C : OBJ : <toolset>gcc ;


# Declare flags and action for compilation
flags gcc.compile OPTIONS <optimization>off : -O0 ;
flags gcc.compile OPTIONS <optimization>speed : -O3 ;
flags gcc.compile OPTIONS <optimization>space : -Os ;

flags gcc.compile OPTIONS <inlining>off : -fno-inline ;
flags gcc.compile OPTIONS <inlining>on : -Wno-inline ;
flags gcc.compile OPTIONS <inlining>full : -finline-functions -Wno-inline ;

flags gcc.compile OPTIONS <debug-symbols>on : -g ;
flags gcc.compile OPTIONS <profiling>on : -pg ;

flags gcc.compile OPTIONS <cflags> ;
flags gcc.compile.c++ OPTIONS <cxxflags> ;
flags gcc.compile DEFINES <define> ;
flags gcc.compile INCLUDES <include> ;

rule compile.c++
{
    # Some extensions are compiled as C++ by default. For others, we need
    # to pass -x c++.
    # We could always pass -x c++ but distcc does not work with it.
    if ! $(>:S) in .cc .cp .cxx .cpp .c++ .C
    {
        LANG on $(<) = "-x c++" ;
    }    
}


actions compile.c++
{
    "$(CONFIG_COMMAND)" $(LANG) -Wall -ftemplate-depth-100 $(OPTIONS) -D$(DEFINES) -I"$(INCLUDES)" -c -o "$(<)" "$(>)" 
}

rule compile.c
{
    # If we use the name g++ then default file suffix -> language mapping
    # does not work. So have to pass -x option. Maybe, we can work around this
    # by allowing the user to specify both C and C++ compiler names.
    #if $(>:S) != .c
    #{
        LANG on $(<) = "-x c" ;
    #}    
}


actions compile.c
{
    "$(CONFIG_COMMAND)" $(LANG) -Wall $(OPTIONS) -D$(DEFINES) -I"$(INCLUDES)" -c -o "$(<)" "$(>)" 
}

# The class which check that we don't try to use
# the <link-runtime>static property while creating or using shared library,
# since it's not supported by gcc/libc.
class gcc-linking-generator : unix-linking-generator
{
    rule generated-targets ( sources + : property-set : project name ? )
    {
        if <link-runtime>static in [ $(property-set).raw ] 
        {
            local m ;
            if [ id ] = "gcc.link.dll"
            {
                m = "on gcc, DLL can't be build with <link-runtime>static" ;
            }         
            if ! $(m) {                
                for local s in $(sources)
                {
                    local type = [ $(s).type ] ;
                    if $(type) &&  [ type.is-derived $(type) SHARED_LIB ] 
                    {
                        m = "on gcc, using DLLS together with the <link-runtime>static options is not possible " ;
                    }                
                }                
            }
            if $(m)
            {
                errors.user-error $(m) :
                  "it's suggested to use <link-runtime>static together with the <link>static" ;
            }
            
        }
                        
        return [ unix-linking-generator.generated-targets 
            $(sources) : $(property-set) : $(property-set) $(name) ] ;
    }    
}

generators.register [ new gcc-linking-generator gcc.link : LIB OBJ : EXE 
    : <toolset>gcc ] ;

generators.register [ new gcc-linking-generator gcc.link.dll : LIB OBJ : SHARED_LIB 
    : <toolset>gcc ] ;




# Declare flags and action for linking
flags gcc.link OPTIONS <debug-symbols>on : -g ;
# Strip the binary when no debugging is needed.
# We use --strip-all flag as opposed to -s since icc
# (intel's compiler) is generally option-compatible with
# and inherits from gcc toolset, but does not support -s
flags gcc.link OPTIONS <debug-symbols>off : -Wl,--strip-all ;
flags gcc.link OPTIONS <profiling>on : -pg ;
flags gcc.link OPTIONS <linkflags> ;
flags gcc.link LINKPATH <library-path> ;
flags gcc.link FINDLIBS-ST <find-static-library> ;
flags gcc.link FINDLIBS-SA <find-shared-library> ;
flags gcc.link LIBRARIES <library-file> ;
# For <link-runtime>static we made sure there are no dynamic libraries 
# in the link
flags gcc.link OPTIONS <link-runtime>static : -static ;
flags gcc.link RPATH <dll-path> ;
flags gcc.link RPATH_LINK <xdll-path> ;

# This permits shared libraries with non-PIC code on Solaris
if [ os.name ] = SOLARIS
{
    flags gcc.link OPTIONS <link>shared : -mimpure-text ;
}

rule link ( targets * : sources * : properties * )
{
    SPACE on $(targets) = " " ;    
}

actions link bind LIBRARIES
{
    "$(CONFIG_COMMAND)" $(OPTIONS) -L"$(LINKPATH)" -Wl,-R$(SPACE)-Wl,"$(RPATH)" -Wl,-rpath-link$(SPACE)-Wl,"$(RPATH_LINK)" -o "$(<)" "$(>)" "$(LIBRARIES)" -l$(FINDLIBS-ST) -l$(FINDLIBS-SA)  
}

# Declare action for creating static libraries
actions piecemeal archive 
{
    ar ur "$(<)" "$(>)"
}


rule link.dll ( targets * : sources * : properties * )
{
    SPACE on $(targets) = " " ;    
}

# Differ from 'link' above only by -shared.
actions link.dll bind LIBRARIES
{
    "$(CONFIG_COMMAND)" $(OPTIONS) -L"$(LINKPATH)" -Wl,-R$(SPACE)-Wl,"$(RPATH)" -o "$(<)" -Wl,-h$(SPACE)-Wl,$(<[1]:D=) -shared "$(>)"  "$(LIBRARIES)" -l$(FINDLIBS-ST) -l$(FINDLIBS-SA)  
}

# Set up threading support. It's somewhat contrived, so perform it at the end,
# to avoid cluttering other code.

if [ os.on-windows ] 
{
    flags gcc OPTIONS <threading>multi : -mthreads ;
}
else if [ modules.peek : UNIX ] 
{
    switch [ modules.peek : JAMUNAME ]
    {
    case SunOS* :
        {
        flags gcc OPTIONS <threading>multi : -pthreads ;
        flags gcc FINDLIBS-SA <threading>multi : rt ;
        }
    case BeOS :
        {
        # BeOS has no threading options, don't set anything here.
        }
    case *BSD :
        {
        flags gcc OPTIONS <threading>multi : -pthread ;
        # there is no -lrt on BSD
        }
    case IRIX :
        {
        # gcc on IRIX does not support multi-threading, don't set anything here.
        }
    case HP_UX :
        {
        # gcc on HP-UX does not support multi-threading, don't set anything here
        }
    case * :
        {
        flags gcc OPTIONS <threading>multi : -pthread ;
        flags gcc FINDLIBS-SA <threading>multi : rt ;
        }
    }
}


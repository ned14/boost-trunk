#  Copyright (C) Vladimir Prus 2002. Permission to copy, use, modify, sell and
#  distribute this software is granted provided this copyright notice appears in
#  all copies. This software is provided "as is" without express or implied
#  warranty, and with no claim as to its suitability for any purpose.

#  This module defines the 'make' main target rule.

import targets ;
import "class" : new ;
import property ;
import errors : error ;
import type : type ;
import regex ;
import property-set ;
import project ;

class make-target-class : basic-target
{
    import type regex virtual-target ;    
    import "class" : new ;
    
    rule __init__ ( name : project : sources * : requirements *
        : default-build * : usage-requirements * )
    {     
        basic-target.__init__ $(name) : $(project) : $(sources) 
          : $(requirements) : $(default-build) : $(usage-requirements) ;
    }
        
    rule construct ( name : source-targets * : property-set )
    {
        local action-name = [ $(property-set).get <action> ] ;        
        # 'm' will always be set -- we add '@' outselfs in 'make'
        # rule below.
        local m = [ MATCH ^@(.*) : $(action-name) ] ;
                        
        local a = [ new action $(source-targets) : $(m[1])
                    : $(property-set) ] ;        
        local t = [ new file-target $(self.name) exact 
          : [ type.type $(self.name) ] : $(self.project) : $(a) ] ;        
        return [ property-set.empty ] [ virtual-target.register $(t) ] ;
    }   
}

# Declares the 'make' main target.
rule make ( target-name : sources * : generating-rule + : requirements *
    : usage-requirements * )
{
    local project = [ project.current ] ;
    
    # The '@' sign causes the feature.jam module to qualify rule name
    # with the module name of current project, if needed.
    local m = [ MATCH ^(@).* : $(generating-rule) ] ;
    if ! $(m)
    {
        generating-rule = @$(generating-rule) ;
    }        
    requirements += <action>$(generating-rule) ;
    
    targets.main-target-alternative
     [ new make-target-class $(target-name) : $(project)
       : [ targets.main-target-sources $(sources) : $(target-name) ] 
       : [ targets.main-target-requirements $(requirements) : $(project) ] 
       : [ targets.main-target-default-build : $(project) ] 
       : [ targets.main-target-usage-requirements $(usage-requirements) : $(project) ]
     ] ;
         
}

IMPORT $(__name__) : make : : make ;



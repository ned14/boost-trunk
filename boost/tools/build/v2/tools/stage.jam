#  Copyright (C) Vladimir Prus 2002. Permission to copy, use, modify, sell and
#  distribute this software is granted provided this copyright notice appears in
#  all copies. This software is provided "as is" without express or implied
#  warranty, and with no claim as to its suitability for any purpose.

#  This module defines the 'stage' rule, used to copy a set of targets to
#  a single location
#
#  Typical usage:
#
#  stage dist : hello_world : <location>/usr/bin ;
#
#  The source target will be copied to the specified location. Some targets will
#  we specially processed. In particular, binaries will be relinked. Free properties
#  from stage dist will be included to properties used for relinking. For example
#
#  stage dist : hello_world : <location>/usr/bin <dll-path>/opt/lib ;
# 
#  will cause 'hello_world' to be relinked to the new location, and <dll-path>
#  property will be added when relinking.
#
#  The following properties specifically control 'stage' rule.
# 
#  - <location> tells where to put targets. If not specified, directory
#    with the same name as stage name will be used.
#  
#  - <name> tells the new name of the staged target. In this case, only
#    one target can be specified in sources.
#
#  - <so-version> is Unix specific. It causes all staged libraries to have
#    value of the feature added to the end of name. The libraries will be
#    relinked during staging, so that 'soname' embedded inside the library
#    has the version suffix too.

#  The stage rule can also traverse dependencies, for example to install a
#  program an all required libraries. Two properties affect this.
#
#  - <traverse-dependencies>on tells that dependencies should be traversed.
#    For each target in 'stage' sources, all sources to that target and all
#    dependency properties are traversed. Sources and dependecy properties of
#    those target are traversed recursively.
#
#  - <include-type>SOME_TYPE tells that targets of SOME_TYPE or a type derived
#    from SOME_TYPE, should be included.
#    If no such property is specified, then all found targets will be staged.
#    Otherwise, only targets with types mentioned in <include-type> property
#    will be included.
#    
#    Example usage::
#
#      stage dist : hello_world : 
#        <traverse-dependencies>on <include-type>EXE <include-type>SHARED_LIB ;
#

import targets ;
import "class" : new ;
import property ;
import errors : error ;
import type : type ;
import type ;
import regex ;
import generators ;
import feature ;
import project ;
import property-set ;
import virtual-target ;

feature.feature <traverse-dependencies> : off on : incidental ;
feature.feature <include-type> : : free incidental ;
feature.feature <so-version> : : free incidental ;

class stage-target-class : basic-target
{
    import feature project type errors generators path stage ;    
    import "class" : new ;
    
    rule __init__ ( name-and-dir : project : sources * : requirements * : default-build * )
    {
        basic-target.__init__ $(name-and-dir) : $(project) : $(sources) : $(requirements) 
          : $(default-build) ;
    }

    # If <location> is not set, sets it based on the project data.
    rule update-location ( property-set )
    {
        local loc = [ $(property-set).get <location> ] ;
        if ! $(loc)
        {
            loc = [ path.root $(self.name) [ $(self.project).get location ] ] ;

            property-set = [ $(property-set).add-raw $(loc:G=<location>) ] ;
        }
        
        return $(property-set) ;
    }
            
    # Takes a target that is installed and property set which is
    # used when installing.
    rule adjust-properties ( target : build-property-set )
    {
        local ps-raw ;
        local a = [ $(target).action ] ;       
        if $(a)
        {
            local ps = [ $(a).properties ] ;
            ps-raw = [ $(ps).raw ] ;
                        
            # Unless <hardcode-dll-paths>true is in properties, which can
            # happen only if the user has explicitly requested it, nuke all
            # <dll-path> properties                                  
            if [ $(property-set).get <hardcode-dll-paths> ] != true
            {
                ps-raw = [ property.change $(ps-raw) : <dll-path> ] ;
            }
            
            # If any <dll-path> properties were specified for installing,
            # add them.
            local l = [ $(build-property-set).get <dll-path> ] ;
            ps-raw += $(l:G=<dll-path>) ;
        }
        
        # Remove the <tag> feature on original targets.
        ps-raw = [ property.change $(ps-raw) : <tag> ] ;
        
        local d = [ $(build-property-set).get <dependency> ] ;
        ps-raw += $(d:G=<dependency>) ;
        
        local d = [ $(build-property-set).get <location> ] ;
        ps-raw += $(d:G=<location>) ;
        
        if $(ps-raw)
        {
            return [ property-set.create $(ps-raw) ]  ;
        }        
        else
        {
            return [ property-set.empty ] ;
        }        
    }
    
        
    rule construct ( name : source-targets * : property-set )
    {        
        source-targets = [ 
          targets-to-stage $(source-targets) : $(property-set) ] ;
        
        property-set = [ update-location $(property-set) ] ;          
                               
        local result ;
        for local i in $(source-targets)
        {            
            local staged-targets ;
                        
            local new-properties = 
              [ adjust-properties $(i) : $(property-set) ] ;
                        
            # See if something special should be done when staging this
            # type. It is indicated by presense of special "staged" type            
            local t = [ $(i).type ] ;            
            if $(t) && [ type.registered STAGED_$(t) ]
            {
                local targets = [ generators.construct $(self.project) $(name) : 
                  STAGED_$(t) : $(new-properties) : $(i) : * ] ;
                staged-targets += $(targets[2-]) ;                                
            }
            else             
            {                
                staged-targets = [ stage.copy-file $(self.project) 
                  : $(i) : $(new-properties) ] ;
            }
            
            if ! $(staged-targets)
            {                    
                errors.error "Unable to generate staged version of " [ $(source).str ] ;
            }                
            
            for t in $(staged-targets) 
            {
                result += [ virtual-target.register $(t) ] ;          
            }            
        }
        
        return [ property-set.empty ] $(result) ;
    }   
    

    # Given the list of source targets explicitly passed to 'stage',
    # returns the list of targets which must be staged.
    rule targets-to-stage ( source-targets * : property-set )
    {   
        local result ;
        
        # Traverse the dependencies, if needed.
        if [ $(property-set).get <traverse-dependencies> ] = "on"
        {
            source-targets = [ collect-targets $(source-targets) ] ;
        }
        
        # Filter the target types, if needed
        for local r in $(source-targets)
        {
            local ty = [ $(r).type ] ;        
            if $(ty)
            {
                # Don't stage searched libs.
                if $(ty) != SEARCHED_LIB
                {
                    if $(included-types)
                    {                        
                        if [ include-type $(ty) : $(included-types) ]
                        {
                            result += $(r) ;
                        }                                    
                    }                
                    else
                    {
                        # Intermediate targets are those with 
                        # "unrequested" types. Unless specific list
                        # of target types is given, we don't install
                        # such targets.
                        if ! [ $(r).intermediate ]
                        {
                            result += $(r) ;
                        }
                    }   
                }                
            }
            else
            {
                result += $(r) ;
            }
        }
        

        
        local included-types = [ $(property-set).get <include-type> ] ;               
        if $(included-types)
        {
        }
        else
        {
        }
                
        return $(result) ;
    }
    
    # CONSIDER: figure out why we can't use virtual-target.traverse here.
    rule collect-targets ( targets * )
    {
        # Find subvariants
        local s ;        
        for local t in $(targets)
        {
            s += [ $(t).creating-subvariant ] ;
        }
        s = [ sequence.unique $(s) ] ;
        
        local result = $(targets) ;
        for local i in $(s)
        {
            result += [ $(i).all-referenced-targets ] ;
        }
        local result2 ;
        for local r in $(result)
        {
            if $(r:G) != <use>
            {
                result2 += $(r:G=) ;
            }            
        }        
        result = [ sequence.unique $(result2) ] ;        
    }
                
    # Returns true iff 'type' is subtype of some element of 'types-to-include'.
    local rule include-type ( type : types-to-include * )
    {
        local found ;
        while $(types-to-include) && ! $(found)
        {
            if [ type.is-subtype $(type) $(types-to-include[1]) ]
            {
                found = true ;
            }            
            types-to-include = $(types-to-include[2-]) ;
        }
        
        return $(found) ;
    }            
}

# Creates a copy of target 'source'. The 'properties' object should
# have a <location> property which specifies where the target must
# be placed.
rule copy-file ( project : source : properties )
{   
    local name = [ $(source).name ] ;
           
    new-a = [ new action $(source) : common.copy : $(properties) ] ;    
    targets = [ new file-target $(name:D=) exact : [ $(source).type ] 
      : $(project) : $(new-a) ] ;
    
    return $(targets) ;
}

#rule symlink-lib ( suffix : project : source : extra-properties )
#{
#    local n = [ $(source).name ] ;
#    local targets = [ 
#     new file-target $(n:D=) : [ $(source).type ] : $(project) ] ;
#    local a = [ new action $(targets) : $(source) : symlink.ln :
#      $(extra-properties) ] ;
#    $(targets).action $(a) ;
#    return $(targets) ;
#}

rule relink-file ( project : source : property-set  ) 
{                                
    local action = [ $(source).action ] ;
    local cloned-action = [ virtual-target.clone-action $(action) : $(project) :
      "" : $(property-set) ] ;
    local result = [ $(cloned-action).targets ] ;                        
    
    return $(result) ;
}

# Declare staged version of the EXE type. Generator for this type will
# cause relinking to the new location.
type.register STAGED_EXE : : EXE ;

class stage-exe-generator : generator
{
    import type property-set modules stage ;
    
    rule __init__ ( )
    {
        generator.__init__ stage-exe : EXE : STAGED_EXE ;
    }
    
    rule run ( project name ? : property-set : source : multiple ? )
    {
        return [ stage.relink-file $(project) : $(source) : $(property-set) ] ;
    }    
}

generators.register [ new stage-exe-generator ] ;

# Declares a stage target. When build, it will construct all sources
# and place in one directory. The directory can be specified in requirements
# with 'location' property. If not specified, the directory name will be
# the same as target name, relative to the project where the target 
# is declared.
rule stage ( name : sources * : requirements * : default-build * )
{
    local project = [ project.current ] ;
    
    # Unless the user has explicitly asked us to hardcode dll paths, add
    # <hardcode-dll-paths>false in requirements, to override default
    # value.
    if ! <hardcode-dll-paths>true in $(requirements)
    {
        requirements += <hardcode-dll-paths>false ;
    }        
    
    if <name> in $(requirements:G)
    {
        errors.user-error 
          "The <name> property is not allowed for the 'install' rule" ;
    }
    if <tag> in $(requirements:G)
    {
        errors.user-error 
          "The <tag> property is not allowed for the 'install' rule" ;
    }
           
    targets.main-target-alternative
      [ new stage-target-class $(name) : $(project) 
        : [ targets.main-target-sources $(sources) : $(name) ]
        : [ targets.main-target-requirements $(requirements) : $(project) ] 
        : [ targets.main-target-default-build $(default-build) : $(project) ] 
      ] ;
}

IMPORT $(__name__) : stage : : stage ;

rule add-variant-and-compiler ( name : property-set )
{
    return [ rename $(name) : $(type) : $(property-set) ] ;
}

rule add-variant ( name : type ? : property-set )
{
    return [ rename $(name) : $(type) : $(property-set) : unversioned ] ;
}
IMPORT $(__name__) : add-variant add-variant-and-compiler
  : : stage.add-variant stage.add-variant-and-compiler ;

rule rename ( name : type ? : property-set : unversioned ? )
{    
    if [ type.is-derived $(type) LIB ]
    {            
        local properties = [ $(property-set).raw ] ;
    
        local tags = ;
    
        local thread-tag ;
        if <threading>multi in $(properties) { thread-tag = mt ; }
        
        local runtime-tag = ;
        if <link-runtime>static in $(properties) { runtime-tag += s ; }
        if <runtime-build>debug in $(properties) { runtime-tag += g ; }
        
        if <variant>debug-python in $(properties) { runtime-tag += y ; }
        if <variant>debug in $(properties) { runtime-tag += d ; }
        if <stdlib>stlport in $(properties) { runtime-tag += p ; }
        if <stdlib-stlport:iostream>hostios in $(properties) { runtime-tag += n ; }
        
        local toolset-tag = ;
        # 'unversioned' should be a parameter.
        if ! $(unversioned)
        {
            switch [ $(property-set).get <toolset> ]
            {
                case borland* : toolset-tag += bcb ;
                case como* : toolset-tag += como ;
                case cw : toolset-tag += cw ;
                case darwin* : toolset-tag += ;
                case edg* : toolset-tag += edg ;
                case gcc* : toolset-tag += gcc ;
                case intel-linux* : toolset-tag += il ;
                case intel-win* : toolset-tag += iw ;
                case kcc* : toolset-tag += kcc ;
                case kylix* : toolset-tag += bck ;
                #case metrowerks* : toolset-tag += cw ;
                #case mingw* : toolset-tag += mgw ;
                case mipspro* : toolset-tag += mp ;
                case msvc* : toolset-tag += vc ;
                case sun* : toolset-tag += sw ;
                case tru64cxx* : toolset-tag += tru ;
                case vacpp* : toolset-tag += xlc ;
            }
            local version = [ MATCH "<toolset.*version>(.*)" : $(properties) ] ;
            toolset-tag += $(version) ;
        }

        # Note yet clear if this should be added on Linux (where we have
        # version in soname) and how it should be done on Windows.
        #local version-tag = ;
        #if ! $(gUNVERSIONED_VARIANT_TAG)
        #{
        #    local version-number = [ get-values <version> : $(properties) ] ;
        #    version-number ?= $(BOOST_VERSION) ;
        #    version-tag = [ MATCH "^([^.]+)[.]([^.]+)" : $(version-number[1]) ] ;
        #    version-tag = $(version-tag:J="_") ;
        #}
    
        tags += $(toolset-tag:J=) ;
        tags += $(thread-tag:J=) ;
        tags += $(runtime-tag:J=) ;
        #tags += $(version-tag) ;
    
        local result ;
        
        if $(tags)
        {
            result = $(name)-$(tags:J=-) ;
        }
        else
        {
            result = $(name) ;
        }
        return [ virtual-target.add-suffix $(result) : $(type) 
          : $(property-set) ] ;
    }    
}





ECHO "Boost.Build V2 Python port (experimental)" ;

# Arrange for PyBB modules to be found.
module
{
    EXTRA_PYTHONPATH = $(BOOST_BUILD_PATH)/python ;
}

module python_interface
{
    rule load ( module-name : location )
    {        
        USER_MODULE $(module-name) ;
	# Make all rules in the loaded module available in
	# the global namespace, so that we don't have
	# to bother specifying "right" module when calling
	# from Python.
        module $(module-name)
        {
            __name__ = $(1) ;
           include $(2) ;
           local rules = [ RULENAMES $(1) ] ;
           IMPORT $(1) : $(rules) : $(1) : $(1).$(rules) ;
        }
    }    
    
    rule set-top-level-targets ( targets * )
    {
        DEPENDS all : $(targets) ;
    }
    
    rule set-update-action ( action : targets * : sources * )
    {
        ECHO "Setting action " $(action) "for" $(targets) ;
        $(action) $(targets) : $(sources) ;
    }
    
    rule MkDir
    {
        # If dir exists, don't update it
        # Do this even for $(DOT).

        NOUPDATE $(<) ;

        if $(<) != $(DOT) && ! $($(<)-mkdir)
        {
            local s ;

            # Cheesy gate to prevent multiple invocations on same dir
            # MkDir1 has the actions
            # Arrange for jam dirs

            $(<)-mkdir = true ;
            MkDir1 $(<) ;
            Depends dirs : $(<) ;

            # Recursively make parent directories.
            # $(<:P) = $(<)'s parent, & we recurse until root

            s = $(<:P) ;

            if $(NT)
            {
                switch $(s)
                {
                    case *:   : s = ;
                    case *:\\ : s = ;
                }
            }
            
            if $(s) && $(s) != $(<)
            {
                Depends $(<) : $(s) ;
                MkDir $(s) ;
            }
            else if $(s)
            {
                NOTFILE $(s) ;
            }
        }
    }

    actions MkDir1
    {
        mkdir "$(<)"
    }

    actions piecemeal together existing Clean
    {
        $(RM) "$(>)"
    }
        
}


PYTHON_IMPORT_RULE boost.build.main : main : PyBB : main ;

module PyBB
{
    main ;
}

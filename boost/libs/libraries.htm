<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="ProgId" content="FrontPage.Editor.Document">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<title>Libraries</title>
<meta name="Microsoft Border" content="none, default">
</head>

<body bgcolor="#FFFFFF" text="#000000">

<table border="1" cellpadding="2" bgcolor="#007F7F">
    <tr>
        <td bgcolor="#FFFFFF"><img src="../c++boost.gif"
        alt="c++boost.gif (8819 bytes)" width="277" height="86"></td>
        <td><a href="../index.htm"><font color="#FFFFFF" size="4"
        face="Arial">Home</font></a></td>
        <td><a href="libraries.htm"><font color="#FFFFFF"
        size="4" face="Arial">Libraries</font></a></td>
        <td><a href="../people/people.htm"><font color="#FFFFFF"
        size="4" face="Arial">People</font></a></td>
        <td><a href="../more/faq.htm"><font color="#FFFFFF"
        size="4" face="Arial">FAQ</font></a></td>
        <td><a href="../more/index.htm"><font color="#FFFFFF"
        size="4" face="Arial">More</font></a></td>
    </tr>
</table>

<h1>Boost Libraries</h1>

<ul>
    <li><a href="array/index.htm">array</a> - STL compliant
        container wrapper for arrays of constant size from
        Nicolai Josuttis.</li>
    <li><a href="utility/call_traits.htm">call_traits</a> -
        Defines types for passing parameters from John Maddock,
        Howard Hinnant, et al.</li>
    <li><a href="compose/index.htm">compose</a> - Functional
        composition adapters for the STL from Nicolai Josuttis.</li>
    <li><a href="utility/compressed_pair.htm">compressed_pair</a>
        - Empty member optimization from John Maddock, Howard
        Hinnant, et al.</li>
    <li><a href="concept_check/concept_check.htm">concept check</a> - Tools for
      generic programming from Jeremy Siek.</li>
    <li><a href="config/index.htm">config</a> - Helps boost
        library developers adapt to compiler idiosyncrasies; not
        intended for library users.</li>
    <li><a href="conversion/index.htm">conversion</a> - Numeric, polymorphic,
      and lexical casts from Dave Abrahams and Kevlin Henney.</li>
    <li><a href="dir_it/index.htm">dir_it</a> - A set of file
        system directory level iterators from Dietmar Kühl.</li>
    <li><a href="functional/index.html">functional</a> - Enhanced
        function object adaptors from Mark Rodgers.</li>
    <li><a href="graph/doc/table_of_contents.html">graph</a> -
        Generic graph components and algorithms from Jeremy Siek and a University of Notre Dame team.</li>
    <li><a href="integer/index.htm">integer</a> - Headers to ease
        dealing with integral types.</li>
    <li><a href="utility/operators.htm">operators</a> - Templates
        ease arithmetic classes and iterators from Dave Abrahams
        and Jeremy Siek.</li>
    <li><a href="property_map/property_map.html">property map</a> - Concepts
      defining interfaces which map key objects to value objects from Jeremy
      Siek.</li>
    <li><a href="python/doc/index.html">python</a> - reflects C++ classes and
      functions into <a href="http://www.python.org">Python</a>, from Dave
      Abrahams.</li>
    <li><a href="random/index.html">random</a> - A complete
        system for random number generation from Jens Maurer.</li>
    <li><a href="rational/index.html">rational</a> - A rational
        number class from Paul Moore.</li>
    <li><a href="regex/index.htm">regex</a> - Regular expression
        library from John Maddock.</li>
    <li><a href="smart_ptr/index.htm">smart_ptr</a> - Four smart
        pointer classes from Greg Colvin and Beman Dawes.</li>
    <li><a href="static_assert/static_assert.htm">static_assert</a>
        - static assertions (compile time assertions) from
        John Maddock.</li>
    <li><a href="timer/index.htm">timer</a> - Event timer,
        progress timer, and progress display classes from Beman
        Dawes.</li>
    <li><a href="utility/type_traits.htm">type_traits</a> -
        Templates for fundamental properties of types from John
        Maddock, Steve Cleary, et al.</li>
    <li><a href="utility/utility.htm">utility</a> - Class <b>noncopyable</b>
        plus <b>next(),</b>&nbsp; <b>prior(),</b> and <b>tie()</b>
        function templates from Dave Abrahams and others. </li>
</ul>

<p>See <a href="../status/compiler_status.html">Compiler Status</a> to find
out what library works with which compiler.</p>

<p>See <a href="hdr_depend.html">Header Dependencies</a> to find
out what other headers each boost header includes.</p>

<h2>Obsolete Libraries</h2>

<ul>
    <li><a href="min_rand/index.htm">min_rand</a> - a random
        number generator class from Beman Dawes. Replaced by <a
        href="random/index.html">random</a>.</li>
</ul>

<h2>Beta Libraries</h2>

<ul>
    <li><a href="array_traits/index.html">array_traits</a> -
        tools to treat built-in arrays more like STL containers
        from Dietmar Kühl. Also see <a href="array/index.htm">array</a>.</li>
    <li><a href="pri_queue/index.html">heaps</a> - a heap of
        priority queues from Dietmar Kühl.</li>
</ul>

<h2><a name="Download">Download</a></h2>

<h3>.zip file</h3>

<p>You may <a href="../boost_all.zip">download all of boost</a>
as a single boost_all.zip file.&nbsp; As many boost headers
include other boost headers, installing one at at time is painful.
This is a first try at making installation easier.</p>

<p>If you don't already have a .zip file decoder, download one
from the <a href="http://www.info-zip.org/pub/infozip/">Info-ZIP</a>
web site. The .zip format is used for distribution because there
are free decoders and encoders available for many, many different
platforms. Many commercial compress/archive utilities also
support this format.</p>

<p>Unix/Linux hints: boost_all.zip is built on a Win32 platform, so the line
endings are wrong for Unix/Linux.&nbsp; Use the -a option when unzipping with InfoZip
for Unix/Linux friendly line endings.&nbsp; Also note that a Linux user reports his decoder
required renaming boost_all.zip
to boost_all.ZIP.</p>

<h3>CVS archive</h3>

<p>For those who have CVS installed, the libraries can also be
downloaded from the public CVS repository. The general procedure
goes something like this:</p>

<blockquote>
    <pre>cvs -d:pserver:anonymous@cvs.boost.sourceforge.net:/cvsroot/boost login
  [Hit &lt;return&gt; when it asks for a password]
cvs -z3 -d:pserver:anonymous@cvs.boost.sourceforge.net:/cvsroot/boost checkout boost
cvs -d:pserver:anonymous@cvs.boost.sourceforge.net:/cvsroot/boost logout</pre>
</blockquote>

<h2>Installing Boost Libraries</h2>

<p>Many boost libraries are implemented entirely within their
header files.&nbsp; The only preparation for their use is to add
the path for the parent directory of the boost header sub-directory
to your compiler's list of #include search directories.</p>

<blockquote>
    <p>For example, using Windows 2000, if you have unzipped
    release 1.18.1 from boost_all.zip into the top level
    directory of your C drive, for Borland, GCC, and Metrowerks
    compilers add '-Ic:/boost_1_18_1' to the compiler command
    line, and for the Microsoft compiler add '/I &quot;c:/boost_1_18_1&quot;'.&nbsp;
    For IDE's, add 'c:/boost_1_18_1' (or whatever you have
    renamed it to) to the search list using the appropriate GUI
    dialog.</p>
</blockquote>

<p>A few boost libraries are implemented by separate source files,
and thus require compilation on your system to link properly.&nbsp;
Boost does not currently have an overall &quot;build&quot; or
&quot;make&quot; mechanism in place. Some of the individual libraries do include
make and/or project files for various compilers.</p>

<hr>

<p>Revised <!--webbot bot="Timestamp" s-type="EDITED"
s-format="%d %b %Y" startspan -->06 Jan 2001<!--webbot bot="Timestamp" endspan i-checksum="14736" --></p>
</body>
</html>

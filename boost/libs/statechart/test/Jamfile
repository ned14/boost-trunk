##############################################################################
# (c) Copyright Andreas Huber Doenni 2004-2005
# Distributed under the Boost Software License, Version 1.0. (See accompany-
# ing file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
##############################################################################

subproject libs/fsm/test ;

import testing ; # bring in rules for testing

DEPENDS all : test ; # Make tests run by default.

template fsm-common-options
  :
  : <include>$(BOOST_ROOT)
    # The library ensures that all state destructors are only invoked on
    # the most-derived type, therefore state destructors do not need to
    # be virtual
    <gcc><*><cxxflags>-Wno-non-virtual-dtor
    <gcc-stlport><*><cxxflags>-Wno-non-virtual-dtor
    <gcc-nocygwin><*><cxxflags>-Wno-non-virtual-dtor
    <mingw><*><cxxflags>-Wno-non-virtual-dtor
    <mingw-stlport><*><cxxflags>-Wno-non-virtual-dtor
;

local test_monitor = <lib>../../../libs/test/build/boost_test_exec_monitor ;

rule fsm-run ( source : name : additional-options * )
{
  return [ run $(source).cpp $(test_monitor) <template>fsm-common-options : :
    : $(additional-options) : $(name) ] ;
}

rule fsm-st-run ( source : name : additional-options * )
{
  return [ fsm-run $(source) : $(name)
    : <threading>single
      <define>BOOST_DISABLE_THREADS
      $(additional-options) ] ;
}

rule fsm-st-run-variants ( source )
{
  local result ;
  result += [ fsm-st-run $(source) : $(source)Normal : ] ;
  result += [ fsm-st-run $(source) : $(source)Native
    : <define>BOOST_FSM_USE_NATIVE_RTTI ] ;
  result += [ fsm-st-run $(source) : $(source)Relaxed
    : <define>BOOST_FSM_RELAX_TRANSITION_CONTEXT ] ;
  result += [ fsm-st-run $(source) : $(source)Both
    : <define>BOOST_FSM_USE_NATIVE_RTTI
      <define>BOOST_FSM_RELAX_TRANSITION_CONTEXT ] ;
  return result ;
}

rule fsm-compile-fail ( source : name : additional-options * )
{
  return [ compile-fail $(source).cpp <template>fsm-common-options
    : $(additional-options) : $(name) ] ;
}

rule fsm-compile-fail-variants ( source )
{
  local result ;
  result += [ fsm-compile-fail $(source) : $(source)Normal : ] ;
  result += [ fsm-compile-fail $(source) : $(source)Native
    : <define>BOOST_FSM_USE_NATIVE_RTTI ] ;
  result += [ fsm-compile-fail $(source) : $(source)Relaxed
    : <define>BOOST_FSM_RELAX_TRANSITION_CONTEXT ] ;
  result += [ fsm-compile-fail $(source) : $(source)Both
    : <define>BOOST_FSM_USE_NATIVE_RTTI
      <define>BOOST_FSM_RELAX_TRANSITION_CONTEXT ] ;
  return result ;
}

test-suite fsm :
  [ fsm-compile-fail-variants InvalidChartTest1 ]
  [ fsm-compile-fail-variants InvalidChartTest2 ]
  [ fsm-compile-fail-variants InvalidChartTest3 ]
  [ fsm-st-run-variants TransitionTest ]
  [ fsm-compile-fail-variants InvalidTransitionTest1 ]
  [ fsm-compile-fail-variants InvalidTransitionTest2 ]
  [ fsm-compile-fail-variants InvalidTransitionTest3 ]
  [ fsm-compile-fail-variants InvalidTransitionTest4 ]
  [ fsm-st-run-variants DeferralTest ]
  [ fsm-st-run-variants HistoryTest ]
  [ fsm-compile-fail-variants InconsistentHistoryTest1 ]
  [ fsm-compile-fail-variants InconsistentHistoryTest2 ]
  [ fsm-compile-fail-variants InconsistentHistoryTest3 ]
  [ fsm-compile-fail-variants InconsistentHistoryTest4 ]
  [ fsm-compile-fail-variants InconsistentHistoryTest5 ]
  [ fsm-compile-fail-variants InconsistentHistoryTest6 ]
  [ fsm-compile-fail-variants InconsistentHistoryTest7 ]
  [ fsm-compile-fail-variants InconsistentHistoryTest8 ]
  [ fsm-compile-fail-variants UnsupportedDeepHistoryTest ]
  [ fsm-st-run-variants StateCastTest ]
  [ fsm-st-run-variants TypeInfoTest ]
  [ fsm-st-run-variants StateIterationTest ]
;
      
<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<title>Compiler Status Report</title>
</head>

<body bgcolor="#FFFFFF" text="#000000">

<table border="1" bgcolor="#007F7F" cellpadding="2">
  <tr>
    <td bgcolor="#FFFFFF"><img src="../c++boost.gif" alt="c++boost.gif (8819 bytes)" width="277" height="86"></td>
    <td><a href="../index.htm"><font face="Arial" color="#FFFFFF"><big>Home</big></font></a></td>
    <td><a href="../libraries.htm"><font face="Arial" color="#FFFFFF"><big>Libraries</big></font></a></td>
    <td><a href="../people.htm"><font face="Arial" color="#FFFFFF"><big>People</big></font></a></td>
    <td><a href="../more/faq.htm"><font face="Arial" color="#FFFFFF"><big>FAQ</big></font></a></td>
    <td><a href="../more/index.htm"><font face="Arial" color="#FFFFFF"><big>More</big></font></a></td>
  </tr>
</table>
<h1>Compiler Status</h1>
<p>Will all boost libraries work with your compiler?&nbsp; Unfortunately, the
answer is &quot;it depends.&quot;.</p>
<p>Boost libraries rely on modern C++ features such as templates and the C++
Standard Library.&nbsp; But even today, years after the adoption of the C++
Standard, some compilers still don't support important features like partial
template specialization.</p>
<p>Boost library authors often expend a great deal of effort trying to work
around compiler deficiencies.&nbsp; Nevertheless, some libraries will not
compile at all with certain compilers or may have crippled functionality.&nbsp;
Even if the current release of a compiler supports a boost library, older
version of the compiler may not work properly.</p>
<h2>Compiler Status Tables</h2>
<p>Boost releases are run through a regression test which automatically
generates the following tables. Unless otherwise indicated, the C++ Standard
Library implementation is the one shipped with the compiler.</p>
<p><b>Warning:</b> These tables are not a good indication of a particular
compiler's compliance with the C++ Standard.&nbsp; The boost libraries often
contain workarounds which mask compiler deficiencies.</p>
<p><b>Warning: </b>The regression test is under development and cannot yet be
relied upon.&nbsp; The current version is a compile only test; the programs are
not executed or otherwise tested.&nbsp; Even the compilation results may be
spurious; many negative results stem from problems with the immature test suite
rather that with the library or compiler.&nbsp; Furthermore, some library tests
have not yet been included.</p>
<h3>Platform: Windows 2000</h3>
<p>As of boost version 1.16.1</p>
<table border="1" cellspacing="0" cellpadding="5">
  <tr>
    <td>Program</td>
    <td>Borland<br>
      BCC<br>
      5.4</td>
    <td>Borland<br>
      BCC<br>
      5.5</td>
    <td>Metrowerks<br>
      CodeWarrior<br>
      5.3</td>
    <td>Microsoft<br>
      VC++<br>
      6.0 SP3</td>
    <td>Microsoft<br>
      VC++<br>
      6.0 SP3<br>
      STLport<br>
      3.2.1</td>
  </tr>
  <tr>
    <td><a href="config/config_test.cpp">config/config_test.cpp</a></td>
    <td>yes</td>
    <td>yes</td>
    <td>yes</td>
    <td>yes</td>
    <td>yes</td>
  </tr>
  <tr>
    <td><a href="functional/function_test.cpp">functional/function_test.cpp</a></td>
    <td>yes</td>
    <td>yes</td>
    <td>no</td>
    <td>yes</td>
    <td>no</td>
  </tr>
  <tr>
    <td><a href="integer/cstdint_test.cpp">integer/cstdint_test.cpp</a></td>
    <td>yes</td>
    <td>yes</td>
    <td>yes</td>
    <td>yes</td>
    <td>yes</td>
  </tr>
  <tr>
    <td><a href="integer/integer_test.cpp">integer/integer_test.cpp</a></td>
    <td>yes</td>
    <td>yes</td>
    <td>yes</td>
    <td>yes</td>
    <td>no</td>
  </tr>
  <tr>
    <td><a href="integer/integer_traits_test.cpp">integer/integer_traits_test.cpp</a></td>
    <td>yes</td>
    <td>yes</td>
    <td>yes</td>
    <td>yes</td>
    <td>yes</td>
  </tr>
  <tr>
    <td><a href="rational/rational_example.cpp">rational/rational_example.cpp</a></td>
    <td>yes</td>
    <td>yes</td>
    <td>yes</td>
    <td>yes</td>
    <td>yes</td>
  </tr>
  <tr>
    <td><a href="random/random_test.cpp">random/random_test.cpp</a></td>
    <td>no</td>
    <td>yes</td>
    <td>no</td>
    <td>yes</td>
    <td>yes</td>
  </tr>
  <tr>
    <td><a href="random/random_demo.cpp">random/random_demo.cpp</a></td>
    <td>yes</td>
    <td>yes</td>
    <td>no</td>
    <td>yes</td>
    <td>yes</td>
  </tr>
  <tr>
    <td><a href="smart_ptr/smart_ptr_test.cpp">smart_ptr/smart_ptr_test.cpp</a></td>
    <td>yes</td>
    <td>yes</td>
    <td>yes</td>
    <td>yes</td>
    <td>yes</td>
  </tr>
  <tr>
    <td><a href="utility/call_traits_test.cpp">utility/call_traits_test.cpp</a></td>
    <td>yes</td>
    <td>yes</td>
    <td>no</td>
    <td>no</td>
    <td>no</td>
  </tr>
  <tr>
    <td><a href="utility/cast_test.cpp">utility/cast_test.cpp</a></td>
    <td>yes</td>
    <td>yes</td>
    <td>yes</td>
    <td>yes</td>
    <td>no</td>
  </tr>
  <tr>
    <td><a href="utility/iterators_test.cpp">utility/iterators_test.cpp</a></td>
    <td>yes</td>
    <td>yes</td>
    <td>yes</td>
    <td>yes</td>
    <td>yes</td>
  </tr>
  <tr>
    <td><a href="utility/operators_test.cpp">utility/operators_test.cpp</a></td>
    <td>yes</td>
    <td>yes</td>
    <td>yes</td>
    <td>yes</td>
    <td>yes</td>
  </tr>
  <tr>
    <td><a href="utility/type_traits_test.cpp">utility/type_traits_test.cpp</a></td>
    <td>no</td>
    <td>no</td>
    <td>no</td>
    <td>no</td>
    <td>no</td>
  </tr>
</table>
<br>
<hr>
<p>Revised <!--webbot bot="Timestamp" s-type="EDITED" s-format="%d %B %Y" startspan -->05 July 2000<!--webbot bot="Timestamp" endspan i-checksum="18764" --></p>

</body>

</html>

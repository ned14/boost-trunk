<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="stylesheet" type="text/css" href="../../../../boost.css">
<title>Boost.Preprocessor - Reference</title>
</head>
<body link="#0000ff" vlink="#800080">
<table border="0" cellpadding="7" cellspacing="0" width="100%" summary=
    "header">
  <tr> 
    <td valign="top" width="300"> 
      <h3><a href="../../../../index.htm"><img height="86" width="277" alt="C++ Boost" src="../../../../c++boost.gif" border="0"></a></h3>
    </td>
    <td valign="top"> 
      <h1 align="center">Boost.Preprocessor</h1>
      <h2 align="center">Reference</h2>
    </td>
  </tr>
</table>
<hr>

<h2><a name="Macros">Macros</a> (<a href="#Headers">Headers</a>)</h2>

<dl>
  <dt><a href="arithmetic_add.htm#BOOST_PP_ADD">BOOST_PP_ADD</a></dt>
  <dt><a href="arithmetic_add.htm#BOOST_PP_ADD_D">BOOST_PP_ADD_D</a></dt>
  <dt><a href="logical_and.htm#BOOST_PP_AND">BOOST_PP_AND</a></dt>
  <dt><a href="assert_msg.htm#BOOST_PP_ASSERT_MSG">BOOST_PP_ASSERT_MSG</a></dt>
  <dt><a href="logical_bool.htm#BOOST_PP_BOOL">BOOST_PP_BOOL</a></dt>
  <dt><a href="cat.htm#BOOST_PP_CAT">BOOST_PP_CAT</a></dt>
  <dt><a href="comma.htm#BOOST_PP_COMMA">BOOST_PP_COMMA</a></dt>
  <dt><a href="comma_if.htm#BOOST_PP_COMMA_IF">BOOST_PP_COMMA_IF</a></dt>
  <dt><a href="dec.htm#BOOST_PP_DEC">BOOST_PP_DEC</a></dt>
  <dt><a href="arithmetic_div.htm#BOOST_PP_DIV">BOOST_PP_DIV</a></dt>
  <dt><a href="arithmetic_div.htm#BOOST_PP_DIV_D">BOOST_PP_DIV_D</a></dt>
  <dt><a href="empty.htm#BOOST_PP_EMPTY">BOOST_PP_EMPTY</a></dt>
  <dt><a href="enum.htm#BOOST_PP_ENUM">BOOST_PP_ENUM</a></dt>
  <dt><a href="enum_params.htm#BOOST_PP_ENUM_PARAMS">BOOST_PP_ENUM_PARAMS</a></dt>
  <dt><a href="enum_params_with_a_default.htm#BOOST_PP_ENUM_PARAMS_WITH_A_DEFAULT">BOOST_PP_ENUM_PARAMS_WITH_A_DEFAULT</a></dt>
  <dt><a href="enum_params_with_defaults.htm#BOOST_PP_ENUM_PARAMS_WITH_DEFAULTS">BOOST_PP_ENUM_PARAMS_WITH_DEFAULTS</a></dt>
  <dt><a href="enum_shifted.htm#BOOST_PP_ENUM_SHIFTED">BOOST_PP_ENUM_SHIFTED</a></dt>
  <dt><a href="enum_shifted_params.htm#BOOST_PP_ENUM_SHIFTED_PARAMS">BOOST_PP_ENUM_SHIFTED_PARAMS</a></dt>
  <dt><a href="comparison_equal.htm#BOOST_PP_EQUAL">BOOST_PP_EQUAL</a></dt>
  <dt><a href="comparison_equal.htm#BOOST_PP_EQUAL_D">BOOST_PP_EQUAL_D</a></dt>
  <dt><a href="expand.htm#BOOST_PP_EXPAND">BOOST_PP_EXPAND</a></dt>
  <dt><a href="expr_if.htm#BOOST_PP_EXPR_IF">BOOST_PP_EXPR_IF</a></dt>
  <dt><a href="for.htm#BOOST_PP_FOR">BOOST_PP_FOR</a></dt>
  <dt><a href="comparison_greater.htm#BOOST_PP_GREATER">BOOST_PP_GREATER</a></dt>
  <dt><a href="comparison_greater.htm#BOOST_PP_GREATER_D">BOOST_PP_GREATER_D</a></dt>
  <dt><a href="comparison_greater_equal.htm#BOOST_PP_GREATER_EQUAL">BOOST_PP_GREATER_EQUAL</a></dt>
  <dt><a href="comparison_greater_equal.htm#BOOST_PP_GREATER_EQUAL_D">BOOST_PP_GREATER_EQUAL_D</a></dt>
  <dt><a href="identity.htm#BOOST_PP_IDENTITY">BOOST_PP_IDENTITY</a></dt>
  <dt><a href="if.htm#BOOST_PP_IF">BOOST_PP_IF</a></dt>
  <dt><a href="inc.htm#BOOST_PP_INC">BOOST_PP_INC</a></dt>
  <dt><a href="comparison_less.htm#BOOST_PP_LESS">BOOST_PP_LESS</a></dt>
  <dt><a href="comparison_less.htm#BOOST_PP_LESS_D">BOOST_PP_LESS_D</a></dt>
  <dt><a href="comparison_less_equal.htm#BOOST_PP_LESS_EQUAL">BOOST_PP_LESS_EQUAL</a></dt>
  <dt><a href="comparison_less_equal.htm#BOOST_PP_LESS_EQUAL_D">BOOST_PP_LESS_EQUAL_D</a></dt>
  <dt><a href="limits.htm#BOOST_PP_LIMIT_DIM">BOOST_PP_LIMIT_DIM</a></dt>
  <dt><a href="limits.htm#BOOST_PP_LIMIT_MAG">BOOST_PP_LIMIT_MAG</a></dt>
  <dt><a href="limits.htm#BOOST_PP_LIMIT_TUPLE">BOOST_PP_LIMIT_TUPLE</a></dt>
  <dt><a href="list_append.htm#BOOST_PP_LIST_APPEND">BOOST_PP_LIST_APPEND</a></dt>
  <dt><a href="list_append.htm#BOOST_PP_LIST_APPEND_D">BOOST_PP_LIST_APPEND_D</a></dt>
  <dt><a href="list_at.htm#BOOST_PP_LIST_AT">BOOST_PP_LIST_AT</a></dt>
  <dt><a href="list_at.htm#BOOST_PP_LIST_AT_D">BOOST_PP_LIST_AT_D</a></dt>
  <dt><a href="list_cat.htm#BOOST_PP_LIST_CAT">BOOST_PP_LIST_CAT</a></dt>
  <dt><a href="list_cat.htm#BOOST_PP_LIST_CAT_D">BOOST_PP_LIST_CAT_D</a></dt>
  <dt><a href="list_adt.htm#BOOST_PP_LIST_CONS">BOOST_PP_LIST_CONS</a></dt>
  <dt><a href="list_enum.htm#BOOST_PP_LIST_ENUM">BOOST_PP_LIST_ENUM</a></dt>
  <dt><a href="list_enum.htm#BOOST_PP_LIST_ENUM_R">BOOST_PP_LIST_ENUM_R</a></dt>
  <dt><a href="list_filter.htm#BOOST_PP_LIST_FILTER">BOOST_PP_LIST_FILTER</a></dt>
  <dt><a href="list_filter.htm#BOOST_PP_LIST_FILTER_D">BOOST_PP_LIST_FILTER_D</a></dt>
  <dt><a href="list_adt.htm#BOOST_PP_LIST_FIRST">BOOST_PP_LIST_FIRST</a></dt>
  <dt><a href="list_first_n.htm#BOOST_PP_LIST_FIRST_N">BOOST_PP_LIST_FIRST_N</a></dt>
  <dt><a href="list_first_n.htm#BOOST_PP_LIST_FIRST_N_D">BOOST_PP_LIST_FIRST_N_D</a></dt>
  <dt><a href="list_fold_left.htm#BOOST_PP_LIST_FOLD_LEFT">BOOST_PP_LIST_FOLD_LEFT</a></dt>
  <dt><a href="list_fold_left.htm#BOOST_PP_LIST_FOLD_LEFT_2ND">BOOST_PP_LIST_FOLD_LEFT_2ND</a></dt>
  <dt><a href="list_fold_left.htm#BOOST_PP_LIST_FOLD_LEFT_2ND_D">BOOST_PP_LIST_FOLD_LEFT_2ND_D</a></dt>
  <dt><a href="list_fold_left.htm#BOOST_PP_LIST_FOLD_LEFT_D">BOOST_PP_LIST_FOLD_LEFT_D</a></dt>
  <dt><a href="list_fold_right.htm#BOOST_PP_LIST_FOLD_RIGHT">BOOST_PP_LIST_FOLD_RIGHT</a></dt>
  <dt><a href="list_fold_right.htm#BOOST_PP_LIST_FOLD_RIGHT_2ND">BOOST_PP_LIST_FOLD_RIGHT_2ND</a></dt>
  <dt><a href="list_fold_right.htm#BOOST_PP_LIST_FOLD_RIGHT_2ND_D">BOOST_PP_LIST_FOLD_RIGHT_2ND_D</a></dt>
  <dt><a href="list_fold_right.htm#BOOST_PP_LIST_FOLD_RIGHT_D">BOOST_PP_LIST_FOLD_RIGHT_D</a></dt>
  <dt><a href="list_for_each.htm#BOOST_PP_LIST_FOR_EACH">BOOST_PP_LIST_FOR_EACH</a></dt>
  <dt><a href="list_for_each_i.htm#BOOST_PP_LIST_FOR_EACH_I">BOOST_PP_LIST_FOR_EACH_I</a></dt>
  <dt><a href="list_for_each_i.htm#BOOST_PP_LIST_FOR_EACH_I_R">BOOST_PP_LIST_FOR_EACH_I_R</a></dt>
  <dt><a href="list_for_each_product.htm#BOOST_PP_LIST_FOR_EACH_PRODUCT">BOOST_PP_LIST_FOR_EACH_PRODUCT</a></dt>
  <dt><a href="list_for_each_product.htm#BOOST_PP_LIST_FOR_EACH_PRODUCT_R">BOOST_PP_LIST_FOR_EACH_PRODUCT_R</a></dt>
  <dt><a href="list_for_each.htm#BOOST_PP_LIST_FOR_EACH_R">BOOST_PP_LIST_FOR_EACH_R</a></dt>
  <dt><a href="list_adt.htm#BOOST_PP_LIST_IS_CONS">BOOST_PP_LIST_IS_CONS</a></dt>
  <dt><a href="list_adt.htm#BOOST_PP_LIST_IS_NIL">BOOST_PP_LIST_IS_NIL</a></dt>
  <dt><a href="list_adt.htm#BOOST_PP_LIST_NIL">BOOST_PP_LIST_NIL</a></dt>
  <dt><a href="list_adt.htm#BOOST_PP_LIST_REST">BOOST_PP_LIST_REST</a></dt>
  <dt><a href="list_rest_n.htm#BOOST_PP_LIST_REST_N">BOOST_PP_LIST_REST_N</a></dt>
  <dt><a href="list_rest_n.htm#BOOST_PP_LIST_REST_N_D">BOOST_PP_LIST_REST_N_D</a></dt>
  <dt><a href="list_reverse.htm#BOOST_PP_LIST_REVERSE">BOOST_PP_LIST_REVERSE</a></dt>
  <dt><a href="list_reverse.htm#BOOST_PP_LIST_REVERSE_D">BOOST_PP_LIST_REVERSE_D</a></dt>
  <dt><a href="list_size.htm#BOOST_PP_LIST_SIZE">BOOST_PP_LIST_SIZE</a></dt>
  <dt><a href="list_size.htm#BOOST_PP_LIST_SIZE_D">BOOST_PP_LIST_SIZE_D</a></dt>
  <dt><a href="list_to_tuple.htm#BOOST_PP_LIST_TO_TUPLE">BOOST_PP_LIST_TO_TUPLE</a></dt>
  <dt><a href="list_to_tuple.htm#BOOST_PP_LIST_TO_TUPLE_R">BOOST_PP_LIST_TO_TUPLE_R</a></dt>
  <dt><a href="list_transform.htm#BOOST_PP_LIST_TRANSFORM">BOOST_PP_LIST_TRANSFORM</a></dt>
  <dt><a href="list_transform.htm#BOOST_PP_LIST_TRANSFORM_D">BOOST_PP_LIST_TRANSFORM_D</a></dt>
  <dt><a href="max.htm#BOOST_PP_MAX">BOOST_PP_MAX</a></dt>
  <dt><a href="max.htm#BOOST_PP_MAX_D">BOOST_PP_MAX_D</a></dt>
  <dt><a href="min.htm#BOOST_PP_MIN">BOOST_PP_MIN</a></dt>
  <dt><a href="min.htm#BOOST_PP_MIN_D">BOOST_PP_MIN_D</a></dt>
  <dt><a href="arithmetic_mod.htm#BOOST_PP_MOD">BOOST_PP_MOD</a></dt>
  <dt><a href="arithmetic_mod.htm#BOOST_PP_MOD_D">BOOST_PP_MOD_D</a></dt>
  <dt><a href="arithmetic_mul.htm#BOOST_PP_MUL">BOOST_PP_MUL</a></dt>
  <dt><a href="arithmetic_mul.htm#BOOST_PP_MUL_D">BOOST_PP_MUL_D</a></dt>
  <dt><a href="logical_nor.htm#BOOST_PP_NOR">BOOST_PP_NOR</a></dt>
  <dt><a href="logical_not.htm#BOOST_PP_NOT">BOOST_PP_NOT</a></dt>
  <dt><a href="comparison_not_equal.htm#BOOST_PP_NOT_EQUAL">BOOST_PP_NOT_EQUAL</a></dt>
  <dt><a href="comparison_not_equal.htm#BOOST_PP_NOT_EQUAL_D">BOOST_PP_NOT_EQUAL_D</a></dt>
  <dt><a href="logical_or.htm#BOOST_PP_OR">BOOST_PP_OR</a></dt>
  <dt><a href="repeat.htm#BOOST_PP_REPEAT">BOOST_PP_REPEAT</a></dt>
  <dt><a href="repeat.htm#BOOST_PP_REPEAT_2ND">BOOST_PP_REPEAT_2ND</a></dt>
  <dt><a href="repeat.htm#BOOST_PP_REPEAT_3RD">BOOST_PP_REPEAT_3RD</a></dt>
  <dt><a href="repeat_from_to.htm#BOOST_PP_REPEAT_FROM_TO">BOOST_PP_REPEAT_FROM_TO</a></dt>
  <dt><a href="repeat_from_to.htm#BOOST_PP_REPEAT_FROM_TO_2ND">BOOST_PP_REPEAT_FROM_TO_2ND</a></dt>
  <dt><a href="repeat_from_to.htm#BOOST_PP_REPEAT_FROM_TO_3RD">BOOST_PP_REPEAT_FROM_TO_3RD</a></dt>
  <dt><a href="stringize.htm#BOOST_PP_STRINGIZE">BOOST_PP_STRINGIZE</a></dt>
  <dt><a href="arithmetic_sub.htm#BOOST_PP_SUB">BOOST_PP_SUB</a></dt>
  <dt><a href="arithmetic_sub.htm#BOOST_PP_SUB_D">BOOST_PP_SUB_D</a></dt>
  <dt><a href="tuple_eat.htm#BOOST_PP_TUPLE_EAT">BOOST_PP_TUPLE_EAT</a></dt>
  <dt><a href="tuple_elem.htm#BOOST_PP_TUPLE_ELEM">BOOST_PP_TUPLE_ELEM</a></dt>
  <dt><a href="tuple_reverse.htm#BOOST_PP_TUPLE_REVERSE">BOOST_PP_TUPLE_REVERSE</a></dt>
  <dt><a href="tuple_to_list.htm#BOOST_PP_TUPLE_TO_LIST">BOOST_PP_TUPLE_TO_LIST</a></dt>
  <dt><a href="while.htm#BOOST_PP_WHILE">BOOST_PP_WHILE</a></dt>
  <dt><a href="logical_xor.htm#BOOST_PP_XOR">BOOST_PP_XOR</a></dt>
</dl>
<hr>

<h2><a name="Headers">Headers</a> (<a href="#Macros">Macros</a>)</h2>

<dl>
  <dt>#include &lt;<a href="arithmetic.htm">boost/preprocessor/arithmetic.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="arithmetic_add.htm">boost/preprocessor/arithmetic/add.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="arithmetic_div.htm">boost/preprocessor/arithmetic/div.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="arithmetic_mod.htm">boost/preprocessor/arithmetic/mod.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="arithmetic_mul.htm">boost/preprocessor/arithmetic/mul.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="arithmetic_sub.htm">boost/preprocessor/arithmetic/sub.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="assert_msg.htm">boost/preprocessor/assert_msg.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="cat.htm">boost/preprocessor/cat.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="comma.htm">boost/preprocessor/comma.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="comma_if.htm">boost/preprocessor/comma_if.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="comparison.htm">boost/preprocessor/comparison.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="comparison_equal.htm">boost/preprocessor/comparison/equal.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="comparison_greater.htm">boost/preprocessor/comparison/greater.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="comparison_greater_equal.htm">boost/preprocessor/comparison/greater_equal.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="comparison_less.htm">boost/preprocessor/comparison/less.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="comparison_less_equal.htm">boost/preprocessor/comparison/less_equal.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="comparison_not_equal.htm">boost/preprocessor/comparison/not_equal.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="dec.htm">boost/preprocessor/dec.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="empty.htm">boost/preprocessor/empty.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="enum.htm">boost/preprocessor/enum.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="enum_params.htm">boost/preprocessor/enum_params.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="enum_params_with_a_default.htm">boost/preprocessor/enum_params_with_a_default.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="enum_params_with_defaults.htm">boost/preprocessor/enum_params_with_defaults.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="enum_shifted.htm">boost/preprocessor/enum_shifted.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="enum_shifted_params.htm">boost/preprocessor/enum_shifted_params.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="expand.htm">boost/preprocessor/expand.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="expr_if.htm">boost/preprocessor/expr_if.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="for.htm">boost/preprocessor/for.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="identity.htm">boost/preprocessor/identity.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="if.htm">boost/preprocessor/if.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="inc.htm">boost/preprocessor/inc.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="limits.htm">boost/preprocessor/limits.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="list.htm">boost/preprocessor/list.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="list_adt.htm">boost/preprocessor/list/adt.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="list_append.htm">boost/preprocessor/list/append.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="list_at.htm">boost/preprocessor/list/at.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="list_cat.htm">boost/preprocessor/list/cat.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="list_enum.htm">boost/preprocessor/list/enum.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="list_filter.htm">boost/preprocessor/list/filter.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="list_first_n.htm">boost/preprocessor/list/first_n.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="list_fold_left.htm">boost/preprocessor/list/fold_left.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="list_fold_left_2nd.htm">boost/preprocessor/list/fold_left_2nd.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="list_fold_right.htm">boost/preprocessor/list/fold_right.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="list_fold_right_2nd.htm">boost/preprocessor/list/fold_right_2nd.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="list_for_each.htm">boost/preprocessor/list/for_each.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="list_for_each_i.htm">boost/preprocessor/list/for_each_i.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="list_for_each_product.htm">boost/preprocessor/list/for_each_product.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="list_rest_n.htm">boost/preprocessor/list/rest_n.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="list_reverse.htm">boost/preprocessor/list/reverse.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="list_size.htm">boost/preprocessor/list/size.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="list_to_tuple.htm">boost/preprocessor/list/to_tuple.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="list_transform.htm">boost/preprocessor/list/transform.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="logical.htm">boost/preprocessor/logical.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="logical_and.htm">boost/preprocessor/logical/and.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="logical_bool.htm">boost/preprocessor/logical/bool.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="logical_nor.htm">boost/preprocessor/logical/nor.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="logical_not.htm">boost/preprocessor/logical/not.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="logical_or.htm">boost/preprocessor/logical/or.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="logical_xor.htm">boost/preprocessor/logical/xor.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="max.htm">boost/preprocessor/max.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="min.htm">boost/preprocessor/min.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="repeat.htm">boost/preprocessor/repeat.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="repeat_2nd.htm">boost/preprocessor/repeat_2nd.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="repeat_3rd.htm">boost/preprocessor/repeat_3rd.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="repeat_from_to.htm">boost/preprocessor/repeat_from_to.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="repeat_from_to_2nd.htm">boost/preprocessor/repeat_from_to_2nd.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="repeat_from_to_3rd.htm">boost/preprocessor/repeat_from_to_3rd.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="stringize.htm">boost/preprocessor/stringize.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="tuple.htm">boost/preprocessor/tuple.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="tuple_eat.htm">boost/preprocessor/tuple/eat.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="tuple_elem.htm">boost/preprocessor/tuple/elem.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="tuple_reverse.htm">boost/preprocessor/tuple/reverse.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="tuple_to_list.htm">boost/preprocessor/tuple/to_list.hpp</a>&gt;</dt>
  <dt>#include &lt;<a href="while.htm">boost/preprocessor/while.hpp</a>&gt;</dt>
</dl>

<hr>

<p>Revised <!--webbot bot="Timestamp" s-type="EDITED" s-format="%d %b %Y" startspan --><!--webbot bot="Timestamp" endspan i-checksum="15246" --></p>

<p><i>&copy; Copyright <a href="http://www.housemarque.com">Housemarque Oy</a> 2002</i></p>

<p>Permission to copy, use, modify, sell and distribute this document is granted
provided this copyright notice appears in all copies. This document is provided
"as is" without express or implied warranty, and with no claim as to its suitability
for any purpose.</p>

</body></html>

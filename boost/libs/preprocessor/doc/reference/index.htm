<HTML><HEAD><TITLE>Boost PREPROCESSOR library</TITLE><BODY bgcolor="#FFFFFF">

<a href="../index.htm"><IMG height=86 alt="c++boost.gif (8819 bytes)" src="../../../../c++boost.gif" width=277 align=center></a>

<hr>

<h1>Boost PREPROCESSOR Library: Reference</h1>

<hr>

<h2><a name="Headers">Headers</a> (<a href="#Macros">Macros</a>)</h2>

<dl>
  <dd>#include &lt;<a href="arithmetic_add.htm">boost/preprocessor/arithmetic/add.hpp</a>&gt;
  <dd>#include &lt;<a href="arithmetic_div.htm">boost/preprocessor/arithmetic/div.hpp</a>&gt;
  <dd>#include &lt;<a href="arithmetic_mod.htm">boost/preprocessor/arithmetic/mod.hpp</a>&gt;
  <dd>#include &lt;<a href="arithmetic_mul.htm">boost/preprocessor/arithmetic/mul.hpp</a>&gt;
  <dd>#include &lt;<a href="arithmetic_sub.htm">boost/preprocessor/arithmetic/sub.hpp</a>&gt;
  <dd>#include &lt;<a href="assert_msg.htm">boost/preprocessor/assert_msg.hpp</a>&gt;
  <dd>#include &lt;<a href="cat.htm">boost/preprocessor/cat.hpp</a>&gt;
  <dd>#include &lt;<a href="comma.htm">boost/preprocessor/comma.hpp</a>&gt;
  <dd>#include &lt;<a href="comma_if.htm">boost/preprocessor/comma_if.hpp</a>&gt;
  <dd>#include &lt;<a href="comparison_equal.htm">boost/preprocessor/comparison/equal.hpp</a>&gt;
  <dd>#include &lt;<a href="comparison_greater.htm">boost/preprocessor/comparison/greater.hpp</a>&gt;
  <dd>#include &lt;<a href="comparison_greater_equal.htm">boost/preprocessor/comparison/greater_equal.hpp</a>&gt;
  <dd>#include &lt;<a href="comparison_less.htm">boost/preprocessor/comparison/less.hpp</a>&gt;
  <dd>#include &lt;<a href="comparison_less_equal.htm">boost/preprocessor/comparison/less_equal.hpp</a>&gt;
  <dd>#include &lt;<a href="comparison_not_equal.htm">boost/preprocessor/comparison/not_equal.hpp</a>&gt;
  <dd>#include &lt;<a href="dec.htm">boost/preprocessor/dec.hpp</a>&gt;
  <dd>#include &lt;<a href="empty.htm">boost/preprocessor/empty.hpp</a>&gt;
  <dd>#include &lt;<a href="enum.htm">boost/preprocessor/enum.hpp</a>&gt;
  <dd>#include &lt;<a href="enum_params.htm">boost/preprocessor/enum_params.hpp</a>&gt;
  <dd>#include &lt;<a href="enum_params_with_a_default.htm">boost/preprocessor/enum_params_with_a_default.hpp</a>&gt;
  <dd>#include &lt;<a href="enum_params_with_defaults.htm">boost/preprocessor/enum_params_with_defaults.hpp</a>&gt;
  <dd>#include &lt;<a href="enum_shifted.htm">boost/preprocessor/enum_shifted.hpp</a>&gt;
  <dd>#include &lt;<a href="enum_shifted_params.htm">boost/preprocessor/enum_shifted_params.hpp</a>&gt;
  <dd>#include &lt;<a href="expand.htm">boost/preprocessor/expand.hpp</a>&gt;
  <dd>#include &lt;<a href="for.htm">boost/preprocessor/for.hpp</a>&gt;
  <dd>#include &lt;<a href="identity.htm">boost/preprocessor/identity.hpp</a>&gt;
  <dd>#include &lt;<a href="if.htm">boost/preprocessor/if.hpp</a>&gt;
  <dd>#include &lt;<a href="inc.htm">boost/preprocessor/inc.hpp</a>&gt;
  <dd>#include &lt;<a href="limits.htm">boost/preprocessor/limits.hpp</a>&gt;
  <dd>#include &lt;<a href="list_adt.htm">boost/preprocessor/list/adt.hpp</a>&gt;
  <dd>#include &lt;<a href="list_append.htm">boost/preprocessor/list/append.hpp</a>&gt;
  <dd>#include &lt;<a href="list_at.htm">boost/preprocessor/list/at.hpp</a>&gt;
  <dd>#include &lt;<a href="list_cat.htm">boost/preprocessor/list/cat.hpp</a>&gt;
  <dd>#include &lt;<a href="list_enum.htm">boost/preprocessor/list/enum.hpp</a>&gt;
  <dd>#include &lt;<a href="list_filter.htm">boost/preprocessor/list/filter.hpp</a>&gt;
  <dd>#include &lt;<a href="list_first_n.htm">boost/preprocessor/list/first_n.hpp</a>&gt;
  <dd>#include &lt;<a href="list_fold_left.htm">boost/preprocessor/list/fold_left.hpp</a>&gt;
  <dd>#include &lt;<a href="list_fold_right.htm">boost/preprocessor/list/fold_right.hpp</a>&gt;
  <dd>#include &lt;<a href="list_for_each.htm">boost/preprocessor/list/for_each.hpp</a>&gt;
  <dd>#include &lt;<a href="list_for_each_product.htm">boost/preprocessor/list/for_each_product.hpp</a>&gt;
  <dd>#include &lt;<a href="list_rest_n.htm">boost/preprocessor/list/rest_n.hpp</a>&gt;
  <dd>#include &lt;<a href="list_reverse.htm">boost/preprocessor/list/reverse.hpp</a>&gt;
  <dd>#include &lt;<a href="list_size.htm">boost/preprocessor/list/size.hpp</a>&gt;
  <dd>#include &lt;<a href="list_to_tuple.htm">boost/preprocessor/list/to_tuple.hpp</a>&gt;
  <dd>#include &lt;<a href="list_transform.htm">boost/preprocessor/list/transform.hpp</a>&gt;
  <dd>#include &lt;<a href="logical_and.htm">boost/preprocessor/logical/and.hpp</a>&gt;
  <dd>#include &lt;<a href="logical_bool.htm">boost/preprocessor/logical/bool.hpp</a>&gt;
  <dd>#include &lt;<a href="logical_nor.htm">boost/preprocessor/logical/nor.hpp</a>&gt;
  <dd>#include &lt;<a href="logical_not.htm">boost/preprocessor/logical/not.hpp</a>&gt;
  <dd>#include &lt;<a href="logical_or.htm">boost/preprocessor/logical/or.hpp</a>&gt;
  <dd>#include &lt;<a href="logical_xor.htm">boost/preprocessor/logical/xor.hpp</a>&gt;
  <dd>#include &lt;<a href="max.htm">boost/preprocessor/max.hpp</a>&gt;
  <dd>#include &lt;<a href="min.htm">boost/preprocessor/min.hpp</a>&gt;
  <dd>#include &lt;<a href="repeat.htm">boost/preprocessor/repeat.hpp</a>&gt;
  <dd>#include &lt;<a href="repeat_2nd.htm">boost/preprocessor/repeat_2nd.hpp</a>&gt;
  <dd>#include &lt;<a href="repeat_3rd.htm">boost/preprocessor/repeat_3rd.hpp</a>&gt;
  <dd>#include &lt;<a href="stringize.htm">boost/preprocessor/stringize.hpp</a>&gt;
  <dd>#include &lt;<a href="tuple_eat.htm">boost/preprocessor/tuple/eat.hpp</a>&gt;
  <dd>#include &lt;<a href="tuple_elem.htm">boost/preprocessor/tuple/elem.hpp</a>&gt;
  <dd>#include &lt;<a href="tuple_to_list.htm">boost/preprocessor/tuple/to_list.hpp</a>&gt;
  <dd>#include &lt;<a href="while.htm">boost/preprocessor/while.hpp</a>&gt;
</dl>
<hr>

<h2><a name="Macros">Macros</a> (<a href="#Headers">Headers</a>)</h2>

<dl>
  <dd><a href="arithmetic_add.htm#BOOST_PP_ADD">BOOST_PP_ADD</a>
  <dd><a href="logical_and.htm#BOOST_PP_AND">BOOST_PP_AND</a>
  <dd><a href="assert_msg.htm#BOOST_PP_ASSERT_MSG">BOOST_PP_ASSERT_MSG</a>
  <dd><a href="logical_bool.htm#BOOST_PP_BOOL">BOOST_PP_BOOL</a>
  <dd><a href="cat.htm#BOOST_PP_CAT">BOOST_PP_CAT</a>
  <dd><a href="comma.htm#BOOST_PP_COMMA">BOOST_PP_COMMA</a>
  <dd><a href="comma_if.htm#BOOST_PP_COMMA_IF">BOOST_PP_COMMA_IF</a>
  <dd><a href="dec.htm#BOOST_PP_DEC">BOOST_PP_DEC</a>
  <dd><a href="arithmetic_div.htm#BOOST_PP_DIV">BOOST_PP_DIV</a>
  <dd><a href="empty.htm#BOOST_PP_EMPTY">BOOST_PP_EMPTY</a>
  <dd><a href="enum.htm#BOOST_PP_ENUM">BOOST_PP_ENUM</a>
  <dd><a href="enum_params.htm#BOOST_PP_ENUM_PARAMS">BOOST_PP_ENUM_PARAMS</a>
  <dd><a href="enum_params_with_a_default.htm#BOOST_PP_ENUM_PARAMS_WITH_A_DEFAULT">BOOST_PP_ENUM_PARAMS_WITH_A_DEFAULT</a>
  <dd><a href="enum_params_with_defaults.htm#BOOST_PP_ENUM_PARAMS_WITH_DEFAULTS">BOOST_PP_ENUM_PARAMS_WITH_DEFAULTS</a>
  <dd><a href="enum_shifted.htm#BOOST_PP_ENUM_SHIFTED">BOOST_PP_ENUM_SHIFTED</a>
  <dd><a href="enum_shifted_params.htm#BOOST_PP_ENUM_SHIFTED_PARAMS">BOOST_PP_ENUM_SHIFTED_PARAMS</a>
  <dd><a href="comparison_equal.htm#BOOST_PP_EQUAL">BOOST_PP_EQUAL</a>
  <dd><a href="expand.htm#BOOST_PP_EXPAND">BOOST_PP_EXPAND</a>
  <dd><a href="for.htm#BOOST_PP_FOR">BOOST_PP_FOR</a>
  <dd><a href="comparison_greater.htm#BOOST_PP_GREATER">BOOST_PP_GREATER</a>
  <dd><a href="comparison_greater_equal.htm#BOOST_PP_GREATER_EQUAL">BOOST_PP_GREATER_EQUAL</a>
  <dd><a href="identity.htm#BOOST_PP_IDENTITY">BOOST_PP_IDENTITY</a>
  <dd><a href="if.htm#BOOST_PP_IF">BOOST_PP_IF</a>
  <dd><a href="inc.htm#BOOST_PP_INC">BOOST_PP_INC</a>
  <dd><a href="comparison_less.htm#BOOST_PP_LESS">BOOST_PP_LESS</a>
  <dd><a href="comparison_less_equal.htm#BOOST_PP_LESS_EQUAL">BOOST_PP_LESS_EQUAL</a>
  <dd><a href="limits.htm#BOOST_PP_LIMIT_DIM">BOOST_PP_LIMIT_DIM</a>
  <dd><a href="limits.htm#BOOST_PP_LIMIT_MAG">BOOST_PP_LIMIT_MAG</a>
  <dd><a href="limits.htm#BOOST_PP_LIMIT_TUPLE">BOOST_PP_LIMIT_TUPLE</a>
  <dd><a href="list_append.htm#BOOST_PP_LIST_APPEND">BOOST_PP_LIST_APPEND</a>
  <dd><a href="list_at.htm#BOOST_PP_LIST_AT">BOOST_PP_LIST_AT</a>
  <dd><a href="list_cat.htm#BOOST_PP_LIST_CAT">BOOST_PP_LIST_CAT</a>
  <dd><a href="list_adt.htm#BOOST_PP_LIST_CONS">BOOST_PP_LIST_CONS</a>
  <dd><a href="list_enum.htm#BOOST_PP_LIST_ENUM">BOOST_PP_LIST_ENUM</a>
  <dd><a href="list_filter.htm#BOOST_PP_LIST_FILTER">BOOST_PP_LIST_FILTER</a>
  <dd><a href="list_adt.htm#BOOST_PP_LIST_FIRST">BOOST_PP_LIST_FIRST</a>
  <dd><a href="list_first_n.htm#BOOST_PP_LIST_FIRST_N">BOOST_PP_LIST_FIRST_N</a>
  <dd><a href="list_fold_left.htm#BOOST_PP_LIST_FOLD_LEFT">BOOST_PP_LIST_FOLD_LEFT</a>
  <dd><a href="list_fold_right.htm#BOOST_PP_LIST_FOLD_RIGHT">BOOST_PP_LIST_FOLD_RIGHT</a>
  <dd><a href="list_for_each.htm#BOOST_PP_LIST_FOR_EACH">BOOST_PP_LIST_FOR_EACH</a>
  <dd><a href="list_for_each_product.htm#BOOST_PP_LIST_FOR_EACH_PRODUCT">BOOST_PP_LIST_FOR_EACH_PRODUCT</a>
  <dd><a href="list_adt.htm#BOOST_PP_LIST_IS_CONS">BOOST_PP_LIST_IS_CONS</a>
  <dd><a href="list_adt.htm#BOOST_PP_LIST_IS_NIL">BOOST_PP_LIST_IS_NIL</a>
  <dd><a href="list_adt.htm#BOOST_PP_LIST_NIL">BOOST_PP_LIST_NIL</a>
  <dd><a href="list_adt.htm#BOOST_PP_LIST_REST">BOOST_PP_LIST_REST</a>
  <dd><a href="list_rest_n.htm#BOOST_PP_LIST_REST_N">BOOST_PP_LIST_REST_N</a>
  <dd><a href="list_reverse.htm#BOOST_PP_LIST_REVERSE">BOOST_PP_LIST_REVERSE</a>
  <dd><a href="list_size.htm#BOOST_PP_LIST_SIZE">BOOST_PP_LIST_SIZE</a>
  <dd><a href="list_to_tuple.htm#BOOST_PP_LIST_TO_TUPLE">BOOST_PP_LIST_TO_TUPLE</a>
  <dd><a href="list_transform.htm#BOOST_PP_LIST_TRANSFORM">BOOST_PP_LIST_TRANSFORM</a>
  <dd><a href="max.htm#BOOST_PP_MAX">BOOST_PP_MAX</a>
  <dd><a href="min.htm#BOOST_PP_MIN">BOOST_PP_MIN</a>
  <dd><a href="arithmetic_mod.htm#BOOST_PP_MOD">BOOST_PP_MOD</a>
  <dd><a href="arithmetic_mul.htm#BOOST_PP_MUL">BOOST_PP_MUL</a>
  <dd><a href="logical_nor.htm#BOOST_PP_NOR">BOOST_PP_NOR</a>
  <dd><a href="logical_not.htm#BOOST_PP_NOT">BOOST_PP_NOT</a>
  <dd><a href="comparison_not_equal.htm#BOOST_PP_NOT_EQUAL">BOOST_PP_NOT_EQUAL</a>
  <dd><a href="logical_or.htm#BOOST_PP_OR">BOOST_PP_OR</a>
  <dd><a href="repeat.htm#BOOST_PP_REPEAT">BOOST_PP_REPEAT</a>
  <dd><a href="repeat_2nd.htm#BOOST_PP_REPEAT_2ND">BOOST_PP_REPEAT_2ND</a>
  <dd><a href="repeat_3rd.htm#BOOST_PP_REPEAT_3RD">BOOST_PP_REPEAT_3RD</a>
  <dd><a href="stringize.htm#BOOST_PP_STRINGIZE">BOOST_PP_STRINGIZE</a>
  <dd><a href="arithmetic_sub.htm#BOOST_PP_SUB">BOOST_PP_SUB</a>
  <dd><a href="tuple_eat.htm#BOOST_PP_TUPLE_EAT">BOOST_PP_TUPLE_EAT</a>
  <dd><a href="tuple_elem.htm#BOOST_PP_TUPLE_ELEM">BOOST_PP_TUPLE_ELEM</a>
  <dd><a href="tuple_to_list.htm#BOOST_PP_TUPLE_TO_LIST">BOOST_PP_TUPLE_TO_LIST</a>
  <dd><a href="while.htm#BOOST_PP_WHILE">BOOST_PP_WHILE</a>
  <dd><a href="logical_xor.htm#BOOST_PP_XOR">BOOST_PP_XOR</a>
  <dd><a href="arithmetic_add.htm#BOOST_PREPROCESSOR_ADD">BOOST_PREPROCESSOR_ADD</a>
  <dd><a href="logical_and.htm#BOOST_PREPROCESSOR_AND">BOOST_PREPROCESSOR_AND</a>
  <dd><a href="assert_msg.htm#BOOST_PREPROCESSOR_ASSERT_MSG">BOOST_PREPROCESSOR_ASSERT_MSG</a>
  <dd><a href="logical_bool.htm#BOOST_PREPROCESSOR_BOOL">BOOST_PREPROCESSOR_BOOL</a>
  <dd><a href="cat.htm#BOOST_PREPROCESSOR_CAT">BOOST_PREPROCESSOR_CAT</a>
  <dd><a href="comma.htm#BOOST_PREPROCESSOR_COMMA">BOOST_PREPROCESSOR_COMMA</a>
  <dd><a href="comma_if.htm#BOOST_PREPROCESSOR_COMMA_IF">BOOST_PREPROCESSOR_COMMA_IF</a>
  <dd><a href="dec.htm#BOOST_PREPROCESSOR_DEC">BOOST_PREPROCESSOR_DEC</a>
  <dd><a href="arithmetic_div.htm#BOOST_PREPROCESSOR_DIV">BOOST_PREPROCESSOR_DIV</a>
  <dd><a href="empty.htm#BOOST_PREPROCESSOR_EMPTY">BOOST_PREPROCESSOR_EMPTY</a>
  <dd><a href="enum_params.htm#BOOST_PREPROCESSOR_ENUM_PARAMS">BOOST_PREPROCESSOR_ENUM_PARAMS</a>
  <dd><a href="enum_params_with_a_default.htm#BOOST_PREPROCESSOR_ENUM_PARAMS_WITH_A_DEFAULT">BOOST_PREPROCESSOR_ENUM_PARAMS_WITH_A_DEFAULT</a>
  <dd><a href="enum_params_with_defaults.htm#BOOST_PREPROCESSOR_ENUM_PARAMS_WITH_DEFAULTS">BOOST_PREPROCESSOR_ENUM_PARAMS_WITH_DEFAULTS</a>
  <dd><a href="enum_shifted_params.htm#BOOST_PREPROCESSOR_ENUM_SHIFTED_PARAMS">BOOST_PREPROCESSOR_ENUM_SHIFTED_PARAMS</a>
  <dd><a href="comparison_equal.htm#BOOST_PREPROCESSOR_EQUAL">BOOST_PREPROCESSOR_EQUAL</a>
  <dd><a href="comparison_greater.htm#BOOST_PREPROCESSOR_GREATER">BOOST_PREPROCESSOR_GREATER</a>
  <dd><a href="comparison_greater_equal.htm#BOOST_PREPROCESSOR_GREATER_EQUAL">BOOST_PREPROCESSOR_GREATER_EQUAL</a>
  <dd><a href="identity.htm#BOOST_PREPROCESSOR_IDENTITY">BOOST_PREPROCESSOR_IDENTITY</a>
  <dd><a href="if.htm#BOOST_PREPROCESSOR_IF">BOOST_PREPROCESSOR_IF</a>
  <dd><a href="inc.htm#BOOST_PREPROCESSOR_INC">BOOST_PREPROCESSOR_INC</a>
  <dd><a href="comparison_less.htm#BOOST_PREPROCESSOR_LESS">BOOST_PREPROCESSOR_LESS</a>
  <dd><a href="comparison_less_equal.htm#BOOST_PREPROCESSOR_LESS_EQUAL">BOOST_PREPROCESSOR_LESS_EQUAL</a>
  <dd><a href="limits.htm#BOOST_PREPROCESSOR_LIMIT_DIM">BOOST_PREPROCESSOR_LIMIT_DIM</a>
  <dd><a href="limits.htm#BOOST_PREPROCESSOR_LIMIT_MAG">BOOST_PREPROCESSOR_LIMIT_MAG</a>
  <dd><a href="limits.htm#BOOST_PREPROCESSOR_LIMIT_TUPLE">BOOST_PREPROCESSOR_LIMIT_TUPLE</a>
  <dd><a href="max.htm#BOOST_PREPROCESSOR_MAX">BOOST_PREPROCESSOR_MAX</a>
  <dd><a href="min.htm#BOOST_PREPROCESSOR_MIN">BOOST_PREPROCESSOR_MIN</a>
  <dd><a href="arithmetic_mod.htm#BOOST_PREPROCESSOR_MOD">BOOST_PREPROCESSOR_MOD</a>
  <dd><a href="arithmetic_mul.htm#BOOST_PREPROCESSOR_MUL">BOOST_PREPROCESSOR_MUL</a>
  <dd><a href="logical_nor.htm#BOOST_PREPROCESSOR_NOR">BOOST_PREPROCESSOR_NOR</a>
  <dd><a href="logical_not.htm#BOOST_PREPROCESSOR_NOT">BOOST_PREPROCESSOR_NOT</a>
  <dd><a href="comparison_not_equal.htm#BOOST_PREPROCESSOR_NOT_EQUAL">BOOST_PREPROCESSOR_NOT_EQUAL</a>
  <dd><a href="logical_or.htm#BOOST_PREPROCESSOR_OR">BOOST_PREPROCESSOR_OR</a>
  <dd><a href="repeat.htm#BOOST_PREPROCESSOR_REPEAT">BOOST_PREPROCESSOR_REPEAT</a>
  <dd><a href="repeat_2nd.htm#BOOST_PREPROCESSOR_REPEAT_2ND">BOOST_PREPROCESSOR_REPEAT_2ND</a>
  <dd><a href="repeat_3rd.htm#BOOST_PREPROCESSOR_REPEAT_3RD">BOOST_PREPROCESSOR_REPEAT_3RD</a>
  <dd><a href="stringize.htm#BOOST_PREPROCESSOR_STRINGIZE">BOOST_PREPROCESSOR_STRINGIZE</a>
  <dd><a href="arithmetic_sub.htm#BOOST_PREPROCESSOR_SUB">BOOST_PREPROCESSOR_SUB</a>
  <dd><a href="tuple_elem.htm#BOOST_PREPROCESSOR_TUPLE_ELEM">BOOST_PREPROCESSOR_TUPLE_ELEM</a>
  <dd><a href="logical_xor.htm#BOOST_PREPROCESSOR_XOR">BOOST_PREPROCESSOR_XOR</a>
</dl>

<hr>

<p>(C) Copyright Housemarque Oy 2002</p>

<p>Permission to copy, use, modify, sell and distribute this document is granted
provided this copyright notice appears in all copies. This document is provided
"as is" without express or implied warranty, and with no claim as to its suitability
for any purpose.</p>

<p>Generated: <!--webbot bot="Timestamp" s-type="EDITED" s-format="%d %b %Y" startspan --><!--webbot bot="Timestamp" endspan i-checksum="15246" --></p>

</BODY></HTML>
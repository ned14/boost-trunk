<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Boost.Preprocessor - Bibliography</title>
</head>
<body bgcolor="#FFFFFF" link="#0000ff" vlink="#800080">
<table border="0" cellpadding="7" cellspacing="0" width="100%" summary=
    "header">
  <tr> 
    <td valign="top" width="300"> 
      <h3><a href="../../../index.htm"><img height="86" width="277" alt="C++ Boost" src="../../../c++boost.gif" border="0"></a></h3>
    </td>
    <td valign="top"> 
      <h1 align="center">Boost.Preprocessor</h1>
      <h2 align="center">Examples</h2>
    </td>
  </tr>
</table>

<hr>

<table>
  <tr><td><a href="../example/array_arithmetic.c">array_arithmetic.c</a></td><td>This example implements over 2200 functions for 1-dimensional arithmetic
array manipulation in C. The idea is to use preprocessor data structures,
lists and tuples, for storing metainformation to be used for generating
the actual C code.</td></tr>
  <tr>
    <td><a href="../example/catch_builtin.cpp">catch_builtin.cpp</a></td>
    <td>This example demonstrates the usage of lists and BOOST_PP_LIST_FOR_EACH().</td>
  </tr>
  <tr>
    <td><a href="../example/count_down.c">count_down.c</a></td>
    <td> This is a trivial example of using BOOST_PP_WHILE() that simply counts 
      down from N to 0 ultimately expanding to a 0.</td>
  </tr>
  <tr>
    <td><a href="../example/delay.c">delay.c</a></td>
    <td>This example implements a macro whose expansion takes exponential amount 
      of time.</td>
  </tr>
  <tr>
    <td><a href="../example/duffs_device.c">duffs_device.c</a></td>
    <td>This example uses the preprocessor library to implement a generalized 
      macro for implementing a Duff's Device.</td>
  </tr>
  <tr>
    <td><a href="../example/is_integral.cpp">is_integral.cpp</a></td>
    <td>This example demonstrates the usage of preprocessor lists for generating 
      C++ code.</td>
  </tr>
  <tr>
    <td><a href="../example/linear_fib.c">linear_fib.c</a></td>
    <td>This example shows how BOOST_PP_WHILE() can be used for implementing macros.</td>
  </tr>
  <tr>
    <td><a href="../example/note.c">note.c</a></td>
    <td>This example shows how BOOST_PP_STRINGIZE() can be used to allow macro 
      expansion before stringization.</td>
  </tr>
  <tr>
    <td><a href="../example/repeat_2d.c">repeat_2d.c</a></td>
    <td>This example implements a generalized macro for 2D repetition using the 
      simple repetition primitives of the preprocessor library.</td>
  </tr>
  <tr>
    <td><a href="../example/static_assert.c">static_assert.c</a></td>
    <td>This example shows how BOOST_PP_CAT() can be used to allow macro expansion 
      before token concatenation.</td>
  </tr>
  <tr>
    <td><a href="../example/subscript_layer.cpp">subscript_layer.cpp</a></td>
    <td>This example shows how BOOST_PP_EMPTY can be used as an unused or empty 
      parameter.</td>
  </tr>
</table>

<hr>

<p>Revised 
  <!--webbot bot="Timestamp" S-Type="EDITED" S-Format="%d %B, %Y" startspan -->
  <!--webbot bot="Timestamp" endspan i-checksum="39359" -->
</p>
<p><i>&copy; Copyright <a href="http://www.housemarque.com">Housemarque Oy</a> 2002</i></p>

<p><i>Permission to copy, use, modify, sell and distribute this document is granted
provided this copyright notice appears in all copies. This document is provided
"as is" without express or implied warranty, and with no claim as to its suitability
for any purpose.</i></p>
</body>
</html>

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta http-equiv="Content-Type" content=
"text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<title>Vector</title>
</head>
<body bgcolor="#ffffff">
<h1><img src="c++boost.gif" alt="c++boost.gif" align="Center">
Vector</h1>

<h2><a name="vector"></a> Vector</h2>

<h4>Description</h4>

<p>The templated class <code>vector&lt;T, A&gt;</code> is the base
container adaptor for dense vectors. For a <em>n</em>-dimensional
vector and <em>0 &lt;= i &lt; n</em> every element
<em>v</em><sub><em>i</em></sub> is mapped to the <em>i-</em>th
element of the container.</p>

<h4>Example</h4>

<pre>
#include &lt;boost/numeric/ublas/vector.hpp&gt;<br>
#include &lt;boost/numeric/ublas/io.hpp&gt;<br>
<br>
int main () {<br>
    using namespace boost::numeric::ublas;<br>
    vector&lt;double&gt; v (3);<br>
    for (unsigned i = 0; i &lt; v.size (); ++ i)<br>
        v (i) = i;<br>
    std::cout &lt;&lt; v &lt;&lt; std::endl;<br>
}<br>
</pre>

<h4>Definition</h4>

<p>Defined in the header vector.hpp.</p>

<h4>Template parameters</h4>

<table border="1">
<tbody>
<tr>
<th>Parameter</th>
<th>Description</th>
<th>Default</th>
</tr>

<tr>
<td><code>T</code> </td>
<td>The type of object stored in the vector.</td>
<td>&nbsp;</td>
</tr>

<tr>
<td><code>A</code></td>
<td>The type of the adapted array. <a href="#vector_1">[1]</a>
</td>
<td><code>unbounded_array&lt;T&gt;</code></td>
</tr>
</tbody>
</table>

<h4>Model of</h4>

<p><a href="container.htm#vector">Vector</a> .</p>

<h4>Type requirements</h4>

<p>None, except for those imposed by the requirements of <a href=
"container.htm#vector">Vector</a> .</p>

<h4>Public base classes</h4>

<p><code>vector_expression&lt;vector&lt;T, A&gt; &gt;</code></p>

<h4>Members</h4>

<table border="1">
<tbody>
<tr>
<th>Member</th>
<th>Description</th>
</tr>

<tr>
<td><code>vector ()</code> </td>
<td>Allocates an uninitialized <code>vector</code> that holds zero
elements.</td>
</tr>

<tr>
<td><code>vector (size_type size)</code></td>
<td>Allocates an uninitialized <code>vector</code> that holds
<code>size</code> elements.</td>
</tr>

<tr>
<td><code>vector (const vector &amp;v)</code></td>
<td>The copy constructor.</td>
</tr>

<tr>
<td><code>template&lt;class AE&gt;<br>
 vector (const vector_expression&lt;AE&gt; &amp;ae)</code></td>
<td>The extended copy constructor.</td>
</tr>

<tr>
<td><code>void resize (size_type size)</code></td>
<td>Reallocates a <code>vector</code> to hold <code>size</code>
elements. The content of the <code>vector</code> is not
preserved.</td>
</tr>

<tr>
<td><code>size_type size () const</code></td>
<td>Returns the size of the <code>vector</code>.</td>
</tr>

<tr>
<td><code>const_reference operator () (size_type i)
const</code></td>
<td>Returns a <code>const</code> reference of the <code>i</code>
-th element.</td>
</tr>

<tr>
<td><code>reference operator () (size_type i)</code></td>
<td>Returns a reference of the <code>i</code>-th element.</td>
</tr>

<tr>
<td><code>const_reference operator [] (size_type i)
const</code></td>
<td>Returns a <code>const</code> reference of the <code>i</code>
-th element.</td>
</tr>

<tr>
<td><code>reference operator [] (size_type i)</code></td>
<td>Returns a reference of the <code>i</code>-th element.</td>
</tr>

<tr>
<td><code>vector &amp;operator = (const vector &amp;v)</code></td>
<td>The assignment operator.</td>
</tr>

<tr>
<td><code>vector &amp;assign_temporary (vector &amp;v)</code></td>
<td>Assigns a temporary. May change the vector <code>v</code>.</td>
</tr>

<tr>
<td><code>template&lt;class AE&gt;<br>
 vector &amp;operator = (const vector_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>The extended assignment operator.</td>
</tr>

<tr>
<td><code>template&lt;class AE&gt;<br>
 vector &amp;assign (const vector_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>Assigns a vector expression to the vector. Left and right hand
side of the assignment should be independent.</td>
</tr>

<tr>
<td><code>template&lt;class AE&gt;<br>
 vector &amp;operator += (const vector_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>A computed assignment operator. Adds the vector expression to
the vector.</td>
</tr>

<tr>
<td><code>template&lt;class AE&gt;<br>
 vector &amp;plus_assign (const vector_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>Adds a vector expression to the vector. Left and right hand
side of the assignment should be independent.</td>
</tr>

<tr>
<td><code>template&lt;class AE&gt;<br>
 vector &amp;operator -= (const vector_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>A computed assignment operator. Subtracts the vector expression
from the vector.</td>
</tr>

<tr>
<td><code>template&lt;class AE&gt;<br>
 vector &amp;minus_assign (const vector_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>Subtracts a vector expression from the vector. Left and right
hand side of the assignment should be independent.</td>
</tr>

<tr>
<td><code>template&lt;class AT&gt;<br>
 vector &amp;operator *= (const AT &amp;at)</code></td>
<td>A computed assignment operator. Multiplies the vector with a
scalar.</td>
</tr>

<tr>
<td><code>template&lt;class AT&gt;<br>
 vector &amp;operator /= (const AT &amp;at)</code></td>
<td>A computed assignment operator. Divides the vector through a
scalar.</td>
</tr>

<tr>
<td><code>void swap (vector &amp;v)</code></td>
<td>Swaps the contents of the vectors.</td>
</tr>

<tr>
<td><code>void insert (size_type i, const_reference t)</code></td>
<td>Inserts the value <code>t</code> at the <code>i</code>-th
element.</td>
</tr>

<tr>
<td><code>void erase (size_type i)</code></td>
<td>Erases the value at the <code>i</code>-th element.</td>
</tr>

<tr>
<td><code>void clear ()</code></td>
<td>Clears the vector.</td>
</tr>

<tr>
<td><code>const_iterator begin () const</code></td>
<td>Returns a <code>const_iterator</code> pointing to the beginning
of the <code>vector</code>.</td>
</tr>

<tr>
<td><code>const_iterator end () const</code></td>
<td>Returns a <code>const_iterator</code> pointing to the end of
the <code>vector</code>.</td>
</tr>

<tr>
<td><code>iterator begin ()</code> </td>
<td>Returns a <code>iterator</code> pointing to the beginning of
the <code>vector</code>.</td>
</tr>

<tr>
<td><code>iterator end ()</code> </td>
<td>Returns a <code>iterator</code> pointing to the end of the
<code>vector</code>.</td>
</tr>

<tr>
<td><code>const_reverse_iterator rbegin () const</code></td>
<td>Returns a <code>const_reverse_iterator</code> pointing to the
beginning of the reversed <code>vector</code>.</td>
</tr>

<tr>
<td><code>const_reverse_iterator rend () const</code></td>
<td>Returns a <code>const_reverse_iterator</code> pointing to the
end of the reversed <code>vector</code>.</td>
</tr>

<tr>
<td><code>reverse_iterator rbegin ()</code> </td>
<td>Returns a <code>reverse_iterator</code> pointing to the
beginning of the reversed <code>vector</code>.</td>
</tr>

<tr>
<td><code>reverse_iterator rend ()</code> </td>
<td>Returns a <code>reverse_iterator</code> pointing to the end of
the reversed <code>vector</code>.</td>
</tr>
</tbody>
</table>

<h4>Notes</h4>

<p><a name="#vector_1">[1]</a> Supported parameters for the adapted
array are <code>unbounded_array&lt;T&gt;</code> ,
<code>bounded_array&lt;T&gt;</code> and
<code>std::vector&lt;T&gt;</code> .</p>

<h2><a name="unit_vector"></a> Unit Vector</h2>

<h4>Description</h4>

<p>The templated class <code>unit_vector&lt;T&gt;</code> represents
canonical unit vectors. For the <em>k</em>-th
<em>n</em>-dimensional canonical unit vector and <em>0 &lt;= i &lt;
n</em> holds <em>u</em><sup><em>k</em></sup><sub><em>i</em></sub>
<em>= 0</em>, if <em>i &lt;&gt; k</em>, and
<em>u</em><sup><em>k</em></sup><sub><em>i</em></sub> <em>=
1</em>.</p>

<h4>Example</h4>

<pre>
#include &lt;boost/numeric/ublas/vector.hpp&gt;<br>
#include &lt;boost/numeric/ublas/io.hpp&gt;<br>
<br>
int main () {<br>
    using namespace boost::numeric::ublas;<br>
    for (int i = 0; i &lt; 3; ++ i) {<br>
        unit_vector&lt;double&gt; v (3, i);<br>
        std::cout &lt;&lt; v &lt;&lt; std::endl;<br>
    }<br>
}<br>
</pre>

<h4>Definition</h4>

<p>Defined in the header vector.hpp.</p>

<h4>Template parameters</h4>

<table border="1">
<tbody>
<tr>
<th>Parameter</th>
<th>Description</th>
<th>Default</th>
</tr>

<tr>
<td><code>T</code> </td>
<td>The type of object stored in the vector.</td>
<td>&nbsp;</td>
</tr>
</tbody>
</table>

<h4>Model of</h4>

<p><a href="expression.htm#vector_expression">Vector Expression</a>
.</p>

<h4>Type requirements</h4>

<p>None, except for those imposed by the requirements of <a href=
"expression.htm#vector_expression">Vector Expression</a> .</p>

<h4>Public base classes</h4>

<p><code>vector_expression&lt;unit_vector&lt;T&gt; &gt;</code></p>

<h4>Members</h4>

<table border="1">
<tbody>
<tr>
<th>Member</th>
<th>Description</th>
</tr>

<tr>
<td><code>unit_vector ()</code> </td>
<td>Constructs an <code>unit_vector</code> that holds zero
elements.</td>
</tr>

<tr>
<td><code>unit_vector (size_type size, size_type index)</code></td>
<td>Constructs the <code>index</code>-th <code>unit_vector</code>
that holds <code>size</code> elements.</td>
</tr>

<tr>
<td><code>unit_vector (const unit_vector &amp;v)</code></td>
<td>The copy constructor.</td>
</tr>

<tr>
<td><code>void resize (size_type size)</code></td>
<td>Resizes a <code>unit_vector</code> to hold <code>size</code>
elements.</td>
</tr>

<tr>
<td><code>size_type size () const</code></td>
<td>Returns the size of the <code>unit_vector</code>.</td>
</tr>

<tr>
<td><code>size_type index () const</code></td>
<td>Returns the index of the <code>unit_vector</code>.</td>
</tr>

<tr>
<td><code>const_reference operator () (size_type i)
const</code></td>
<td>Returns the value of the <code>i</code>-th element.</td>
</tr>

<tr>
<td><code>const_reference operator [] (size_type i)
const</code></td>
<td>Returns the value of the <code>i</code>-th element.</td>
</tr>

<tr>
<td><code>unit_vector &amp;operator = (const unit_vector
&amp;v)</code></td>
<td>The assignment operator.</td>
</tr>

<tr>
<td><code>unit_vector &amp;assign_temporary (unit_vector
&amp;v)</code></td>
<td>Assigns a temporary. May change the unit vector <code>v</code>
.</td>
</tr>

<tr>
<td><code>void swap (unit_vector &amp;v)</code></td>
<td>Swaps the contents of the unit vectors.</td>
</tr>

<tr>
<td><code>const_iterator begin () const</code></td>
<td>Returns a <code>const_iterator</code> pointing to the beginning
of the <code>unit_vector</code>.</td>
</tr>

<tr>
<td><code>const_iterator end () const</code></td>
<td>Returns a <code>const_iterator</code> pointing to the end of
the <code>unit_vector</code>.</td>
</tr>

<tr>
<td><code>const_reverse_iterator rbegin () const</code></td>
<td>Returns a <code>const_reverse_iterator</code> pointing to the
beginning of the reversed <code>unit_vector</code>.</td>
</tr>

<tr>
<td><code>const_reverse_iterator rend () const</code></td>
<td>Returns a <code>const_reverse_iterator</code> pointing to the
end of the reversed <code>unit_vector</code>.</td>
</tr>
</tbody>
</table>

<h2><a name="zero_vector"></a> Zero Vector</h2>

<h4>Description</h4>

<p>The templated class <code>zero_vector&lt;T&gt;</code> represents
zero vectors. For a <em>n</em>-dimensional zero vector and <em>0
&lt;= i &lt; n</em> holds <em>z</em><sub><em>i</em></sub> <em>=
0</em>.</p>

<h4>Example</h4>

<pre>
#include &lt;boost/numeric/ublas/vector.hpp&gt;<br>
#include &lt;boost/numeric/ublas/io.hpp&gt;<br>
<br>
int main () {<br>
    using namespace boost::numeric::ublas;<br>
    zero_vector&lt;double&gt; v (3);<br>
    std::cout &lt;&lt; v &lt;&lt; std::endl;<br>
}<br>
</pre>

<h4>Definition</h4>

<p>Defined in the header vector.hpp.</p>

<h4>Template parameters</h4>

<table border="1">
<tbody>
<tr>
<th>Parameter</th>
<th>Description</th>
<th>Default</th>
</tr>

<tr>
<td><code>T</code> </td>
<td>The type of object stored in the vector.</td>
<td>&nbsp;</td>
</tr>
</tbody>
</table>

<h4>Model of</h4>

<p><a href="expression.htm#vector_expression">Vector Expression</a>
.</p>

<h4>Type requirements</h4>

<p>None, except for those imposed by the requirements of <a href=
"expression.htm#vector_expression">Vector Expression</a> .</p>

<h4>Public base classes</h4>

<p><code>vector_expression&lt;zero_vector&lt;T&gt; &gt;</code></p>

<h4>Members</h4>

<table border="1">
<tbody>
<tr>
<th>Member</th>
<th>Description</th>
</tr>

<tr>
<td><code>zero_vector ()</code> </td>
<td>Constructs a <code>zero_vector</code> that holds zero
elements.</td>
</tr>

<tr>
<td><code>zero_vector (size_type size)</code></td>
<td>Constructs a <code>zero_vector</code> that holds
<code>size</code> elements.</td>
</tr>

<tr>
<td><code>zero_vector (const zero_vector &amp;v)</code></td>
<td>The copy constructor.</td>
</tr>

<tr>
<td><code>void resize (size_type size)</code></td>
<td>Resizes a <code>zero_vector</code> to hold <code>size</code>
elements.</td>
</tr>

<tr>
<td><code>size_type size () const</code></td>
<td>Returns the size of the <code>zero_vector</code>.</td>
</tr>

<tr>
<td><code>const_reference operator () (size_type i)
const</code></td>
<td>Returns the value of the <code>i</code>-th element.</td>
</tr>

<tr>
<td><code>const_reference operator [] (size_type i)
const</code></td>
<td>Returns the value of the <code>i</code>-th element.</td>
</tr>

<tr>
<td><code>zero_vector &amp;operator = (const zero_vector
&amp;v)</code></td>
<td>The assignment operator.</td>
</tr>

<tr>
<td><code>zero_vector &amp;assign_temporary (zero_vector
&amp;v)</code></td>
<td>Assigns a temporary. May change the zero vector <code>v</code>
.</td>
</tr>

<tr>
<td><code>void swap (zero_vector &amp;v)</code></td>
<td>Swaps the contents of the zero vectors.</td>
</tr>

<tr>
<td><code>const_iterator begin () const</code></td>
<td>Returns a <code>const_iterator</code> pointing to the beginning
of the <code>zero_vector</code>.</td>
</tr>

<tr>
<td><code>const_iterator end () const</code></td>
<td>Returns a <code>const_iterator</code> pointing to the end of
the <code>zero_vector</code>.</td>
</tr>

<tr>
<td><code>const_reverse_iterator rbegin () const</code></td>
<td>Returns a <code>const_reverse_iterator</code> pointing to the
beginning of the reversed <code>zero_vector</code>.</td>
</tr>

<tr>
<td><code>const_reverse_iterator rend () const</code></td>
<td>Returns a <code>const_reverse_iterator</code> pointing to the
end of the reversed <code>zero_vector</code>.</td>
</tr>
</tbody>
</table>

<hr>
<p>Copyright (&copy;) 2000-2002 Joerg Walter, Mathias Koch<br>
 Permission to copy, use, modify, sell and distribute this document
is granted provided this copyright notice appears in all copies.
This document is provided ``as is'' without express or implied
warranty, and with no claim as to its suitability for any
purpose.</p>

<p>Last revised: 1/15/2003</p>
</body>
</html>


<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<title>Sparse Storage</title>
</head>

<body bgcolor="#FFFFFF">

<h1><img src="c++boost.gif" alt="c++boost.gif" align="center">Sparse Storage</h1>

<h2><a name="map_array"></a>Map Array</h2>

<h4>Description</h4>

<p>The templated class <code>map_array&lt;I, T&gt; </code>implements
a simple std::map-like associative container as a sorted array.</p>

<h4>Example</h4>

<pre>int main () {
    using namespace boost::numeric::ublas;
    map_array&lt;int, double&gt; a (3);
    for (int i = 0; i &lt; a.size (); ++ i) {
        a [i] = i;
        std::cout &lt;&lt; a [i] &lt;&lt; std::endl;
    }
}</pre>

<h4>Definition</h4>

<p>Defined in the header storage_sparse.hpp.</p>

<h4>Template parameters</h4>

<table border="1">
    <tr>
        <th>Parameter </th>
        <th>Description </th>
        <th>Default </th>
    </tr>
    <tr>
        <td><code>I</code></td>
        <td>The type of index stored in the array.</td>
        <td>&nbsp;</td>
    </tr>
    <tr>
        <td><code>T</code> </td>
        <td>The type of object stored in the array. </td>
        <td>&nbsp;</td>
    </tr>
</table>

<h4>Model of</h4>

<p>Reversible Container. </p>

<h4>Type requirements</h4>

<p>None, except for those imposed by the requirements of
Reversible Container.</p>

<h4>Public base classes</h4>

<p>None. </p>

<h4>Members</h4>

<table border="1">
    <tr>
        <th>Member </th>
        <th>Description </th>
    </tr>
    <tr>
        <td><code>map_array ()</code> </td>
        <td>Allocates a <code>map_array </code>that holds
        at most zero elements.</td>
    </tr>
    <tr>
        <td><code>map_array (size_type size)</code></td>
        <td>Allocates a <code>map_array </code>that holds
        at most <code>size</code> elements.</td>
    </tr>
    <tr>
        <td><code>map_array (const map_array
        &amp;a)</code></td>
        <td>The copy constructor.</td>
    </tr>
    <tr>
        <td><code>~map_array ()</code></td>
        <td>Deallocates the <code>map_array </code>itself.
        </td>
    </tr>
    <tr>
        <td><code>void resize (size_type size)</code></td>
        <td>Reallocates a <code>map_array </code>to hold
        at most <code>size</code> elements. The content of the <code>map_array
        </code>is preserved.</td>
    </tr>
    <tr>
        <td><code>size_type size () const</code></td>
        <td>Returns the size of the <code>map_array</code>.
        </td>
    </tr>
    <tr>
        <td><code>data_reference operator [] (index_type i)</code></td>
        <td>Returns a reference of the element that is associated
        with a particular index. If the <code>map_array</code>
        does not already contain such an element, <code>operator[]</code>
        inserts the default<code> T ()</code>.</td>
    </tr>
    <tr>
        <td><code>map_array &amp;operator = (const
        map_array &amp;a)</code></td>
        <td>The assignment operator.</td>
    </tr>
    <tr>
        <td><code>map_array &amp;assign_temporary
        (map_array &amp;a)</code></td>
        <td>Assigns a temporary. May change the array <code>a</code>.</td>
    </tr>
    <tr>
        <td><code>void swap (map_array &amp;a)</code></td>
        <td>Swaps the contents of the arrays. </td>
    </tr>
    <tr>
        <td><code>pointer insert (pointer it, const
        value_type &amp;p)</code></td>
        <td>Inserts <code>p</code> into the array, using <code>it</code>
        as a hint to where it will be inserted. </td>
    </tr>
    <tr>
        <td><code>void erase (pointer it)</code></td>
        <td>Erases the value at <code>it</code>.</td>
    </tr>
    <tr>
        <td><code>void clear ()</code></td>
        <td>Clears the array. </td>
    </tr>
    <tr>
        <td><code>const_pointer find (index_type i) const</code></td>
        <td>Finds an element whose index is <code>i</code>. </td>
    </tr>
    <tr>
        <td><code>pointer find (index_type i)</code></td>
        <td>Finds an element whose index is <code>i</code>. </td>
    </tr>
    <tr>
        <td><code>const_pointer lower_bound (index_type i)
        const</code></td>
        <td>Finds the first element whose index is not less than <code>i</code>.</td>
    </tr>
    <tr>
        <td><code>pointer lower_bound (index_type i)</code></td>
        <td>Finds the first element whose index is not less than <code>i</code>.
        </td>
    </tr>
    <tr>
        <td><code>const_pointer upper_bound (index_type i)
        const</code></td>
        <td>Finds the first element whose index is greater than <code>i</code>.
        </td>
    </tr>
    <tr>
        <td><code>pointer upper_bound (index_type i)</code></td>
        <td>Finds the first element whose index is greater than <code>i</code>.
        </td>
    </tr>
    <tr>
        <td><code>const_iterator begin () const</code></td>
        <td>Returns a <code>const_iterator</code> pointing to the
        beginning of the <code>map_array</code>. </td>
    </tr>
    <tr>
        <td><code>const_iterator end () const</code></td>
        <td>Returns a <code>const_iterator</code> pointing to the
        end of the <code>map_array</code>. </td>
    </tr>
    <tr>
        <td><code>iterator begin () </code></td>
        <td>Returns a <code>iterator</code> pointing to the
        beginning of the <code>map_array</code>. </td>
    </tr>
    <tr>
        <td><code>iterator end () </code></td>
        <td>Returns a <code>iterator</code> pointing to the end
        of the <code>map_array</code>. </td>
    </tr>
    <tr>
        <td><code>const_reverse_iterator rbegin () const</code></td>
        <td>Returns a <code>const_reverse_iterator</code>
        pointing to the beginning of the reversed <code>map_array</code>.
        </td>
    </tr>
    <tr>
        <td><code>const_reverse_iterator rend () const</code></td>
        <td>Returns a <code>const_reverse_iterator</code>
        pointing to the end of the reversed <code>map_array</code>.
        </td>
    </tr>
    <tr>
        <td><code>reverse_iterator rbegin () </code></td>
        <td>Returns a <code>reverse_iterator</code> pointing to
        the beginning of the reversed <code>map_array</code>.
        </td>
    </tr>
    <tr>
        <td><code>reverse_iterator rend () </code></td>
        <td>Returns a <code>reverse_iterator</code> pointing to
        the end of the reversed <code>map_array</code>. </td>
    </tr>
</table>

<h4>Interface</h4>

<pre><code>    // Map array 
    template&lt;class I, class T&gt;
    class map_array {
    public:      
        typedef std::size_t size_type;
        typedef std::ptrdiff_t difference_type;
        typedef I index_type;
        typedef T data_value_type;
        typedef const T &amp;data_const_reference;
        typedef T &amp;data_reference;
        typedef std::pair&lt;I, T&gt; value_type;
        typedef const std::pair&lt;I, T&gt; &amp;const_reference;
        typedef std::pair&lt;I, T&gt; &amp;reference;
        typedef const std::pair&lt;I, T&gt; *const_pointer;
        typedef std::pair&lt;I, T&gt; *pointer;

        // Construction and destruction
        map_array ();
        map_array (size_type size);
        map_array (const map_array &amp;a);
        ~map_array ();

        // Resizing
        void resize (size_type size);

        size_type size () const;

        // Element access
        data_reference operator [] (index_type i);

        // Assignment
        map_array &amp;operator = (const map_array &amp;a);
        map_array &amp;assign_temporary (map_array &amp;a);

        // Swapping
        void swap (map_array &amp;a);
        friend void swap (map_array &amp;a1, map_array &amp;a2);

        // Element insertion and deletion
        pointer insert (pointer it, const value_type &amp;p);
        void insert (pointer it, pointer it1, pointer it2);
        void erase (pointer it);
        void erase (pointer it1, pointer it2);
        void clear ();

        // Element lookup
        const_pointer find (index_type i) const;
        pointer find (index_type i);
        const_pointer lower_bound (index_type i) const;
        pointer lower_bound (index_type i);
        const_pointer upper_bound (index_type i) const;
        pointer upper_bound (index_type i);

        // Iterators simply are pointers.

        typedef const_pointer const_iterator;

        const_iterator begin () const;
        const_iterator end () const;

        typedef pointer iterator;

        iterator begin ();
        iterator end ();

        // Reverse iterators

        typedef std::reverse_iterator&lt;const_iterator&gt; const_reverse_iterator;

        const_reverse_iterator rbegin () const;
        const_reverse_iterator rend () const;

        typedef std::reverse_iterator&lt;iterator&gt; reverse_iterator;

        reverse_iterator rbegin ();
        reverse_iterator rend ();
    };

    template&lt;class I, class T&gt;
    map_array&lt;I, T&gt; &amp;assign_temporary (map_array&lt;I, T&gt; &amp;a1, map_array&lt;I, T&gt; &amp;a2);</code></pre>

<hr>

<p>Copyright (©) 2000-2002 Joerg Walter, Mathias Koch <br> 
Permission to copy, use, modify, sell and distribute this document is granted 
provided this copyright notice appears in all copies. This document is provided 
``as is'' without express or implied warranty, and with no claim as to its suitability 
for any purpose.</p>

<p>Last revised: 8/3/2002</p>

</body>
</html>

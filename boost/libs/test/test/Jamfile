#  (C) Copyright Gennadiy Rozental 2001-2003.
#  Use, modification, and distribution are subject to the 
#  Boost Software License, Version 1.0. (See accompanying file 
#  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#
#  See http://www.boost.org/libs/test for the library home page.

subproject libs/test/test ;

# bring in the rules for testing
import testing ;

# Make tests run by default.
DEPENDS all : test ;

local test-dir = "$(BOOST_ROOT)$(SLASH)libs$(SLASH)test$(SLASH)test$(SLASH)" ;

rule test-btl-lib ( test-rule : test-name : lib-name ? : pattern_file * : source_files * )
{
   source_files ?= $(test-name).cpp ;

   return [ $(test-rule) $(source_files) <lib>../build/$(lib-name)
            : #args
            : $(pattern_file)
            : <stlport-iostream>on <borland><*><cxxflags>-w-8080 
              <define>BOOST_TEST_NO_AUTO_LINK=1 # requirements
            : $(test-name)
          ] ;
}

test-suite "basics_test"
        :
          [ test-btl-lib run : class_properties_test    : boost_unit_test_framework ]
          [ test-btl-lib run : basic_cstring_test    : boost_unit_test_framework ]
        ;

test-suite "prg_exec_monitor_test"
        : [ test-btl-lib run-fail : prg_exec_fail1 : boost_prg_exec_monitor ]
          [ test-btl-lib run-fail : prg_exec_fail2 : boost_prg_exec_monitor ]
          [ test-btl-lib run-fail : prg_exec_fail3 : boost_prg_exec_monitor ]
          [ test-btl-lib run-fail : prg_exec_fail4 : boost_prg_exec_monitor ]
        ;

test-suite "test_exec_monitor_test"
        : [ test-btl-lib run-fail : test_exec_fail1 : boost_test_exec_monitor ]
          [ test-btl-lib run-fail : test_exec_fail2 : boost_test_exec_monitor ]
          [ test-btl-lib run-fail : test_exec_fail3 : boost_test_exec_monitor ]
          [ test-btl-lib run-fail : test_exec_fail4 : boost_test_exec_monitor ]
        ;

test-suite "unit_test_framework_test"
        :

# errors_handling_test has been commented out because it is in effect a Windows
# only test and no one has volunteered to get it working on other O/S's.
          [ test-btl-lib run : errors_handling_test : boost_test_exec_monitor : $(test-dir)/test_files/errors_handling_test.pattern ]
          [ test-btl-lib run : online_test ]
          [ test-btl-lib run-fail : minimal_test ]
          [ test-btl-lib run : output_test_stream_test  : boost_unit_test_framework ]
          [ test-btl-lib run : result_report_test       : boost_test_exec_monitor : $(test-dir)test_files/result_report_test.pattern ]
          [ test-btl-lib run : parameterized_test_test  : boost_test_exec_monitor ]
          [ test-btl-lib run : test_fp_comparisons      : boost_unit_test_framework ]
          [ test-btl-lib run : test_tools_test          : boost_unit_test_framework ]
          [ test-btl-lib run : auto_unit_test_test      : boost_unit_test_framework ]
          [ test-btl-lib run : auto_unit_test_test_mult : boost_unit_test_framework : : auto_unit_test_test_mult1.cpp auto_unit_test_test_mult2.cpp ]
          [ test-btl-lib run : unit_test_suite_ex_test  : boost_unit_test_framework ]
          [ test-btl-lib run : test_case_template_test  : boost_test_exec_monitor ]
          [ test-btl-lib run : custom_exception_test    : boost_unit_test_framework ]
          [ test-btl-lib run : fixed_mapping_test       : boost_unit_test_framework ]
#          [ test-btl-lib run : ifstream_line_iterator_test : boost_unit_test_framework : $(test-dir)test_files/ifstream_line_iterator.tst1 $(test-dir)test_files/ifstream_line_iterator.tst2 ]
          [ test-btl-lib run : algorithms_test : boost_unit_test_framework ]
          [ test-btl-lib run : token_iterator_test : boost_unit_test_framework ]
        ;

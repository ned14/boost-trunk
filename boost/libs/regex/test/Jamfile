# copyright John Maddock 2003

subproject libs/regex/test ;

# bring in the rules for testing
import testing ;
subinclude libs/regex/test/captures ;

R_SOURCE = 
basic_tests.cpp
main.cpp
test_alt.cpp
test_anchors.cpp
test_asserts.cpp
test_backrefs.cpp
test_deprecated.cpp
test_emacs.cpp
test_escapes.cpp
test_grep.cpp
test_locale.cpp
test_mfc.cpp
test_non_greedy_repeats.cpp
test_perl_ex.cpp
test_replace.cpp
test_sets.cpp
test_simple_repeats.cpp
test_tricky_cases.cpp
test_icu.cpp
test_unicode.cpp
test_overloads.cpp
test_operators.cpp
;

#
# test for MFC by looking inside VC++ include directories:
#
if ! $(gMFC_CHECK)
{
   gMFC_CHECK = true ;
   if $(VS71COMNTOOLS)
   {
      VS71COMNTOOLS = $(VS71COMNTOOLS:J=" ") ;
      if [ GLOB $(VS71COMNTOOLS)..\\..\\VC7\\atlmfc\\include : cstringt.h ]
      {
         ECHO MFC/ATL regex wrappers will be tested when building with VC7.1 ;
         REGEX_MFC_OPTS += "<vc-7_1><*><define>TEST_MFC=1" ;
      }
   }
   if $(VSCOMNTOOLS)
   {
      VSCOMNTOOLS = $(VSCOMNTOOLS:J=" ") ;
      if [ GLOB $(VSCOMNTOOLS)\\..\\..\\VC7\\atlmfc\\include : cstringt.h ]
      {
         ECHO MFC/ATL regex wrappers will be tested when building with VC7 ;
         REGEX_MFC_OPTS += "<vc7><*><define>TEST_MFC=1" ;
         REGEX_MFC_OPTS += "<vc7-stlport><*><define>TEST_MFC=1" ;
         REGEX_MFC_OPTS += "<vc-7_0><*><define>TEST_MFC=1" ;
         REGEX_MFC_OPTS += "<vc-7_0-stlport><*><define>TEST_MFC=1" ;
      }
   }
   if $(VS80COMNTOOLS)
   {
      VS80COMNTOOLS = $(VS80COMNTOOLS:J=" ") ;
      if [ GLOB $(VS80COMNTOOLS)..\\..\\VC8\\atlmfc\\include : cstringt.h ]
      {
         ECHO MFC/ATL regex wrappers will be tested when building with VC8 ;
         REGEX_MFC_OPTS += "<vc-8_0><*><define>TEST_MFC=1" ;
      }
   }
}

#
# this template defines the options common to
# all regex tests:
#
template test 
   : <template>../build/regex-options 
     <template>../build/regex-test-options
     <lib>../build/boost_regex            # sources
   : <threading>multi
     $(REGEX_MFC_OPTS)
   ;
 
#
# this template defines the options common to
# all builds of the test/regression program:
#
template regression
    : <template>test                    # sources
      regress/$(R_SOURCE)
    ;

#
# rule for simple regex test programs:
#
rule regex-test ( name : sources + : requirements * : input-files * )
{
    return [ run $(sources)
               :
               : $(input-files)
               : $(requirements)
               : $(name) ] ;
}

#
# this template defines the options common to
# all regex dll tests:
#
template test-dll 
   : <template>../build/regex-dll-options 
     <template>../build/regex-test-options
     <dll>../build/boost_regex            # sources
   : <threading>multi
   ;
 
#
# this template defines the options common to
# all builds of the test/regression program:
#
template regression-dll
    : <template>test-dll                    # sources
      regress/$(R_SOURCE)
    ;

test-suite regex
      : 
      [ regex-test regex_regress
          : <template>regression     # sources
          :                          # requirements
          :                          # input files
      ]

      [ regex-test posix_api_check
          : <template>test                      # sources
            c_compiler_checks/posix_api_check.c
      ]

      [ compile <template>test c_compiler_checks/wide_posix_api_check.c 
          : : wide_posix_api_check_c ]

      [ regex-test posix_api_check_cpp
          : <template>test                      # sources
            c_compiler_checks/posix_api_check.cpp
      ]

      [ regex-test wide_posix_api_check_cpp
          : <template>test                      # sources
            c_compiler_checks/wide_posix_api_check.cpp
      ]

      [ regex-test bad_expression_test
          : <template>test                      # sources
            pathology/bad_expression_test.cpp
            
      ]

      [ regex-test recursion_test
          : <template>test                      # sources
            pathology/recursion_test.cpp
            
      ]
      
      [ run unicode/unicode_iterator_test.cpp ]
      
      [ regex-test static_mutex_test
          : <template>test-dll                  # sources
            static_mutex/static_mutex_test.cpp
            <dll>../../thread/build/boost_thread
          : <define>BOOST_THREAD_USE_DLL=1
      ]
      [ regex-test object_cache_test
          : <template>test                      # sources
            object_cache/object_cache_test.cpp
      ]
      
      [ run config_info/regex_config_info.cpp <template>test 
      : : : <test-info>always_show_run_output ]

      [ run config_info/regex_config_info.cpp <template>test 
      : : : <test-info>always_show_run_output
      : regex_dll_config_info ]

      [ run collate_info/collate_info.cpp <template>test
      : : : <test-info>always_show_run_output ]
      
      [ regex-test regex_regress_dll
          : <template>regression-dll     # sources
          :                              # requirements
          :                              # input files
      ]

      [ compile concepts/concept_check.cpp
      ]
      [ compile concepts/icu_concept_check.cpp
      ]
      
     [ run
    # sources
    captures/captures_test.cpp
    <template>../build/regex-options
    # dependencies
    <lib>captures/boost_regex_extra
    
 :  # additional args
 :  # test-files
 :  # requirements
    <threading>multi
    <define>BOOST_REGEX_MATCH_EXTRA=1
    <define>BOOST_REGEX_NO_LIB=1
 :  # test name
    captures_test
 ]

;





















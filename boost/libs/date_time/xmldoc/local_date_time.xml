<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE library PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN"
"../../../tools/boostbook/dtd/boostbook.dtd">

<!-- Copyright (c) 2001-2005 CrystalClear Software, Inc.
     Subject to the Boost Software License, Version 1.0.
     (See accompanying file LICENSE-1.0 or  http://www.boost.org/LICENSE-1.0)
-->

<section id="date_time.local_time.local_date_time">
  <title>Local Date Time</title>

  <link linkend="local_date_time_intro">Introduction</link> --
  <link linkend="local_date_time_header">Header</link> --
  <link linkend="local_date_time_clock_constr">Construct From Clock</link> --
  <link linkend="local_date_time_constr">Construction</link> --
  <link linkend="local_date_time_accessors">Accessors</link> --
  <link linkend="local_date_time_operators">Operators</link>

  <anchor id="local_date_time_intro" />
  <bridgehead renderas="sect3">Introduction</bridgehead>
  <para>
    A local_date_time object is a point in time and an associated time zone. The time is represented internally as UTC.
  </para>

  <anchor id="local_date_time_header" />
  <bridgehead renderas="sect3">Header</bridgehead>
  <para>
    The inclusion of a single header will bring in all boost::local_time types,
functions, and IO operators.
    <programlisting>
      #include "boost/date_time/local_time/local_time.hpp"
    </programlisting>
  </para>
  
  <anchor id="local_date_time_clock_constr" />
  <bridgehead renderas="sect3">Construct From Clock</bridgehead>
  <para>
    Creation of a local_date_time object from clock is possible with either second, or sub second resolution.
  </para>
  <para>
    <informaltable frame="all">
      <tgroup cols="2">
        <thead>
          <row>
            <entry>Syntax</entry>
            <entry>Example</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry valign="top"><screen>local_microsec_clock(...)
  Return Type:
    local_date_time
  Parameter:
    time_zone_ptr</screen></entry>
            <entry><screen>time_zone_ptr zone(
  new posix_time_zone("MST-07")
);
local_date_time ldt = 
  local_microsec_clock::local_time(
    zone);</screen>
            </entry>
          </row>
          <row>
            <entry valign="top"><screen>local_sec_clock(...)
  Return Type:
    local_date_time 
  Parameter:
    time_zone_ptr</screen></entry>
            <entry><screen>time_zone_ptr zone(
  new posix_time_zone("MST-07")
);
local_date_time ldt = 
  local_sec_clock::local_time(zone);</screen>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
  </para>
  
  <anchor id="local_date_time_constr" />
  <bridgehead renderas="sect3">Construction</bridgehead>
  <para>
    Construction of a local_date_time object can be done with a ptime and a time_zone_ptr where the ptime represents UTC time. Construction with a wall-clock representation takes the form of a date, a time_duration, a time_zone_ptr, and a fourth parameter that addresses the following complication.
  </para>
  <para>
    Construction from a wall-clock rep may result in differing shifts for a particular time zone, depending on daylight savings rules for that zone. This means it is also possible to create a local_date_time with a non-existent, or duplicated, UTC representation. These cases occur during the forward shift in time that is the transition into daylight savings and during the backward shift that is the transition out of daylight savings. The user has two options for handling these cases: a bool flag that states if the time is daylight savings, or an enum that states what to do when either of these cases are encountered.
  </para>
  <para>
    The bool flag is ignored when the given time_zone has no daylight savings specification. When the daylight savings status of a given time label is calculated and it does not match the flag, a local_time::dst_not_valid exception is thrown. If a time label is invalid (does not exist), a local_time::time_label_invalid exception is thrown.
  </para>
  <para>
    There are two elements in the local_date_time::DST_CALC_OPTIONS enum: EXCEPTION_ON_ERROR and NOT_DATE_TIME_ON_ERROR. The possible exceptions thrown are a local_time::ambiguous_result or a local_time::time_label_invalid. The NOT_DATE_TIME_ON_ERROR sets the time value to the special value local_time::not_a_date_time in the event of either a invalid or an ambiguous time label.
  </para>
  <para>
    <informaltable frame="all">
      <tgroup cols="2">
        <thead>
          <row>
            <entry>Syntax</entry>
            <entry>Example</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry valign="top"><screen>local_date_time(...)
  Parameters:
    posix_time::ptime
    time_zone_ptr</screen></entry>
            <entry><screen>
// 3am, 2004-Nov-05 local time
ptime pt(date(2004,Nov,5), 
         hours(10));
time_zone_ptr zone(
  new posix_time_zone("MST-07"));
local_date_time az(pt, zone);</screen>
            </entry>
          </row>
          <row>
            <entry valign="top"><screen>local_date_time(...)
  Parameters:
    date
    time_duration 
    time_zone_ptr
    bool</screen></entry>
            <entry><screen>date d(2004,Nov,5);
time_duration td(5,0,0,0);
string z("PST-8PDT,M4.1.0,M10.1.0")
time_zone_ptr zone(
  new posix_time_zone(z));
local_date_time nyc(d, td, 
                    zone, false);</screen>
            </entry>
          </row>
          <row>
            <entry valign="top"><screen>local_date_time(...)
  Parameters:
    date
    time_duration
    time_zone_ptr
    DST_CALC_OPTIONS</screen></entry>
            <entry><screen>date d(2004,Nov,5);
time_duration td(5,0,0,0);
string z("PST-8PDT,M4.1.0,M10.1.0")
time_zone_ptr zone(
  new posix_time_zone(z));
local_date_time nyc(d, td, zone, 
  NOT_DATE_TIME_ON_ERROR);</screen>
            </entry>
          </row>
          <row>
            <entry valign="top"><screen>local_date_time(local_date_time);</screen></entry>
            <entry><screen>local_date_time az_2(az);</screen></entry>
          </row>
          <row>
            <entry valign="top"><screen>local_date_time(...)
  Parameters:
    special_values
    time_zone_ptr</screen></entry>
            <entry><screen>time_zone_ptr zone(
  new posix_time_zone("MST-07")
);
local_date_time nadt(not_a_date_time, 
                     zone);
// default NULL time_zone_ptr
local_date_time nadt(pos_infin);</screen>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
  </para>

  <anchor id="local_date_time_accessors" />
  <bridgehead renderas="sect3">Accessors</bridgehead>
  <para>
    <informaltable frame="all">
      <tgroup cols="2">
        <thead>
          <row>
            <entry valign="top" morerows="1">Syntax</entry>
            <entry>Description</entry>
          </row>
          <row>
              <entry>Example</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry valign="top" morerows="1"><screen>time_zone_ptr zone()</screen></entry>
            <entry>Returns associated time_zone object via a time_zone_ptr</entry>
          </row>
          <row>
            <entry><screen></screen></entry>
          </row>

          <row>
            <entry valign="top" morerows="1"><screen>bool is_dst()</screen></entry>
            <entry>Determines if time rep is in DST for associated zone.</entry>
          </row>
          <row>
            <entry></entry>
          </row>
          
          <row>
            <entry valign="top" morerows="1"><screen>ptime utc_time()</screen></entry>
            <entry>Returns the UTC time for this object.</entry>
          </row>
          <row>
            <entry><screen>ptime pt(date(2004,Nov,5), 
         hours(10));
time_zone_ptr zone(
  new posix_time_zone("MST-07"));
local_date_time az(pt, zone);
az.utc_time(); // 10am 2004-Nov-5</screen>
            </entry>
          </row>

          <row>
            <entry valign="top" morerows="1"><screen>ptime local_time()</screen></entry>
            <entry>Returns the local time for this object (Wall-clock).</entry>
          </row>
          <row>
            <entry><screen>az.local_time(); // 3am 2004-Nov-5</screen></entry>
          </row>
          
          <row>
            <entry valign="top" morerows="1"><screen>local_time_in(...)
  Return Type:
    local_date_time 
  Parameters:
    time_zone_ptr
    time_duration</screen></entry>
            <entry>Returns a local_date_time representing the same UTC time as calling object, plus optional time_duration, with given time zone.</entry>
          </row>
          <row>
            <entry><screen>local_date_time nyc = 
  az.local_time_in(nyc_zone, 
                   hours(2));
// nyc == 7am 2004-Nov-5</screen>
            </entry>
          </row>
          
          <row>
            <entry valign="top" morerows="1"><screen>std::string zone_name()</screen></entry>
            <entry>Returns full zone name from associated time zone or "Coordinated Universal Time" if time_zone_ptr is NULL.</entry>
          </row>
          <row>
            <entry>
            </entry>
          </row>
          
          <row>
            <entry valign="top" morerows="1"><screen>std::string zone_abbrev()</screen></entry>
            <entry>Returns zone abbreviation from associated time zone or "UTC" if time_zone_ptr is NULL.</entry>
          </row>
          <row>
            <entry>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
  </para>

  <anchor id="local_date_time_operators" />
  <bridgehead renderas="sect3">Operators</bridgehead>
  <para>
    Full comparison operations to another local_date_time are provided.
  </para>
  <para>
    Addition, subtraction, and shortcut operators provided for date_duration, and time_duration.
  </para>

</section>

<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE library PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN" 
"../../../tools/boostbook/dtd/boostbook.dtd">

<!-- Copyright (c) 2001-2004 CrystalClear Software, Inc.
     Subject to the Boost Software License, Version 1.0. 
     (See accompanying file LICENSE-1.0 or  http://www.boost.org/LICENSE-1.0)
-->

<section id="date_time.posix_time.time_period">
  <title>Time Period</title>

  <link linkend="time_period_intro">Introduction</link> --
  <link linkend="time_period_header">Header</link> --
  <link linkend="time_period_constr">Construction</link> --
  <link linkend="time_period_accessors">Accessors</link> --
  <link linkend="time_period_to_string">Conversion To String</link> --
  <link linkend="time_period_operators">Operators</link>

  <anchor id="time_period_intro" />
  <bridgehead renderas="sect3">Introduction</bridgehead>
  <para>
    The class boost::posix_time::time_period provides direct representation for ranges between two times. Periods provide the ability to simplify some types of calculations by simplifying the conditional logic of the program. 
  </para>
  <para>
    The <link linkend="date_time.examples.time_periods">time periods example</link> provides an example of using time periods. 
  </para>

  <anchor id="time_period_header" />
  <bridgehead renderas="sect3">Header</bridgehead>
  <para>
    <programlisting>
      #include "boost/date_time/posix_time/posix_time.hpp" //include all types plus i/o
      or
      #include "boost/date_time/posix_time/posix_time_types.hpp" //no i/o just types
    </programlisting>
  </para>

  <anchor id="time_period_constr" />
  <bridgehead renderas="sect3">Construction</bridgehead>
  <para>
    <informaltable frame="all">
      <tgroup cols="3">
	<thead>
	  <row>
	    <entry>Syntax</entry>
	    <entry>Description</entry>
	    <entry>Example</entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry>time_period(ptime begin, ptime end)</entry>
	    <entry> Create a period as [begin, end). If last is &lt;= begin then the period will be defined as null.</entry>
	    <entry>
	      date d(2002,Jan,01);
	      ptime t(d, seconds(10)); //10 sec after midnight
	      time_period tp(t, hours(3));
	    </entry>
	  </row>
	  <row>
	    <entry>time_period(ptime start, time_duration len)</entry>
	    <entry> Create a period as [begin, begin+len). If len is &lt;= zero then the period will be defined as null.</entry>
	    <entry>
	      date d(2002,Jan,01);
	      ptime t1(d, seconds(10)); //10 sec after midnight
	      ptime t2(d, hours(10)); //10 hours after midnight
	      time_period tp(t1, t2);
	    </entry>
	  </row>
	  <row>
	    <entry>time_period(time_period rhs)</entry>
	    <entry> Copy constructor</entry>
	    <entry>time_period tp1(tp)</entry>
	  </row>
	</tbody>
      </tgroup>
    </informaltable>
  </para>


  <anchor id="time_period_accessors" />
  <bridgehead renderas="sect3">Accessors</bridgehead>
  <para>
    <informaltable frame="all">
      <tgroup cols="3">
	<thead>
	  <row>
	    <entry>Syntax</entry>
	    <entry>Description</entry>
	    <entry>Example</entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry>ptime begin() const</entry>
	    <entry>Return first time of period.</entry>
	    <entry>
	      date d(2002,Jan,01);
	      ptime t1(d, seconds(10)); //10 sec after midnight
	      ptime t2(d, hours(10)); //10 hours after midnight
	      time_period tp(t1, t2); tp.begin() --> 2002-Jan-01 00:00:10
	    </entry>
	  </row>
	  <row>
	    <entry>ptime last() const</entry>
	    <entry>Return last time in the period</entry>
	    <entry>
	      date d(2002,Jan,01);
	      ptime t1(d, seconds(10)); //10 sec after midnight
	      ptime t2(d, hours(10)); //10 hours after midnight
	      time_period tp(t1, t2); tp.last() --> 2002-Jan-01 09:59:59.999999999
	    </entry>
	  </row>
	  <row>
	    <entry>ptime end() const</entry>
	    <entry> Return one past the last in period</entry>
	    <entry>
	      date d(2002,Jan,01);
	      ptime t1(d, seconds(10)); //10 sec after midnight
	      ptime t2(d, hours(10)); //10 hours after midnight
	      time_period tp(t1, t2); tp.last() --> 2002-Jan-01 10:00:00
	    </entry>
	  </row>
	  <row>
	    <entry>time_duration length() const</entry>
	    <entry>Return the length of the time period.</entry>
	    <entry>
	      date d(2002,Jan,01);
	      ptime t1(d); //midnight
	      time_period tp(t1, hours(1));
	      tp.length() --> 1 hour
	    </entry>
	  </row>
	  <row>
	    <entry>bool is_null() const</entry>
	    <entry>True if period is not well formed. eg: start less than end</entry>
	    <entry></entry>
	  </row>
	  <row>
	    <entry>bool contains(ptime) const</entry>
	    <entry>True if ptime is within the period</entry>
	    <entry>
	      date d(2002,Jan,01);
	      ptime t1(d, seconds(10)); //10 sec after midnight
	      ptime t2(d, hours(10)); //10 hours after midnight
	      ptime t3(d, hours(2)); //2 hours after midnight
	      time_period tp(t1, t2); tp.contains(t3) --> true
	    </entry>
	  </row>
	  <row>
	    <entry>bool contains(time_period) const</entry>
	    <entry>True if period is within the period</entry>
	    <entry>
	      time_period tp1(ptime(d,hours(1)), ptime(d,hours(12)));
	      time_period tp2(ptime(d,hours(2)), ptime(d,hours(4)));
	      tp1.contains(tp2) --> true
	      tp2.contains(tp1) --> false
	    </entry>
	  </row>
	  <row>
	    <entry>bool intersects(time_period) const</entry>
	    <entry> True if periods overlap</entry>
	    <entry>
	      time_period tp1(ptime(d,hours(1)), ptime(d,hours(12)));
	      time_period tp2(ptime(d,hours(2)), ptime(d,hours(4)));
	      tp2.intersects(tp1) --> true
	    </entry>
	  </row>
	  <row>
	    <entry>time_period intersection(time_period) const</entry>
	    <entry>Calculate the intersection of 2 periods. Null if no intersection.</entry>
	    <entry></entry>
	  </row>
	  <row>
	    <entry>time_period merge(time_period) const</entry>
	    <entry>Returns union of two periods. Null if no intersection.</entry>
	    <entry></entry>
	  </row>
	  <row>
	    <entry>time_period span(time_period) const</entry>
	    <entry>Combines two periods and any gap between them such that start = min(p1.start, p2.start) and end = max(p1.end , p2.end).</entry>
	    <entry></entry>
	  </row>
	  <row>
	    <entry>time_period shift(date_duration)</entry>
	    <entry>Add duration to both start and end.</entry>
	    <entry></entry>
	  </row>
	</tbody>
      </tgroup>
    </informaltable>
  </para>


  <anchor id="time_period_to_string" />
  <bridgehead renderas="sect3">Conversion To String</bridgehead>
  <para>
    <informaltable frame="all">
      <tgroup cols="3">
	<thead>
	  <row>
	    <entry>Syntax</entry>
	    <entry>Description</entry>
	    <entry>Example</entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry>std::string to_simple_string(time_period dp)</entry>
	    <entry>To [YYYY-mmm-DD hh:mm:ss.fffffffff/YYYY-mmm-DD hh:mm:ss.fffffffff] string where mmm is 3 char month name.</entry>
	    <entry>[2002-Jan-01 01:25:10.000000001/2002-Jan-31 01:25:10.123456789]</entry>
	  </row>
	</tbody>
      </tgroup>
    </informaltable>
  </para>


  <anchor id="time_period_operators" />
  <bridgehead renderas="sect3">Operators</bridgehead>
  <para>
    <informaltable frame="all">
      <tgroup cols="3">
	<thead>
	  <row>
	    <entry>Syntax</entry>
	    <entry>Description</entry>
	    <entry>Example</entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry>operator&lt;&lt;</entry>
	    <entry>Output streaming operator for time duration. Uses facet to output [date time_of_day/date time_of_day]. The default is format is [YYYY-mmm-DD hh:mm:ss.fffffffff/YYYY-mmm-DD hh:mm:ss.fffffffff] string where mmm is 3 char month name.</entry>
	    <entry>[2002-Jan-01 01:25:10.000000001/2002-Jan-31 01:25:10.123456789]</entry>
	  </row>
	  <row>
	    <entry>operator==, operator!=</entry>
	    <entry>Equality operators. Periods are equal if p1.begin == p2.begin &amp;&amp; p1.last == p2.last</entry>
	    <entry>if (tp1 == tp2) {...</entry>
	  </row>
	  <row>
	    <entry>operator&lt;</entry>
	    <entry>Ordering with no overlap. True if tp1.end() less than tp2.begin()</entry>
	    <entry>if (tp1 &lt; tp2) {...</entry>
	  </row>
	  <row>
	    <entry>operator></entry>
	    <entry>Ordering with no overlap. True if tp1.begin() greater than tp2.end()</entry>
	    <entry>if (tp1 > tp2) {... etc</entry>
	  </row>
	  <row>
	    <entry>operator&lt;=, operator>=</entry>
	    <entry>Defined in terms of the other operators.</entry>
	    <entry></entry>
	  </row>
	</tbody>
      </tgroup>
    </informaltable>
  </para>


  <link linkend="top">top</link>
</section>

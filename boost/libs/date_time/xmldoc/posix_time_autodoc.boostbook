<?xml version="1.0" standalone="yes"?>
<!-- Copyright (c) 2001-2004 CrystalClear Software, Inc.
     Subject to the Boost Software License, Version 1.0. 
     (See accompanying file LICENSE-1.0 or  http://www.boost.org/LICENSE-1.0)
-->
<section id="posix_time_reference">
<title>Posix Time Reference</title>
  <header name="boost/date_time/posix_time/conversion.hpp">
    <namespace name="boost">
      <namespace name="posix_time">
        <function name="from_time_t">
          <type>
            <classname>ptime</classname>
          </type>
          <parameter name="t">
            <paramtype>std::time_t</paramtype>
          </parameter>
          <purpose>
            <simpara>Function that converts a time_t into a ptime. </simpara>
          </purpose>
        </function>
        <function name="from_ftime">
          <type>time_type</type>
          <template>
          <template-type-parameter name="time_type"/>
        </template>
          <parameter name="ft">
            <paramtype>const FILETIME &amp;</paramtype>
          </parameter>
          <purpose>
            <simpara>Function to create a time object from an initialized FILETIME struct. </simpara>
          </purpose>
          <description>
            <para>Function to create a time object from an initialized FILETIME struct. A FILETIME struct holds 100-nanosecond units (0.0000001). When built with microsecond resolution the FILETIME's sub second value will be truncated. Nanosecond resolution has no truncation.</para>
            <para>Note ftime is part of the Win32 API, so it is not portable to non-windows platforms. </para>
          </description>
        </function>
      </namespace>
    </namespace>
  </header>
  <header name="boost/date_time/posix_time/date_duration_operators.hpp">
    <para>Operators for ptime and optional gregorian types. Operators use snap-to-end-of-month behavior. Further details on this behavior can be found in reference for date_time/date_duration_types.hpp and documentation for month and year iterators.</para>
    <namespace name="boost">
      <namespace name="posix_time">
        <function name="operator+">
          <type>
            <classname>ptime</classname>
          </type>
          <parameter name="t">
            <paramtype>const <classname>ptime</classname> &amp;</paramtype>
          </parameter>
          <parameter name="m">
            <paramtype>const boost::gregorian::months &amp;</paramtype>
          </parameter>
          <description>
            <para>Adds a months object and a ptime. Result will be same day-of-month as ptime unless original day was the last day of month. see date_time::months_duration for more details </para>
          </description>
        </function>
        <function name="operator+=">
          <type>
            <classname>ptime</classname>
          </type>
          <parameter name="t">
            <paramtype><classname>ptime</classname> &amp;</paramtype>
          </parameter>
          <parameter name="m">
            <paramtype>const boost::gregorian::months &amp;</paramtype>
          </parameter>
          <description>
            <para>Adds a months object to a ptime. Result will be same day-of-month as ptime unless original day was the last day of month. see date_time::months_duration for more details </para>
          </description>
        </function>
        <function name="operator-">
          <type>
            <classname>ptime</classname>
          </type>
          <parameter name="t">
            <paramtype>const <classname>ptime</classname> &amp;</paramtype>
          </parameter>
          <parameter name="m">
            <paramtype>const boost::gregorian::months &amp;</paramtype>
          </parameter>
          <description>
            <para>Subtracts a months object and a ptime. Result will be same day-of-month as ptime unless original day was the last day of month. see date_time::months_duration for more details </para>
          </description>
        </function>
        <function name="operator-=">
          <type>
            <classname>ptime</classname>
          </type>
          <parameter name="t">
            <paramtype><classname>ptime</classname> &amp;</paramtype>
          </parameter>
          <parameter name="m">
            <paramtype>const boost::gregorian::months &amp;</paramtype>
          </parameter>
          <description>
            <para>Subtracts a months object from a ptime. Result will be same day-of-month as ptime unless original day was the last day of month. see date_time::months_duration for more details </para>
          </description>
        </function>
        <function name="operator+">
          <type>
            <classname>ptime</classname>
          </type>
          <parameter name="t">
            <paramtype>const <classname>ptime</classname> &amp;</paramtype>
          </parameter>
          <parameter name="y">
            <paramtype>const boost::gregorian::years &amp;</paramtype>
          </parameter>
          <description>
            <para>Adds a years object and a ptime. Result will be same month and day-of-month as ptime unless original day was the last day of month. see date_time::years_duration for more details </para>
          </description>
        </function>
        <function name="operator+=">
          <type>
            <classname>ptime</classname>
          </type>
          <parameter name="t">
            <paramtype><classname>ptime</classname> &amp;</paramtype>
          </parameter>
          <parameter name="y">
            <paramtype>const boost::gregorian::years &amp;</paramtype>
          </parameter>
          <description>
            <para>Adds a years object to a ptime. Result will be same month and day-of-month as ptime unless original day was the last day of month. see date_time::years_duration for more details </para>
          </description>
        </function>
        <function name="operator-">
          <type>
            <classname>ptime</classname>
          </type>
          <parameter name="t">
            <paramtype>const <classname>ptime</classname> &amp;</paramtype>
          </parameter>
          <parameter name="y">
            <paramtype>const boost::gregorian::years &amp;</paramtype>
          </parameter>
          <description>
            <para>Subtracts a years object and a ptime. Result will be same month and day-of-month as ptime unless original day was the last day of month. see date_time::years_duration for more details </para>
          </description>
        </function>
        <function name="operator-=">
          <type>
            <classname>ptime</classname>
          </type>
          <parameter name="t">
            <paramtype><classname>ptime</classname> &amp;</paramtype>
          </parameter>
          <parameter name="y">
            <paramtype>const boost::gregorian::years &amp;</paramtype>
          </parameter>
          <description>
            <para>Subtracts a years object from a ptime. Result will be same month and day-of-month as ptime unless original day was the last day of month. see date_time::years_duration for more details </para>
          </description>
        </function>
      </namespace>
    </namespace>
  </header>
  <header name="boost/date_time/posix_time/posix_time.hpp">
    <para>Global header file to get all of posix time types</para>
  </header>
  <header name="boost/date_time/posix_time/posix_time_config.hpp">
    <namespace name="boost">
      <namespace name="posix_time">
        <class name="time_duration">
          <purpose>
            <simpara>Base time duration type. </simpara>
          </purpose>
          <typedef name="rep_type">
            <type>time_res_traits</type>
          </typedef>
          <typedef name="day_type">
            <type>time_res_traits::day_type</type>
          </typedef>
          <typedef name="hour_type">
            <type>time_res_traits::hour_type</type>
          </typedef>
          <typedef name="min_type">
            <type>time_res_traits::min_type</type>
          </typedef>
          <typedef name="sec_type">
            <type>time_res_traits::sec_type</type>
          </typedef>
          <typedef name="fractional_seconds_type">
            <type>time_res_traits::fractional_seconds_type</type>
          </typedef>
          <typedef name="tick_type">
            <type>time_res_traits::tick_type</type>
          </typedef>
          <typedef name="impl_type">
            <type>time_res_traits::impl_type</type>
          </typedef>
          <method-group name="public member functions"/>
          <constructor>
            <parameter name="hour">
              <paramtype>hour_type</paramtype>
            </parameter>
            <parameter name="min">
              <paramtype>min_type</paramtype>
            </parameter>
            <parameter name="sec">
              <paramtype>sec_type</paramtype>
            </parameter>
            <parameter name="fs">
              <paramtype>fractional_seconds_type</paramtype>
              <default>0</default>
            </parameter>
          </constructor>
          <constructor/>
          <constructor>
            <parameter name="sv">
              <paramtype>boost::date_time::special_values</paramtype>
            </parameter>
            <purpose>
              <simpara>Construct from special_values. </simpara>
            </purpose>
          </constructor>
          <method-group name="private member functions"/>
          <constructor>
            <parameter name="ticks">
              <paramtype>impl_type</paramtype>
            </parameter>
          </constructor>
        </class>
        <struct name="simple_time_rep">
          <purpose>
            <simpara>Simple implementation for the time rep. </simpara>
          </purpose>
          <typedef name="date_type">
            <type>gregorian::date</type>
          </typedef>
          <typedef name="time_duration_type">
            <type>
              <classname>time_duration</classname>
            </type>
          </typedef>
          <method-group name="public member functions">
            <method name="is_special" cv="const">
              <type>bool</type>
            </method>
            <method name="is_pos_infinity" cv="const">
              <type>bool</type>
            </method>
            <method name="is_neg_infinity" cv="const">
              <type>bool</type>
            </method>
            <method name="is_not_a_date_time" cv="const">
              <type>bool</type>
            </method>
          </method-group>
          <constructor>
            <parameter name="d">
              <paramtype>date_type</paramtype>
            </parameter>
            <parameter name="tod">
              <paramtype>
                <classname>time_duration_type</classname>
              </paramtype>
            </parameter>
          </constructor>
          <data-member name="day">
            <type>date_type</type>
          </data-member>
          <data-member name="time_of_day">
            <type>
              <classname>time_duration_type</classname>
            </type>
          </data-member>
        </struct>
        <class name="posix_time_system_config">
          <typedef name="time_rep_type">
            <type>
              <classname>simple_time_rep</classname>
            </type>
          </typedef>
          <typedef name="date_type">
            <type>gregorian::date</type>
          </typedef>
          <typedef name="date_duration_type">
            <type>gregorian::date_duration</type>
          </typedef>
          <typedef name="time_duration_type">
            <type>
              <classname>time_duration</classname>
            </type>
          </typedef>
          <typedef name="int_type">
            <type>time_res_traits::tick_type</type>
          </typedef>
          <typedef name="resolution_traits">
            <type>time_res_traits</type>
          </typedef>
          <method-group name="public member functions">
            <method name="BOOST_STATIC_CONSTANT" cv="">
              <type/>
              <parameter name="">
                <paramtype>boost::int64_t</paramtype>
              </parameter>
              <parameter name="">
                <paramtype>tick_per_second</paramtype>
                <default>1000000000</default>
              </parameter>
            </method>
          </method-group>
        </class>
        <class name="millisec_posix_time_system_config">
          <typedef name="time_rep_type">
            <type>boost::int64_t</type>
          </typedef>
          <typedef name="date_type">
            <type>gregorian::date</type>
          </typedef>
          <typedef name="date_duration_type">
            <type>gregorian::date_duration</type>
          </typedef>
          <typedef name="time_duration_type">
            <type>
              <classname>time_duration</classname>
            </type>
          </typedef>
          <typedef name="int_type">
            <type>time_res_traits::tick_type</type>
          </typedef>
          <typedef name="impl_type">
            <type>time_res_traits::impl_type</type>
          </typedef>
          <typedef name="resolution_traits">
            <type>time_res_traits</type>
          </typedef>
          <method-group name="public member functions">
            <method name="BOOST_STATIC_CONSTANT" cv="">
              <type/>
              <parameter name="">
                <paramtype>boost::int64_t</paramtype>
              </parameter>
              <parameter name="">
                <paramtype>tick_per_second</paramtype>
                <default>1000000</default>
              </parameter>
            </method>
          </method-group>
        </class>
        <typedef name="time_res_traits">
          <type>date_time::time_resolution_traits&lt; boost::date_time::time_resolution_traits_adapted64_impl, boost::date_time::nano, 1000000000, 9 &gt;</type>
        </typedef>
      </namespace>
    </namespace>
  </header>
  <header name="boost/date_time/posix_time/posix_time_duration.hpp">
    <namespace name="boost">
      <namespace name="posix_time">
        <class name="hours">
          <inherit access="public">boost::posix_time::time_duration</inherit>
          <purpose>
            <simpara>Allows expression of durations as an hour count. </simpara>
          </purpose>
          <method-group name="public member functions"/>
          <constructor>
            <parameter name="h">
              <paramtype>long</paramtype>
            </parameter>
          </constructor>
        </class>
        <class name="minutes">
          <inherit access="public">boost::posix_time::time_duration</inherit>
          <purpose>
            <simpara>Allows expression of durations as a minute count. </simpara>
          </purpose>
          <method-group name="public member functions"/>
          <constructor>
            <parameter name="m">
              <paramtype>long</paramtype>
            </parameter>
          </constructor>
        </class>
        <class name="seconds">
          <inherit access="public">boost::posix_time::time_duration</inherit>
          <purpose>
            <simpara>Allows expression of durations as a seconds count. </simpara>
          </purpose>
          <method-group name="public member functions"/>
          <constructor>
            <parameter name="s">
              <paramtype>long</paramtype>
            </parameter>
          </constructor>
        </class>
        <typedef name="millisec">
          <purpose>
            <simpara>Allows expression of durations as milli seconds. </simpara>
          </purpose>
          <type>date_time::subsecond_duration&lt; <classname>time_duration</classname>, 1000 &gt;</type>
        </typedef>
        <typedef name="milliseconds">
          <type>date_time::subsecond_duration&lt; <classname>time_duration</classname>, 1000 &gt;</type>
        </typedef>
        <typedef name="microsec">
          <purpose>
            <simpara>Allows expression of durations as micro seconds. </simpara>
          </purpose>
          <type>date_time::subsecond_duration&lt; <classname>time_duration</classname>, 1000000 &gt;</type>
        </typedef>
        <typedef name="microseconds">
          <type>date_time::subsecond_duration&lt; <classname>time_duration</classname>, 1000000 &gt;</type>
        </typedef>
        <typedef name="nanosec">
          <purpose>
            <simpara>Allows expression of durations as nano seconds. </simpara>
          </purpose>
          <type>date_time::subsecond_duration&lt; <classname>time_duration</classname>, 1000000000 &gt;</type>
        </typedef>
        <typedef name="nanoseconds">
          <type>date_time::subsecond_duration&lt; <classname>time_duration</classname>, 1000000000 &gt;</type>
        </typedef>
      </namespace>
    </namespace>
  </header>
  <header name="boost/date_time/posix_time/posix_time_system.hpp">
    <namespace name="boost">
      <namespace name="posix_time">
        <typedef name="posix_time_system">
          <type>date_time::split_timedate_system&lt; posix_time_system_config, 1000000000 &gt;</type>
        </typedef>
        <typedef name="int64_time_rep">
          <type>date_time::counted_time_rep&lt; millisec_posix_time_system_config &gt;</type>
        </typedef>
      </namespace>
    </namespace>
  </header>
  <header name="boost/date_time/posix_time/posix_time_types.hpp">
    <namespace name="boost">
      <namespace name="posix_time">
        <typedef name="time_iterator">
          <purpose>
            <simpara>Iterator over a defined time duration. </simpara>
          </purpose>
          <type>date_time::time_itr&lt; <classname>ptime</classname> &gt;</type>
        </typedef>
        <typedef name="second_clock">
          <purpose>
            <simpara>A time clock that has a resolution of one second. </simpara>
          </purpose>
          <type>date_time::second_clock&lt; ptime::date_type, <classname>ptime</classname> &gt;</type>
        </typedef>
        <typedef name="microsec_clock">
          <purpose>
            <simpara>A time clock that has a resolution of one microsecond. </simpara>
          </purpose>
          <type>date_time::microsec_clock&lt; <classname>ptime</classname> &gt;</type>
        </typedef>
        <typedef name="no_dst">
          <purpose>
            <simpara>Define a dst null dst rule for the posix_time system. </simpara>
          </purpose>
          <type>date_time::null_dst_rules&lt; ptime::date_type, <classname>time_duration</classname> &gt;</type>
        </typedef>
        <typedef name="us_dst">
          <purpose>
            <simpara>Define US dst rule calculator for the posix_time system. </simpara>
          </purpose>
          <type>date_time::us_dst_rules&lt; ptime::date_type, <classname>time_duration</classname> &gt;</type>
        </typedef>
      </namespace>
    </namespace>
  </header>
  <header name="boost/date_time/posix_time/ptime.hpp">
    <namespace name="boost">
      <namespace name="posix_time">
        <class name="ptime">
          <purpose>
            <simpara>Time type with no timezone or other adjustments. </simpara>
          </purpose>
          <typedef name="time_system_type">
            <type>posix_time_system</type>
          </typedef>
          <typedef name="time_rep_type">
            <type>time_system_type::time_rep_type</type>
          </typedef>
          <typedef name="time_duration_type">
            <type>time_system_type::time_duration_type</type>
          </typedef>
          <typedef name="time_type">
            <type>
              <classname>ptime</classname>
            </type>
          </typedef>
          <method-group name="public member functions"/>
          <constructor>
            <parameter name="d">
              <paramtype>gregorian::date</paramtype>
            </parameter>
            <parameter name="td">
              <paramtype>time_duration_type</paramtype>
            </parameter>
            <purpose>
              <simpara>Construct with date and offset in day. </simpara>
            </purpose>
          </constructor>
          <constructor>
            <parameter name="d">
              <paramtype>gregorian::date</paramtype>
            </parameter>
            <purpose>
              <simpara>Construct a time at start of the given day (midnight). </simpara>
            </purpose>
          </constructor>
          <constructor>
            <parameter name="rhs">
              <paramtype>const time_rep_type &amp;</paramtype>
            </parameter>
            <purpose>
              <simpara>Copy from time_rep. </simpara>
            </purpose>
          </constructor>
          <constructor>
            <parameter name="sv">
              <paramtype>const special_values</paramtype>
            </parameter>
            <purpose>
              <simpara>Construct from special value. </simpara>
            </purpose>
          </constructor>
          <constructor/>
        </class>
      </namespace>
    </namespace>
  </header>
  <header name="boost/date_time/posix_time/time_formatters.hpp">
    <namespace name="boost">
      <namespace name="posix_time">
        <function name="to_simple_string_type">
          <type>std::basic_string&lt; charT &gt;</type>
          <template>
          <template-type-parameter name="charT"/>
        </template>
          <parameter name="td">
            <paramtype>
              <classname>time_duration</classname>
            </paramtype>
          </parameter>
        </function>
        <function name="to_iso_string_type">
          <type>std::basic_string&lt; charT &gt;</type>
          <template>
          <template-type-parameter name="charT"/>
        </template>
          <parameter name="td">
            <paramtype>
              <classname>time_duration</classname>
            </paramtype>
          </parameter>
        </function>
        <function name="to_simple_string_type">
          <type>std::basic_string&lt; charT &gt;</type>
          <template>
          <template-type-parameter name="charT"/>
        </template>
          <parameter name="t">
            <paramtype>
              <classname>ptime</classname>
            </paramtype>
          </parameter>
          <purpose>
            <simpara>Time to simple format CCYY-mmm-dd hh:mm:ss.fffffff. </simpara>
          </purpose>
        </function>
        <function name="to_simple_string_type">
          <type>std::basic_string&lt; charT &gt;</type>
          <template>
          <template-type-parameter name="charT"/>
        </template>
          <parameter name="tp">
            <paramtype>time_period</paramtype>
          </parameter>
        </function>
        <function name="to_iso_string_type">
          <type>std::basic_string&lt; charT &gt;</type>
          <template>
          <template-type-parameter name="charT"/>
        </template>
          <parameter name="t">
            <paramtype>
              <classname>ptime</classname>
            </paramtype>
          </parameter>
        </function>
        <function name="to_iso_extended_string_type">
          <type>std::basic_string&lt; charT &gt;</type>
          <template>
          <template-type-parameter name="charT"/>
        </template>
          <parameter name="t">
            <paramtype>
              <classname>ptime</classname>
            </paramtype>
          </parameter>
        </function>
        <function name="to_simple_wstring">
          <type>std::wstring</type>
          <parameter name="td">
            <paramtype>
              <classname>time_duration</classname>
            </paramtype>
          </parameter>
          <purpose>
            <simpara>Time duration to wstring -hh::mm::ss.fffffff. Example: 10:09:03.0123456. </simpara>
          </purpose>
        </function>
        <function name="to_iso_wstring">
          <type>std::wstring</type>
          <parameter name="td">
            <paramtype>
              <classname>time_duration</classname>
            </paramtype>
          </parameter>
          <purpose>
            <simpara>Time duration in iso format -hhmmss,fffffff Example: 10:09:03,0123456. </simpara>
          </purpose>
        </function>
        <function name="to_simple_wstring">
          <type>std::wstring</type>
          <parameter name="t">
            <paramtype>
              <classname>ptime</classname>
            </paramtype>
          </parameter>
        </function>
        <function name="to_simple_wstring">
          <type>std::wstring</type>
          <parameter name="tp">
            <paramtype>time_period</paramtype>
          </parameter>
          <purpose>
            <simpara>Convert to wstring of form [YYYY-mmm-DD HH:MM::SS.ffffff/YYYY-mmm-DD HH:MM::SS.fffffff]. </simpara>
          </purpose>
        </function>
        <function name="to_iso_wstring">
          <type>std::wstring</type>
          <parameter name="t">
            <paramtype>
              <classname>ptime</classname>
            </paramtype>
          </parameter>
          <purpose>
            <simpara>Convert iso short form YYYYMMDDTHHMMSS where T is the date-time separator. </simpara>
          </purpose>
        </function>
        <function name="to_iso_extended_wstring">
          <type>std::wstring</type>
          <parameter name="t">
            <paramtype>
              <classname>ptime</classname>
            </paramtype>
          </parameter>
          <purpose>
            <simpara>Convert to form YYYY-MM-DDTHH:MM:SS where T is the date-time separator. </simpara>
          </purpose>
        </function>
        <function name="operator&gt;&gt;">
          <type>std::basic_istream&lt; charT &gt; &amp;</type>
          <template>
          <template-type-parameter name="charT"/>
        </template>
          <parameter name="is">
            <paramtype>std::basic_istream&lt; charT &gt; &amp;</paramtype>
          </parameter>
          <parameter name="td">
            <paramtype><classname>time_duration</classname> &amp;</paramtype>
          </parameter>
        </function>
        <function name="operator&gt;&gt;">
          <type>std::basic_istream&lt; charT &gt; &amp;</type>
          <template>
          <template-type-parameter name="charT"/>
        </template>
          <parameter name="is">
            <paramtype>std::basic_istream&lt; charT &gt; &amp;</paramtype>
          </parameter>
          <parameter name="pt">
            <paramtype><classname>ptime</classname> &amp;</paramtype>
          </parameter>
        </function>
        <function name="operator&gt;&gt;">
          <type>std::basic_istream&lt; charT &gt; &amp;</type>
          <template>
          <template-type-parameter name="charT"/>
        </template>
          <parameter name="is">
            <paramtype>std::basic_istream&lt; charT &gt; &amp;</paramtype>
          </parameter>
          <parameter name="tp">
            <paramtype>time_period &amp;</paramtype>
          </parameter>
          <description>
            <para>operator&gt;&gt; for time_period. time_period must be in "[date time_duration/date time_duration]" format. </para>
          </description>
        </function>
      </namespace>
    </namespace>
  </header>
  <header name="boost/date_time/posix_time/time_formatters_limited.hpp">
    <namespace name="boost">
      <namespace name="posix_time">
        <function name="to_simple_string">
          <type>std::string</type>
          <parameter name="td">
            <paramtype>
              <classname>time_duration</classname>
            </paramtype>
          </parameter>
          <purpose>
            <simpara>Time duration to string -hh::mm::ss.fffffff. Example: 10:09:03.0123456. </simpara>
          </purpose>
        </function>
        <function name="to_iso_string">
          <type>std::string</type>
          <parameter name="td">
            <paramtype>
              <classname>time_duration</classname>
            </paramtype>
          </parameter>
          <purpose>
            <simpara>Time duration in iso format -hhmmss,fffffff Example: 10:09:03,0123456. </simpara>
          </purpose>
        </function>
        <function name="to_simple_string">
          <type>std::string</type>
          <parameter name="t">
            <paramtype>
              <classname>ptime</classname>
            </paramtype>
          </parameter>
          <purpose>
            <simpara>Time to simple format CCYY-mmm-dd hh:mm:ss.fffffff. </simpara>
          </purpose>
        </function>
        <function name="to_simple_string">
          <type>std::string</type>
          <parameter name="tp">
            <paramtype>time_period</paramtype>
          </parameter>
          <purpose>
            <simpara>Convert to string of form [YYYY-mmm-DD HH:MM::SS.ffffff/YYYY-mmm-DD HH:MM::SS.fffffff]. </simpara>
          </purpose>
        </function>
        <function name="to_iso_string">
          <type>std::string</type>
          <parameter name="t">
            <paramtype>
              <classname>ptime</classname>
            </paramtype>
          </parameter>
          <purpose>
            <simpara>Convert iso short form YYYYMMDDTHHMMSS where T is the date-time separator. </simpara>
          </purpose>
        </function>
        <function name="to_iso_extended_string">
          <type>std::string</type>
          <parameter name="t">
            <paramtype>
              <classname>ptime</classname>
            </paramtype>
          </parameter>
          <purpose>
            <simpara>Convert to form YYYY-MM-DDTHH:MM:SS where T is the date-time separator. </simpara>
          </purpose>
        </function>
        <function name="operator&lt;&lt;">
          <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
          <template>
          <template-type-parameter name="charT"/>
          <template-type-parameter name="traits"/>
        </template>
          <parameter name="os">
            <paramtype>std::basic_ostream&lt; charT, traits &gt; &amp;</paramtype>
          </parameter>
          <parameter name="td">
            <paramtype>const <classname>time_duration</classname> &amp;</paramtype>
          </parameter>
          <purpose>
            <simpara>ostream operator for posix_time::time_duration </simpara>
          </purpose>
        </function>
        <function name="operator&lt;&lt;">
          <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
          <template>
          <template-type-parameter name="charT"/>
          <template-type-parameter name="traits"/>
        </template>
          <parameter name="os">
            <paramtype>std::basic_ostream&lt; charT, traits &gt; &amp;</paramtype>
          </parameter>
          <parameter name="t">
            <paramtype>const <classname>ptime</classname> &amp;</paramtype>
          </parameter>
          <purpose>
            <simpara>ostream operator for posix_time::ptime </simpara>
          </purpose>
        </function>
        <function name="operator&lt;&lt;">
          <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
          <template>
          <template-type-parameter name="charT"/>
          <template-type-parameter name="traits"/>
        </template>
          <parameter name="os">
            <paramtype>std::basic_ostream&lt; charT, traits &gt; &amp;</paramtype>
          </parameter>
          <parameter name="tp">
            <paramtype>const time_period &amp;</paramtype>
          </parameter>
          <purpose>
            <simpara>ostream operator for posix_time::time_period </simpara>
          </purpose>
        </function>
      </namespace>
    </namespace>
  </header>
  <header name="boost/date_time/posix_time/time_parsers.hpp">
    <namespace name="boost">
      <namespace name="posix_time">
        <function name="duration_from_string">
          <type>
            <classname>time_duration</classname>
          </type>
          <parameter name="s">
            <paramtype>const std::string &amp;</paramtype>
          </parameter>
          <purpose>
            <simpara>Creates a time_duration object from a delimited string. </simpara>
          </purpose>
          <description>
            <para>Expected format for string is "[-]h[h][:mm][:ss][.fff]". A negative duration will be created if the first character in string is a '-', all other '-' will be treated as delimiters. Accepted delimiters are "-:,.". </para>
          </description>
        </function>
        <function name="time_from_string">
          <type>
            <classname>ptime</classname>
          </type>
          <parameter name="s">
            <paramtype>const std::string &amp;</paramtype>
          </parameter>
        </function>
        <function name="from_iso_string">
          <type>
            <classname>ptime</classname>
          </type>
          <parameter name="s">
            <paramtype>const std::string &amp;</paramtype>
          </parameter>
        </function>
      </namespace>
    </namespace>
  </header>
  <header name="boost/date_time/posix_time/time_period.hpp">
    <namespace name="boost">
      <namespace name="posix_time">
        <typedef name="time_period">
          <purpose>
            <simpara>Time period type. </simpara>
          </purpose>
          <type>date_time::period&lt; <classname>ptime</classname>, <classname>time_duration</classname> &gt;</type>
        </typedef>
      </namespace>
    </namespace>
  </header>
  <header name="boost/date_time/posix_time/time_serialize.hpp"/>
</section>

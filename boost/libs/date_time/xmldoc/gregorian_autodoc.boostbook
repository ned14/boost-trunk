<?xml version="1.0" standalone="yes"?>
<!-- Copyright (c) 2001-2004 CrystalClear Software, Inc.
     Subject to the Boost Software License, Version 1.0. 
     (See accompanying file LICENSE-1.0 or  http://www.boost.org/LICENSE-1.0)
-->
<section id="gregorian_reference">
<title>Gregorian Reference</title>
  <header name="boost/date_time/gregorian/formatters.hpp">
    <namespace name="boost">
      <namespace name="gregorian">
        <function name="to_simple_string_type">
          <type>std::basic_string&lt; charT &gt;</type>
          <template>
          <template-type-parameter name="charT"/>
        </template>
          <parameter name="d">
            <paramtype>const <classname>date</classname> &amp;</paramtype>
          </parameter>
        </function>
        <function name="to_simple_string">
          <type>std::string</type>
          <parameter name="d">
            <paramtype>const <classname>date</classname> &amp;</paramtype>
          </parameter>
          <purpose>
            <simpara>To YYYY-mmm-DD string where mmm 3 char month name. Example: 2002-Jan-01. </simpara>
          </purpose>
        </function>
        <function name="to_simple_string_type">
          <type>std::basic_string&lt; charT &gt;</type>
          <template>
          <template-type-parameter name="charT"/>
        </template>
          <parameter name="d">
            <paramtype>const date_period &amp;</paramtype>
          </parameter>
        </function>
        <function name="to_simple_string">
          <type>std::string</type>
          <parameter name="d">
            <paramtype>const date_period &amp;</paramtype>
          </parameter>
          <purpose>
            <simpara>Convert date period to simple string. Example: [2002-Jan-01/2002-Jan-02]. </simpara>
          </purpose>
        </function>
        <function name="to_iso_string_type">
          <type>std::basic_string&lt; charT &gt;</type>
          <template>
          <template-type-parameter name="charT"/>
        </template>
          <parameter name="d">
            <paramtype>const date_period &amp;</paramtype>
          </parameter>
        </function>
        <function name="to_iso_string">
          <type>std::string</type>
          <parameter name="d">
            <paramtype>const date_period &amp;</paramtype>
          </parameter>
          <purpose>
            <simpara>Date period to iso standard format CCYYMMDD/CCYYMMDD. Example: 20021225/20021231. </simpara>
          </purpose>
        </function>
        <function name="to_iso_extended_string_type">
          <type>std::basic_string&lt; charT &gt;</type>
          <template>
          <template-type-parameter name="charT"/>
        </template>
          <parameter name="d">
            <paramtype>const <classname>date</classname> &amp;</paramtype>
          </parameter>
        </function>
        <function name="to_iso_extended_string">
          <type>std::string</type>
          <parameter name="d">
            <paramtype>const <classname>date</classname> &amp;</paramtype>
          </parameter>
          <purpose>
            <simpara>Convert to iso extended format string CCYY-MM-DD. Example 2002-12-31. </simpara>
          </purpose>
        </function>
        <function name="to_iso_string_type">
          <type>std::basic_string&lt; charT &gt;</type>
          <template>
          <template-type-parameter name="charT"/>
        </template>
          <parameter name="d">
            <paramtype>const <classname>date</classname> &amp;</paramtype>
          </parameter>
        </function>
        <function name="to_iso_string">
          <type>std::string</type>
          <parameter name="d">
            <paramtype>const <classname>date</classname> &amp;</paramtype>
          </parameter>
          <purpose>
            <simpara>Convert to iso standard string YYYYMMDD. Example: 20021231. </simpara>
          </purpose>
        </function>
        <function name="to_sql_string_type">
          <type>std::basic_string&lt; charT &gt;</type>
          <template>
          <template-type-parameter name="charT"/>
        </template>
          <parameter name="d">
            <paramtype>const <classname>date</classname> &amp;</paramtype>
          </parameter>
        </function>
        <function name="to_sql_string">
          <type>std::string</type>
          <parameter name="d">
            <paramtype>const <classname>date</classname> &amp;</paramtype>
          </parameter>
        </function>
        <function name="to_simple_wstring">
          <type>std::wstring</type>
          <parameter name="d">
            <paramtype>const date_period &amp;</paramtype>
          </parameter>
          <purpose>
            <simpara>Convert date period to simple string. Example: [2002-Jan-01/2002-Jan-02]. </simpara>
          </purpose>
        </function>
        <function name="to_simple_wstring">
          <type>std::wstring</type>
          <parameter name="d">
            <paramtype>const <classname>date</classname> &amp;</paramtype>
          </parameter>
          <purpose>
            <simpara>To YYYY-mmm-DD string where mmm 3 char month name. Example: 2002-Jan-01. </simpara>
          </purpose>
        </function>
        <function name="to_iso_wstring">
          <type>std::wstring</type>
          <parameter name="d">
            <paramtype>const date_period &amp;</paramtype>
          </parameter>
          <purpose>
            <simpara>Date period to iso standard format CCYYMMDD/CCYYMMDD. Example: 20021225/20021231. </simpara>
          </purpose>
        </function>
        <function name="to_iso_extended_wstring">
          <type>std::wstring</type>
          <parameter name="d">
            <paramtype>const <classname>date</classname> &amp;</paramtype>
          </parameter>
          <purpose>
            <simpara>Convert to iso extended format string CCYY-MM-DD. Example 2002-12-31. </simpara>
          </purpose>
        </function>
        <function name="to_iso_wstring">
          <type>std::wstring</type>
          <parameter name="d">
            <paramtype>const <classname>date</classname> &amp;</paramtype>
          </parameter>
          <purpose>
            <simpara>Convert to iso standard string YYYYMMDD. Example: 20021231. </simpara>
          </purpose>
        </function>
        <function name="to_sql_wstring">
          <type>std::wstring</type>
          <parameter name="d">
            <paramtype>const <classname>date</classname> &amp;</paramtype>
          </parameter>
        </function>
      </namespace>
    </namespace>
  </header>
  <header name="boost/date_time/gregorian/formatters_limited.hpp">
    <namespace name="boost">
      <namespace name="gregorian"/>
    </namespace>
  </header>
  <header name="boost/date_time/gregorian/greg_calendar.hpp">
    <namespace name="boost">
      <namespace name="gregorian">
        <class name="gregorian_calendar">
          <purpose>
            <simpara>Gregorian calendar for this implementation, hard work in the base. </simpara>
          </purpose>
          <typedef name="day_of_week_type">
            <purpose>
              <simpara>Type to hold a weekday (eg: Sunday, Monday,...). </simpara>
            </purpose>
            <type>
              <classname>greg_weekday</classname>
            </type>
          </typedef>
          <typedef name="day_of_year_type">
            <purpose>
              <simpara>Counter type from 1 to 366 for gregorian dates. </simpara>
            </purpose>
            <type>greg_day_of_year_rep</type>
          </typedef>
          <typedef name="date_rep_type">
            <purpose>
              <simpara>Internal date representation that handles infinity, not a date. </simpara>
            </purpose>
            <type>fancy_date_rep</type>
          </typedef>
          <typedef name="date_traits_type">
            <purpose>
              <simpara>Date rep implements the traits stuff as well. </simpara>
            </purpose>
            <type>fancy_date_rep</type>
          </typedef>
        </class>
        <typedef name="fancy_date_rep">
          <purpose>
            <simpara>An internal date representation that includes infinities, not a date. </simpara>
          </purpose>
          <type>date_time::int_adapter&lt; unsigned long &gt;</type>
        </typedef>
      </namespace>
    </namespace>
  </header>
  <header name="boost/date_time/gregorian/greg_date.hpp">
    <namespace name="boost">
      <namespace name="gregorian">
        <class name="date">
          <purpose>
            <simpara>A date type based on gregorian_calendar. </simpara>
          </purpose>
          <description>
            <para>This class is the primary interface for programming with greogorian dates. The is a lightweight type that can be freely passed by value. All comparison operators are supported. </para>
          </description>
          <typedef name="year_type">
            <type>gregorian_calendar::year_type</type>
          </typedef>
          <typedef name="month_type">
            <type>gregorian_calendar::month_type</type>
          </typedef>
          <typedef name="day_type">
            <type>gregorian_calendar::day_type</type>
          </typedef>
          <typedef name="day_of_year_type">
            <type>gregorian_calendar::day_of_year_type</type>
          </typedef>
          <typedef name="ymd_type">
            <type>gregorian_calendar::ymd_type</type>
          </typedef>
          <typedef name="date_rep_type">
            <type>gregorian_calendar::date_rep_type</type>
          </typedef>
          <typedef name="date_int_type">
            <type>gregorian_calendar::date_int_type</type>
          </typedef>
          <typedef name="duration_type">
            <type>date_duration</type>
          </typedef>
          <method-group name="public member functions">
            <method name="julian_day" cv="const">
              <type>date_int_type</type>
              <purpose>
                <simpara>Return the Julian Day number for the date. </simpara>
              </purpose>
            </method>
            <method name="day_of_year" cv="const">
              <type>day_of_year_type</type>
              <purpose>
                <simpara>Return the day of year 1..365 or 1..366 (for leap year). </simpara>
              </purpose>
            </method>
            <method name="modjulian_day" cv="const">
              <type>long</type>
              <purpose>
                <simpara>Return the Modified Julian Day number for the date. </simpara>
              </purpose>
            </method>
            <method name="week_number" cv="const">
              <type>int</type>
              <purpose>
                <simpara>Return the iso 8601 week number 1..53. </simpara>
              </purpose>
            </method>
            <method name="day_number" cv="const">
              <type>date_int_type</type>
              <purpose>
                <simpara>Return the day number from the calendar. </simpara>
              </purpose>
            </method>
          </method-group>
          <constructor>
            <purpose>
              <simpara>Default constructor constructs with not_a_date_time. </simpara>
            </purpose>
          </constructor>
          <constructor>
            <parameter name="y">
              <paramtype>year_type</paramtype>
            </parameter>
            <parameter name="m">
              <paramtype>month_type</paramtype>
            </parameter>
            <parameter name="d">
              <paramtype>day_type</paramtype>
            </parameter>
            <purpose>
              <simpara>Main constructor with year, month, day. </simpara>
            </purpose>
          </constructor>
          <constructor>
            <parameter name="ymd">
              <paramtype>const ymd_type &amp;</paramtype>
            </parameter>
            <purpose>
              <simpara>Constructor from a ymd_type structure. </simpara>
            </purpose>
          </constructor>
          <constructor>
            <parameter name="rhs">
              <paramtype>const date_int_type &amp;</paramtype>
            </parameter>
            <purpose>
              <simpara>Needed copy constructor. </simpara>
            </purpose>
          </constructor>
          <constructor>
            <parameter name="rhs">
              <paramtype>date_rep_type</paramtype>
            </parameter>
            <purpose>
              <simpara>Needed copy constructor. </simpara>
            </purpose>
          </constructor>
          <constructor>
            <parameter name="sv">
              <paramtype>special_values</paramtype>
            </parameter>
            <purpose>
              <simpara>Constructor for infinities, not a date, max and min date. </simpara>
            </purpose>
          </constructor>
        </class>
      </namespace>
    </namespace>
  </header>
  <header name="boost/date_time/gregorian/greg_day.hpp">
    <namespace name="boost">
      <namespace name="gregorian">
        <struct name="bad_day_of_month">
          <purpose>
            <simpara>Exception type for gregorian day of month (1..31). </simpara>
          </purpose>
          <method-group name="public member functions"/>
          <constructor/>
          <constructor>
            <parameter name="s">
              <paramtype>const std::string &amp;</paramtype>
            </parameter>
            <purpose>
              <simpara>Allow other classes to throw with unique string for bad day like Feb 29. </simpara>
            </purpose>
          </constructor>
        </struct>
        <class name="greg_day">
          <purpose>
            <simpara>Represent a day of the month (range 1 - 31). </simpara>
          </purpose>
          <description>
            <para>This small class allows for simple conversion an integer value into a day of the month for a standard gregorian calendar. The type is automatically range checked so values outside of the range 1-31 will cause a bad_day_of_month exception </para>
          </description>
          <method-group name="public member functions">
            <method name="as_number" cv="const">
              <type>unsigned short</type>
            </method>
            <method name="conversion-operator" cv="const">
              <type>unsigned short</type>
            </method>
          </method-group>
          <constructor>
            <parameter name="day_of_month">
              <paramtype>unsigned short</paramtype>
            </parameter>
          </constructor>
        </class>
        <typedef name="greg_day_policies">
          <purpose>
            <simpara>Policy class that declares error handling and day of month ranges. </simpara>
          </purpose>
          <type>CV::simple_exception_policy&lt; unsigned short, 1, 31, <classname>bad_day_of_month</classname> &gt;</type>
        </typedef>
        <typedef name="greg_day_rep">
          <purpose>
            <simpara>Generated represetation for gregorian day of month. </simpara>
          </purpose>
          <type>CV::constrained_value&lt; greg_day_policies &gt;</type>
        </typedef>
      </namespace>
    </namespace>
  </header>
  <header name="boost/date_time/gregorian/greg_day_of_year.hpp">
    <namespace name="boost">
      <namespace name="gregorian">
        <struct name="bad_day_of_year">
          <purpose>
            <simpara>Exception type for day of year (1..366). </simpara>
          </purpose>
          <method-group name="public member functions"/>
          <constructor/>
        </struct>
        <typedef name="greg_day_of_year_policies">
          <purpose>
            <simpara>A day of the year range (1..366). </simpara>
          </purpose>
          <type>CV::simple_exception_policy&lt; unsigned short, 1, 366, <classname>bad_day_of_year</classname> &gt;</type>
        </typedef>
        <typedef name="greg_day_of_year_rep">
          <purpose>
            <simpara>Define a range representation type for the day of the year 1..366. </simpara>
          </purpose>
          <type>CV::constrained_value&lt; greg_day_of_year_policies &gt;</type>
        </typedef>
      </namespace>
    </namespace>
  </header>
  <header name="boost/date_time/gregorian/greg_duration.hpp">
    <namespace name="boost">
      <namespace name="gregorian">
        <typedef name="date_duration_rep">
          <purpose>
            <simpara>An internal date representation that includes infinities, not a date. </simpara>
          </purpose>
          <type>boost::date_time::duration_traits_adapted</type>
        </typedef>
        <typedef name="date_duration">
          <purpose>
            <simpara>Durations in days for gregorian system. </simpara>
          </purpose>
          <type>date_time::date_duration&lt; date_duration_rep &gt;</type>
        </typedef>
        <typedef name="days">
          <purpose>
            <simpara>Shorthand for date_duration. </simpara>
          </purpose>
          <type>date_duration</type>
        </typedef>
      </namespace>
    </namespace>
  </header>
  <header name="boost/date_time/gregorian/greg_duration_types.hpp">
    <namespace name="boost">
      <namespace name="gregorian">
        <struct name="greg_durations_config">
          <purpose>
            <simpara>config struct for additional duration types (ie months_duration&lt;&gt; &amp; years_duration&lt;&gt;) </simpara>
          </purpose>
          <typedef name="date_type">
            <type>
              <classname>date</classname>
            </type>
          </typedef>
          <typedef name="int_rep">
            <type>date_time::int_adapter&lt; int &gt;</type>
          </typedef>
          <typedef name="month_adjustor_type">
            <type>date_time::month_functor&lt; <classname>date_type</classname> &gt;</type>
          </typedef>
        </struct>
        <typedef name="months">
          <type>date_time::months_duration&lt; <classname>greg_durations_config</classname> &gt;</type>
        </typedef>
        <typedef name="years">
          <type>date_time::years_duration&lt; <classname>greg_durations_config</classname> &gt;</type>
        </typedef>
        <typedef name="weeks">
          <type>date_time::weeks_duration&lt; date_time::duration_traits_adapted &gt;</type>
        </typedef>
      </namespace>
    </namespace>
  </header>
  <header name="boost/date_time/gregorian/greg_facet.hpp">
    <namespace name="boost">
      <namespace name="gregorian">
        <struct name="greg_facet_config">
          <purpose>
            <simpara>Configuration of the output facet template. </simpara>
          </purpose>
          <typedef name="month_type">
            <type>
              <classname>boost::gregorian::greg_month</classname>
            </type>
          </typedef>
          <typedef name="special_value_enum">
            <type>boost::date_time::special_values</type>
          </typedef>
          <typedef name="month_enum">
            <type>boost::gregorian::months_of_year</type>
          </typedef>
          <typedef name="weekday_enum">
            <type>boost::date_time::weekdays</type>
          </typedef>
        </struct>
        <typedef name="greg_base_facet">
          <purpose>
            <simpara>Create the base facet type for gregorian::date. </simpara>
          </purpose>
          <type>boost::date_time::date_names_put&lt; <classname>greg_facet_config</classname> &gt;</type>
        </typedef>
        <function name="operator&lt;&lt;">
          <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
          <template>
          <template-type-parameter name="charT"/>
          <template-type-parameter name="traits"/>
        </template>
          <parameter name="os">
            <paramtype>std::basic_ostream&lt; charT, traits &gt; &amp;</paramtype>
          </parameter>
          <parameter name="d">
            <paramtype>const <classname>date</classname> &amp;</paramtype>
          </parameter>
          <purpose>
            <simpara>ostream operator for gregorian::date </simpara>
          </purpose>
          <description>
            <para>Uses the date facet to determine various output parameters including:<itemizedlist>
<listitem><para>string values for the month (eg: Jan, Feb, Mar) (default: English)</para></listitem><listitem><para>string values for special values (eg: not-a-date-time) (default: English)</para></listitem><listitem><para>selection of long, short strings, or numerical month representation (default: short string)</para></listitem><listitem><para>month day year order (default yyyy-mmm-dd) </para></listitem></itemizedlist>
</para>
          </description>
        </function>
        <function name="operator&lt;&lt;">
          <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
          <template>
          <template-type-parameter name="charT"/>
          <template-type-parameter name="traits"/>
        </template>
          <parameter name="os">
            <paramtype>std::basic_ostream&lt; charT, traits &gt; &amp;</paramtype>
          </parameter>
          <parameter name="m">
            <paramtype>const <classname>greg_month</classname> &amp;</paramtype>
          </parameter>
          <purpose>
            <simpara>operator&lt;&lt; for gregorian::greg_month typically streaming: Jan, Feb, Mar... </simpara>
          </purpose>
          <description>
            <para>Uses the date facet to determine output string as well as selection of long or short strings. Default if no facet is installed is to output a 2 wide numeric value for the month eg: 01 == Jan, 02 == Feb, ... 12 == Dec. </para>
          </description>
        </function>
        <function name="operator&lt;&lt;">
          <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
          <template>
          <template-type-parameter name="charT"/>
          <template-type-parameter name="traits"/>
        </template>
          <parameter name="os">
            <paramtype>std::basic_ostream&lt; charT, traits &gt; &amp;</paramtype>
          </parameter>
          <parameter name="wd">
            <paramtype>const <classname>greg_weekday</classname> &amp;</paramtype>
          </parameter>
          <purpose>
            <simpara>operator&lt;&lt; for gregorian::greg_weekday typically streaming: Sun, Mon, Tue, ... </simpara>
          </purpose>
          <description>
            <para>Uses the date facet to determine output string as well as selection of long or short string. Default if no facet is installed is to output a 3 char english string for the day of the week. </para>
          </description>
        </function>
        <function name="operator&lt;&lt;">
          <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
          <template>
          <template-type-parameter name="charT"/>
          <template-type-parameter name="traits"/>
        </template>
          <parameter name="os">
            <paramtype>std::basic_ostream&lt; charT, traits &gt; &amp;</paramtype>
          </parameter>
          <parameter name="dp">
            <paramtype>const date_period &amp;</paramtype>
          </parameter>
          <purpose>
            <simpara>operator&lt;&lt; for gregorian::date_period typical output: [2002-Jan-01/2002-Jan-31] </simpara>
          </purpose>
          <description>
            <para>Uses the date facet to determine output string as well as selection of long or short string fr dates. Default if no facet is installed is to output a 3 char english string for the day of the week. </para>
          </description>
        </function>
        <function name="operator&lt;&lt;">
          <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
          <template>
          <template-type-parameter name="charT"/>
          <template-type-parameter name="traits"/>
        </template>
          <parameter name="os">
            <paramtype>std::basic_ostream&lt; charT, traits &gt; &amp;</paramtype>
          </parameter>
          <parameter name="dd">
            <paramtype>const date_duration &amp;</paramtype>
          </parameter>
        </function>
        <function name="operator&lt;&lt;">
          <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
          <template>
          <template-type-parameter name="charT"/>
          <template-type-parameter name="traits"/>
        </template>
          <parameter name="os">
            <paramtype>std::basic_ostream&lt; charT, traits &gt; &amp;</paramtype>
          </parameter>
          <parameter name="pd">
            <paramtype>const partial_date &amp;</paramtype>
          </parameter>
          <purpose>
            <simpara>operator&lt;&lt; for gregorian::partial_date. Output: "Jan 1" </simpara>
          </purpose>
        </function>
        <function name="operator&lt;&lt;">
          <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
          <template>
          <template-type-parameter name="charT"/>
          <template-type-parameter name="traits"/>
        </template>
          <parameter name="os">
            <paramtype>std::basic_ostream&lt; charT, traits &gt; &amp;</paramtype>
          </parameter>
          <parameter name="nkd">
            <paramtype>const nth_kday_of_month &amp;</paramtype>
          </parameter>
          <purpose>
            <simpara>operator&lt;&lt; for gregorian::nth_kday_of_month. Output: "first Mon of Jun" </simpara>
          </purpose>
        </function>
        <function name="operator&lt;&lt;">
          <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
          <template>
          <template-type-parameter name="charT"/>
          <template-type-parameter name="traits"/>
        </template>
          <parameter name="os">
            <paramtype>std::basic_ostream&lt; charT, traits &gt; &amp;</paramtype>
          </parameter>
          <parameter name="fkd">
            <paramtype>const first_kday_of_month &amp;</paramtype>
          </parameter>
          <purpose>
            <simpara>operator&lt;&lt; for gregorian::first_kday_of_month. Output: "first Mon of Jun" </simpara>
          </purpose>
        </function>
        <function name="operator&lt;&lt;">
          <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
          <template>
          <template-type-parameter name="charT"/>
          <template-type-parameter name="traits"/>
        </template>
          <parameter name="os">
            <paramtype>std::basic_ostream&lt; charT, traits &gt; &amp;</paramtype>
          </parameter>
          <parameter name="lkd">
            <paramtype>const last_kday_of_month &amp;</paramtype>
          </parameter>
          <purpose>
            <simpara>operator&lt;&lt; for gregorian::last_kday_of_month. Output: "last Mon of Jun" </simpara>
          </purpose>
        </function>
        <function name="operator&lt;&lt;">
          <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
          <template>
          <template-type-parameter name="charT"/>
          <template-type-parameter name="traits"/>
        </template>
          <parameter name="os">
            <paramtype>std::basic_ostream&lt; charT, traits &gt; &amp;</paramtype>
          </parameter>
          <parameter name="fka">
            <paramtype>const first_kday_after &amp;</paramtype>
          </parameter>
          <purpose>
            <simpara>operator&lt;&lt; for gregorian::first_kday_after. Output: "first Mon after" </simpara>
          </purpose>
        </function>
        <function name="operator&lt;&lt;">
          <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
          <template>
          <template-type-parameter name="charT"/>
          <template-type-parameter name="traits"/>
        </template>
          <parameter name="os">
            <paramtype>std::basic_ostream&lt; charT, traits &gt; &amp;</paramtype>
          </parameter>
          <parameter name="fkb">
            <paramtype>const first_kday_before &amp;</paramtype>
          </parameter>
          <purpose>
            <simpara>operator&lt;&lt; for gregorian::first_kday_before. Output: "first Mon before" </simpara>
          </purpose>
        </function>
        <function name="operator&gt;&gt;">
          <type>std::basic_istream&lt; charT &gt; &amp;</type>
          <template>
          <template-type-parameter name="charT"/>
        </template>
          <parameter name="is">
            <paramtype>std::basic_istream&lt; charT &gt; &amp;</paramtype>
          </parameter>
          <parameter name="d">
            <paramtype><classname>date</classname> &amp;</paramtype>
          </parameter>
          <purpose>
            <simpara>operator&gt;&gt; for gregorian::date </simpara>
          </purpose>
        </function>
        <function name="operator&gt;&gt;">
          <type>std::basic_istream&lt; charT &gt; &amp;</type>
          <template>
          <template-type-parameter name="charT"/>
        </template>
          <parameter name="is">
            <paramtype>std::basic_istream&lt; charT &gt; &amp;</paramtype>
          </parameter>
          <parameter name="dd">
            <paramtype>date_duration &amp;</paramtype>
          </parameter>
          <purpose>
            <simpara>operator&gt;&gt; for gregorian::date_duration </simpara>
          </purpose>
        </function>
        <function name="operator&gt;&gt;">
          <type>std::basic_istream&lt; charT &gt; &amp;</type>
          <template>
          <template-type-parameter name="charT"/>
        </template>
          <parameter name="is">
            <paramtype>std::basic_istream&lt; charT &gt; &amp;</paramtype>
          </parameter>
          <parameter name="dp">
            <paramtype>date_period &amp;</paramtype>
          </parameter>
          <purpose>
            <simpara>operator&gt;&gt; for gregorian::date_period </simpara>
          </purpose>
        </function>
        <function name="generate_locale">
          <type>BOOST_DATE_TIME_DECL std::locale</type>
          <parameter name="loc">
            <paramtype>std::locale &amp;</paramtype>
          </parameter>
          <parameter name="type">
            <paramtype>char</paramtype>
          </parameter>
          <purpose>
            <simpara>generates a locale with the set of gregorian name-strings of type char* </simpara>
          </purpose>
        </function>
        <function name="create_facet_def">
          <type>BOOST_DATE_TIME_DECL boost::date_time::all_date_names_put&lt; <classname>greg_facet_config</classname>, char &gt; *</type>
          <parameter name="type">
            <paramtype>char</paramtype>
          </parameter>
          <purpose>
            <simpara>Returns a pointer to a facet with a default set of names (English). </simpara>
          </purpose>
        </function>
        <function name="generate_locale">
          <type>BOOST_DATE_TIME_DECL std::locale</type>
          <parameter name="loc">
            <paramtype>std::locale &amp;</paramtype>
          </parameter>
          <parameter name="type">
            <paramtype>wchar_t</paramtype>
          </parameter>
          <purpose>
            <simpara>generates a locale with the set of gregorian name-strings of type wchar_t* </simpara>
          </purpose>
        </function>
        <function name="create_facet_def">
          <type>BOOST_DATE_TIME_DECL boost::date_time::all_date_names_put&lt; <classname>greg_facet_config</classname>, wchar_t &gt; *</type>
          <parameter name="type">
            <paramtype>wchar_t</paramtype>
          </parameter>
          <purpose>
            <simpara>Returns a pointer to a facet with a default set of names (English). </simpara>
          </purpose>
        </function>
        <function name="operator&gt;&gt;">
          <type>std::basic_istream&lt; charT &gt; &amp;</type>
          <template>
          <template-type-parameter name="charT"/>
        </template>
          <parameter name="is">
            <paramtype>std::basic_istream&lt; charT &gt; &amp;</paramtype>
          </parameter>
          <parameter name="m">
            <paramtype><classname>greg_month</classname> &amp;</paramtype>
          </parameter>
          <purpose>
            <simpara>operator&gt;&gt; for gregorian::greg_month - throws exception if invalid month given </simpara>
          </purpose>
        </function>
        <function name="operator&gt;&gt;">
          <type>std::basic_istream&lt; charT &gt; &amp;</type>
          <template>
          <template-type-parameter name="charT"/>
        </template>
          <parameter name="is">
            <paramtype>std::basic_istream&lt; charT &gt; &amp;</paramtype>
          </parameter>
          <parameter name="wd">
            <paramtype><classname>greg_weekday</classname> &amp;</paramtype>
          </parameter>
          <purpose>
            <simpara>operator&gt;&gt; for gregorian::greg_weekday - throws exception if invalid weekday given </simpara>
          </purpose>
        </function>
      </namespace>
    </namespace>
  </header>
  <header name="boost/date_time/gregorian/greg_month.hpp">
    <namespace name="boost">
      <namespace name="gregorian">
        <struct name="bad_month">
          <purpose>
            <simpara>Exception thrown if a greg_month is constructed with a value out of range. </simpara>
          </purpose>
          <method-group name="public member functions"/>
          <constructor/>
        </struct>
        <class name="greg_month">
          <purpose>
            <simpara>Wrapper class to represent months in gregorian based calendar. </simpara>
          </purpose>
          <typedef name="month_enum">
            <type>date_time::months_of_year</type>
          </typedef>
          <typedef name="month_map_type">
            <type>std::map&lt; std::string, unsigned short &gt;</type>
          </typedef>
          <typedef name="month_map_ptr_type">
            <type>boost::shared_ptr&lt; month_map_type &gt;</type>
          </typedef>
          <method-group name="public member functions">
            <method name="conversion-operator" cv="const">
              <type>unsigned short</type>
              <purpose>
                <simpara>Convert the value back to a short. </simpara>
              </purpose>
            </method>
            <method name="as_number" cv="const">
              <type>unsigned short</type>
              <purpose>
                <simpara>Returns month as number from 1 to 12. </simpara>
              </purpose>
            </method>
            <method name="as_enum" cv="const">
              <type>month_enum</type>
            </method>
            <method name="as_short_string" cv="const">
              <type>const char *</type>
            </method>
            <method name="as_long_string" cv="const">
              <type>const char *</type>
            </method>
            <method name="as_short_wstring" cv="const">
              <type>const wchar_t *</type>
            </method>
            <method name="as_long_wstring" cv="const">
              <type>const wchar_t *</type>
            </method>
            <method name="as_short_string" cv="const">
              <type>const char *</type>
              <parameter name="">
                <paramtype>char</paramtype>
              </parameter>
            </method>
            <method name="as_long_string" cv="const">
              <type>const char *</type>
              <parameter name="">
                <paramtype>char</paramtype>
              </parameter>
            </method>
            <method name="as_short_string" cv="const">
              <type>const wchar_t *</type>
              <parameter name="">
                <paramtype>wchar_t</paramtype>
              </parameter>
            </method>
            <method name="as_long_string" cv="const">
              <type>const wchar_t *</type>
              <parameter name="">
                <paramtype>wchar_t</paramtype>
              </parameter>
            </method>
          </method-group>
          <constructor>
            <parameter name="theMonth">
              <paramtype>month_enum</paramtype>
            </parameter>
            <purpose>
              <simpara>Construct a month from the months_of_year enumeration. </simpara>
            </purpose>
          </constructor>
          <constructor>
            <parameter name="theMonth">
              <paramtype>unsigned short</paramtype>
            </parameter>
            <purpose>
              <simpara>Construct from a short value. </simpara>
            </purpose>
          </constructor>
          <method-group name="public static functions">
            <method name="get_month_map_ptr" cv="">
              <type>month_map_ptr_type</type>
              <purpose>
                <simpara>Shared pointer to a map of Month strings (Names &amp; Abbrev) &amp; numbers. </simpara>
              </purpose>
            </method>
          </method-group>
        </class>
        <typedef name="months_of_year">
          <type>date_time::months_of_year</type>
        </typedef>
        <typedef name="greg_month_policies">
          <purpose>
            <simpara>Build a policy class for the greg_month_rep. </simpara>
          </purpose>
          <type>CV::simple_exception_policy&lt; unsigned short, 1, 12, <classname>bad_month</classname> &gt;</type>
        </typedef>
        <typedef name="greg_month_rep">
          <purpose>
            <simpara>A constrained range that implements the gregorian_month rules. </simpara>
          </purpose>
          <type>CV::constrained_value&lt; greg_month_policies &gt;</type>
        </typedef>
      </namespace>
    </namespace>
  </header>
  <header name="boost/date_time/gregorian/greg_serialize.hpp"/>
  <header name="boost/date_time/gregorian/greg_weekday.hpp">
    <namespace name="boost">
      <namespace name="gregorian">
        <struct name="bad_weekday">
          <purpose>
            <simpara>Exception that flags that a weekday number is incorrect. </simpara>
          </purpose>
          <method-group name="public member functions"/>
          <constructor/>
        </struct>
        <class name="greg_weekday">
          <purpose>
            <simpara>Represent a day within a week (range 0==Sun to 6==Sat). </simpara>
          </purpose>
          <typedef name="weekday_enum">
            <type>boost::date_time::weekdays</type>
          </typedef>
          <method-group name="public member functions">
            <method name="as_number" cv="const">
              <type>unsigned short</type>
            </method>
            <method name="as_short_string" cv="const">
              <type>const char *</type>
            </method>
            <method name="as_long_string" cv="const">
              <type>const char *</type>
            </method>
            <method name="as_short_wstring" cv="const">
              <type>const wchar_t *</type>
            </method>
            <method name="as_long_wstring" cv="const">
              <type>const wchar_t *</type>
            </method>
            <method name="as_enum" cv="const">
              <type>weekday_enum</type>
            </method>
          </method-group>
          <constructor>
            <parameter name="day_of_week_num">
              <paramtype>unsigned short</paramtype>
            </parameter>
          </constructor>
        </class>
        <typedef name="greg_weekday_policies">
          <type>CV::simple_exception_policy&lt; unsigned short, 0, 6, <classname>bad_weekday</classname> &gt;</type>
        </typedef>
        <typedef name="greg_weekday_rep">
          <type>CV::constrained_value&lt; greg_weekday_policies &gt;</type>
        </typedef>
      </namespace>
    </namespace>
  </header>
  <header name="boost/date_time/gregorian/greg_year.hpp">
    <namespace name="boost">
      <namespace name="gregorian">
        <struct name="bad_year">
          <purpose>
            <simpara>Exception type for gregorian year. </simpara>
          </purpose>
          <method-group name="public member functions"/>
          <constructor/>
        </struct>
        <class name="greg_year">
          <purpose>
            <simpara>Represent a day of the month (range 1900 - 10000). </simpara>
          </purpose>
          <description>
            <para>This small class allows for simple conversion an integer value into a year for the gregorian calendar. This currently only allows a range of 1900 to 10000. Both ends of the range are a bit arbitrary at the moment, but they are the limits of current testing of the library. As such they may be increased in the future. </para>
          </description>
          <method-group name="public member functions">
            <method name="conversion-operator" cv="const">
              <type>unsigned short</type>
            </method>
          </method-group>
          <constructor>
            <parameter name="year">
              <paramtype>unsigned short</paramtype>
            </parameter>
          </constructor>
        </class>
        <typedef name="greg_year_policies">
          <purpose>
            <simpara>Policy class that declares error handling gregorian year type. </simpara>
          </purpose>
          <type>CV::simple_exception_policy&lt; unsigned short, 1400, 10000, <classname>bad_year</classname> &gt;</type>
        </typedef>
        <typedef name="greg_year_rep">
          <purpose>
            <simpara>Generated representation for gregorian year. </simpara>
          </purpose>
          <type>CV::constrained_value&lt; greg_year_policies &gt;</type>
        </typedef>
      </namespace>
    </namespace>
  </header>
  <header name="boost/date_time/gregorian/greg_ymd.hpp">
    <namespace name="boost">
      <namespace name="gregorian">
        <typedef name="greg_year_month_day">
          <type>date_time::year_month_day_base&lt; <classname>greg_year</classname>, <classname>greg_month</classname>, <classname>greg_day</classname> &gt;</type>
        </typedef>
      </namespace>
    </namespace>
  </header>
  <header name="boost/date_time/gregorian/gregorian.hpp">
    <para>Single file header that provides overall include for all elements of the gregorian date-time system. This includes the various types defined, but also other functions for formatting and parsing.</para>
  </header>
  <header name="boost/date_time/gregorian/gregorian_types.hpp">
    <para>Single file header that defines most of the types for the gregorian date-time system.</para>
    <namespace name="boost">
      <namespace name="gregorian">
        <typedef name="date_period">
          <purpose>
            <simpara>Date periods for the gregorian system. </simpara>
          </purpose>
          <type>date_time::period&lt; <classname>date</classname>, date_duration &gt;</type>
        </typedef>
        <typedef name="year_based_generator">
          <purpose>
            <simpara>A unifying date_generator base type. </simpara>
          </purpose>
          <description>
            <para>A unifying date_generator base type for: partial_date, nth_day_of_the_week_in_month, first_day_of_the_week_in_month, and last_day_of_the_week_in_month </para>
          </description>
          <type>date_time::year_based_generator&lt; <classname>date</classname> &gt;</type>
        </typedef>
        <typedef name="partial_date">
          <purpose>
            <simpara>A date generation object type. </simpara>
          </purpose>
          <type>date_time::partial_date&lt; <classname>date</classname> &gt;</type>
        </typedef>
        <typedef name="nth_kday_of_month">
          <type>date_time::nth_kday_of_month&lt; <classname>date</classname> &gt;</type>
        </typedef>
        <typedef name="nth_day_of_the_week_in_month">
          <type>nth_kday_of_month</type>
        </typedef>
        <typedef name="first_kday_of_month">
          <type>date_time::first_kday_of_month&lt; <classname>date</classname> &gt;</type>
        </typedef>
        <typedef name="first_day_of_the_week_in_month">
          <type>first_kday_of_month</type>
        </typedef>
        <typedef name="last_kday_of_month">
          <type>date_time::last_kday_of_month&lt; <classname>date</classname> &gt;</type>
        </typedef>
        <typedef name="last_day_of_the_week_in_month">
          <type>last_kday_of_month</type>
        </typedef>
        <typedef name="first_kday_after">
          <type>date_time::first_kday_after&lt; <classname>date</classname> &gt;</type>
        </typedef>
        <typedef name="first_day_of_the_week_after">
          <type>first_kday_after</type>
        </typedef>
        <typedef name="first_kday_before">
          <type>date_time::first_kday_before&lt; <classname>date</classname> &gt;</type>
        </typedef>
        <typedef name="first_day_of_the_week_before">
          <type>first_kday_before</type>
        </typedef>
        <typedef name="day_clock">
          <purpose>
            <simpara>A clock to get the current day from the local computer. </simpara>
          </purpose>
          <type>date_time::day_clock&lt; <classname>date</classname> &gt;</type>
        </typedef>
        <typedef name="date_iterator">
          <purpose>
            <simpara>Base date_iterator type for gregorian types. </simpara>
          </purpose>
          <type>date_time::date_itr_base&lt; <classname>date</classname> &gt;</type>
        </typedef>
        <typedef name="day_iterator">
          <purpose>
            <simpara>A day level iterator. </simpara>
          </purpose>
          <type>date_time::date_itr&lt; date_time::day_functor&lt; <classname>date</classname> &gt;, <classname>date</classname> &gt;</type>
        </typedef>
        <typedef name="week_iterator">
          <purpose>
            <simpara>A week level iterator. </simpara>
          </purpose>
          <type>date_time::date_itr&lt; date_time::week_functor&lt; <classname>date</classname> &gt;, <classname>date</classname> &gt;</type>
        </typedef>
        <typedef name="month_iterator">
          <purpose>
            <simpara>A month level iterator. </simpara>
          </purpose>
          <type>date_time::date_itr&lt; date_time::month_functor&lt; <classname>date</classname> &gt;, <classname>date</classname> &gt;</type>
        </typedef>
        <typedef name="year_iterator">
          <purpose>
            <simpara>A year level iterator. </simpara>
          </purpose>
          <type>date_time::date_itr&lt; date_time::year_functor&lt; <classname>date</classname> &gt;, <classname>date</classname> &gt;</type>
        </typedef>
      </namespace>
    </namespace>
  </header>
  <header name="boost/date_time/gregorian/parsers.hpp">
    <namespace name="boost">
      <namespace name="gregorian">
        <function name="from_string">
          <type>
            <classname>date</classname>
          </type>
          <parameter name="s">
            <paramtype>std::string</paramtype>
          </parameter>
          <purpose>
            <simpara>Deprecated: Use from_simple_string. </simpara>
          </purpose>
        </function>
        <function name="from_simple_string">
          <type>
            <classname>date</classname>
          </type>
          <parameter name="s">
            <paramtype>std::string</paramtype>
          </parameter>
          <purpose>
            <simpara>From delimited date string where with order year-month-day eg: 2002-1-25 or 2003-Jan-25 (full month name is also accepted). </simpara>
          </purpose>
        </function>
        <function name="from_us_string">
          <type>
            <classname>date</classname>
          </type>
          <parameter name="s">
            <paramtype>std::string</paramtype>
          </parameter>
          <purpose>
            <simpara>From delimited date string where with order year-month-day eg: 1-25-2003 or Jan-25-2003 (full month name is also accepted). </simpara>
          </purpose>
        </function>
        <function name="from_uk_string">
          <type>
            <classname>date</classname>
          </type>
          <parameter name="s">
            <paramtype>std::string</paramtype>
          </parameter>
          <purpose>
            <simpara>From delimited date string where with order day-month-year eg: 25-1-2002 or 25-Jan-2003 (full month name is also accepted). </simpara>
          </purpose>
        </function>
        <function name="from_undelimited_string">
          <type>
            <classname>date</classname>
          </type>
          <parameter name="s">
            <paramtype>std::string</paramtype>
          </parameter>
          <purpose>
            <simpara>From iso type date string where with order year-month-day eg: 20020125. </simpara>
          </purpose>
        </function>
        <function name="date_from_iso_string">
          <type>
            <classname>date</classname>
          </type>
          <parameter name="s">
            <paramtype>const std::string &amp;</paramtype>
          </parameter>
          <purpose>
            <simpara>From iso type date string where with order year-month-day eg: 20020125. </simpara>
          </purpose>
        </function>
        <function name="from_stream">
          <type>
            <classname>date</classname>
          </type>
          <template>
          <template-type-parameter name="iterator_type"/>
        </template>
          <parameter name="beg">
            <paramtype>iterator_type</paramtype>
          </parameter>
          <parameter name="end">
            <paramtype>iterator_type</paramtype>
          </parameter>
          <purpose>
            <simpara>Stream should hold a date in the form of: 2002-1-25. Month number, abbrev, or name are accepted. </simpara>
          </purpose>
        </function>
        <function name="date_period_from_string">
          <type>date_period</type>
          <parameter name="s">
            <paramtype>const std::string &amp;</paramtype>
          </parameter>
          <purpose>
            <simpara>Function to parse a date_period from a string (eg: [2003-Oct-31/2003-Dec-25]). </simpara>
          </purpose>
        </function>
        <function name="date_period_from_wstring">
          <type>date_period</type>
          <parameter name="s">
            <paramtype>const std::wstring &amp;</paramtype>
          </parameter>
          <purpose>
            <simpara>Function to parse a date_period from a wstring (eg: [2003-Oct-31/2003-Dec-25]). </simpara>
          </purpose>
        </function>
      </namespace>
    </namespace>
  </header>
</section>

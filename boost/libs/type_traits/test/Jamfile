
subproject libs/type_traits/test ;

# bring in the rules for testing
SEARCH on testing.jam = $(BOOST_BUILD_PATH) ;
include testing.jam ;
    			
rule type-traits-run ( sources + )
{
        return [ 
           run
             # sources
             $(sources)

             # dependencies
             <lib>type_traits_init 
             <lib>../../test/build/boost_unit_test_framework 
         :  # additional args
            --report_level=detailed --build_info=yes --log_level=messages
         :  # test-files
         :  # requirements
            <sysinclude>$(BOOST_ROOT)
         :  # test name
        ] ;
}

lib type_traits_init : init.cpp 
    	: 
        	<sysinclude>$(BOOST_ROOT)
    	: 
;
    
        
test-suite type_traits :

[ type-traits-run add_const_test.cpp ]
[ type-traits-run add_pointer_test.cpp ]
[ type-traits-run add_reference_test.cpp ]
[ type-traits-run add_volatile_test.cpp ]
[ type-traits-run alignment_of_test.cpp ]
[ type-traits-run function_traits_test.cpp ]
[ type-traits-run has_nothrow_assign_test.cpp ]
[ type-traits-run has_nothrow_constructor_test.cpp ]
[ type-traits-run has_nothrow_copy_test.cpp ]
[ type-traits-run has_trivial_assign_test.cpp ]
[ type-traits-run has_trivial_constructor_test.cpp ]
[ type-traits-run has_trivial_copy_test.cpp ]
[ type-traits-run has_trivial_destructor_test.cpp ]
[ type-traits-run is_arithmetic_test.cpp ]
[ type-traits-run is_array_test.cpp ]
[ type-traits-run is_base_and_derived_test.cpp ]
[ type-traits-run is_class_test.cpp ]
[ type-traits-run is_compound_test.cpp ]
[ type-traits-run is_const_test.cpp ]
[ type-traits-run is_convertible_test.cpp ]
[ type-traits-run is_empty_test.cpp ]
[ type-traits-run is_enum_test.cpp ]
[ type-traits-run is_float_test.cpp ]
[ type-traits-run is_function_test.cpp ]
[ type-traits-run is_fundamental_test.cpp ]
[ type-traits-run is_integral_test.cpp ]
[ type-traits-run is_member_function_pointer_test.cpp ]
[ type-traits-run is_member_pointer_test.cpp ]
[ type-traits-run is_object_test.cpp ]
[ type-traits-run is_pod_test.cpp ]
[ type-traits-run is_pointer_test.cpp ]
[ type-traits-run is_polymorphic_test.cpp ]
[ type-traits-run is_reference_test.cpp ]
[ type-traits-run is_same_test.cpp ]
[ type-traits-run is_scalar_test.cpp ]
[ type-traits-run is_stateless_test.cpp ]
[ type-traits-run is_union_test.cpp ]
[ type-traits-run is_void_test.cpp ]
[ type-traits-run is_volatile_test.cpp ]
[ type-traits-run remove_bounds_test.cpp ]
[ type-traits-run remove_const_test.cpp ]
[ type-traits-run remove_cv_test.cpp ]
[ type-traits-run remove_pointer_test.cpp ]
[ type-traits-run remove_reference_test.cpp ]
[ type-traits-run remove_volatile_test.cpp ]
[ type-traits-run tricky_abstract_type_test.cpp ]
[ type-traits-run tricky_add_pointer_test.cpp ]
[ type-traits-run tricky_function_type_test.cpp ]
[ type-traits-run tricky_incomplete_type_test.cpp ]
[ type-traits-run tricky_partial_specialization_test.cpp ]
[ type-traits-run type_with_alignment_test.cpp ]
[ run 

add_const_test.cpp
add_pointer_test.cpp
add_reference_test.cpp
add_volatile_test.cpp
alignment_of_test.cpp
function_traits_test.cpp
has_nothrow_assign_test.cpp
has_nothrow_constructor_test.cpp
has_nothrow_copy_test.cpp
has_trivial_assign_test.cpp
has_trivial_constructor_test.cpp
has_trivial_copy_test.cpp
has_trivial_destructor_test.cpp
is_arithmetic_test.cpp
is_array_test.cpp
is_base_and_derived_test.cpp
is_class_test.cpp
is_compound_test.cpp
is_const_test.cpp
is_convertible_test.cpp
is_empty_test.cpp
is_enum_test.cpp
is_float_test.cpp
is_function_test.cpp
is_fundamental_test.cpp
is_integral_test.cpp
is_member_function_pointer_test.cpp
is_member_pointer_test.cpp
is_object_test.cpp
is_pod_test.cpp
is_pointer_test.cpp
is_polymorphic_test.cpp
is_reference_test.cpp
is_same_test.cpp
is_scalar_test.cpp
is_stateless_test.cpp
is_union_test.cpp
is_void_test.cpp
is_volatile_test.cpp
remove_bounds_test.cpp
remove_const_test.cpp
remove_cv_test.cpp
remove_pointer_test.cpp
remove_reference_test.cpp
remove_volatile_test.cpp
tricky_abstract_type_test.cpp
tricky_add_pointer_test.cpp
tricky_function_type_test.cpp
tricky_incomplete_type_test.cpp
tricky_partial_specialization_test.cpp
type_with_alignment_test.cpp
<lib>type_traits_init
            : 
            : 
            : 
            :
type_traits_all ]

; # type traits suite



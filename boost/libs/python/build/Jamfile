#  (C) Copyright David Abrahams 2001. Permission to copy, use, modify, sell and
#  distribute this software is granted provided this copyright notice appears
#  in all copies. This software is provided "as is" without express or implied
#  warranty, and with no claim as to its suitability for any purpose.
#
# Boost.Python build and test Jamfile
#
# Declares the following targets:
#   1. libboost_python, a static link library to be linked with all
#      Boost.Python modules
#
#   2. pairs of test targets of the form <name>.test and <name>.run
#      <name>.test runs the test when it is out-of-date, and the "all" target
#      depends on it so that it it is built by default. <name>.run runs
#      a test unconditionally, and can be used to force a test to run.. Each
#      test target builds one or more Boost.Python modules and runs a Python
#      script to test them. The test names are:
#
#      from ../test
#
#         comprehensive         - a comprehensive test of Boost.Python features
#
#      from ../example:
#         abstract              -
#         getting_started1      -
#         getting_started2      -
#         simple_vector         -
#         do_it_yourself_convts -
#         pickle1               -
#         pickle2               -
#         pickle3               -
#
#         dvect1                -
#         dvect2                -
#         ivect1                -
#         ivect2                -
#         noncopyable           -
#
# subproject-specific environment/command-line variables:
#
# PYTHON_TEST_ARGS      - specifies arguments to be passed to test scripts on
#                         the command line. "-v" can be useful if you want to
#                         see the output of successful tests.
#
# PYTHON_VECT_ITERATIONS - specifies the number of test iterations to use for
#                          the dvect and ivect tests above.


# declare the location of this subproject relative to the root
subproject libs/python/build ;

# Do some OS-specific setup
if $(NT)
{
    PYTHON_ROOT ?= c:/tools/python ;
    PYTHON_INCLUDES ?= <include>$(PYTHON_ROOT)/include <gcc><*><include>/usr/include/python2.1 ;
    PYTHON_LIBS ?= c:/cygnus/lib/python2.1/config/libpython2.1.dll.a ;
    PYTHON_LIB_PATH = $(PYTHON_ROOT)/libs ;

    # common properties required for compiling any Python module.
    PYTHON_PROPERTIES ?=
        <gcc><*><define>SIZEOF_LONG=4
        <gcc><*><define>USE_DL_IMPORT
        <runtime-link>dynamic
        ;
                        
    SHELL_SET ?= "set " ;
    SHELL_EXPORT ?= ; # shell variables are exported by default
}
else if $(UNIX)
{
    PYTHON_INCLUDES ?= <include>/usr/include/python1.5 ;
    PYTHON_LIBS ?= /usr/lib/python1.5/config/libpython1.5.a ;
    SHELL_SET ?= "" ;
    SHELL_EXPORT ?= "export " ;
}

#######################

#
# Declare the boost python static link library
#

# standard include requirements for anything using Boost.Python
BOOST_PYTHON_INCLUDES = <include>$(BOOST_ROOT) $(PYTHON_INCLUDES) ;

# Base names of the source files for libboost_python
CPP_SOURCES =
    classes conversions extension_class functions 
    init_function module_builder objects types cross_module ;

lib libboost_python : ../src/$(CPP_SOURCES).cpp
    # requirements
    : $(BOOST_PYTHON_INCLUDES)
    <shared-linkable>true
    $(PYTHON_PROPERTIES) ;
    
#######################

# boost-python name : sources : requirements : default-BUILD
#
# Declare a boost python module. Return a list of the DLL files generated.
rule boost-python
{
    # declare a DLL; add the boost python library to sources
     dll $(<) : <lib>libboost_python $(>)
            
            # Requirements
            : $(3) # caller-specified requirements
            
                # standard requirements
                $(BOOST_PYTHON_INCLUDES)
                <msvc><*><library-path>$(PYTHON_LIB_PATH)
                <gcc><*><library-file>$(PYTHON_LIBS)
                $(PYTHON_PROPERTIES)
                
        : $(4) ;                      # pass on the default-BUILD, if any
}

#######################

# boost-python-test target : python-script sources : requirements : local-build : args
#
# declare two python module tests: $(<).test which builds when out-of-date, and
# $(<).run which builds unconditionally.
rule boost-python-test
{
    # tell Jam that the python script is relative to this directory
    SEARCH on $(>[1]) = $(SEARCH_SOURCE) ;
    
    # required command-line args can be specified in argument 5
    # The user can add additional arguments in PYTHON_TEST_ARGS.
    local gPYTHON_TEST_ARGS = $(5) $(PYTHON_TEST_ARGS) ;
    
    # declare the two subsidiary tests.
    declare-local-target $(<:S=.test) : $(>) : $(PYTHON_PROPERTIES) : $(4) : PYTHON_TEST ;
    declare-local-target $(<:S=.run) : $(>) : $(PYTHON_PROPERTIES) : $(4) : PYTHON_RUNTEST ;
}

# how do we invoke python?
PYTHON ?= python ;

# special rules for two new target types: PYTHON_TEST and PYTHON_RUNTEST.
# These are identical except that PYTHON_TEST runs the test when out-of-date, and
# PYTHON_RUNTEST runs the test unconditionally. These are used by boost-python-test.
SUFPYTHON_TEST = .test ;
gGENERATOR_FUNCTION(PYTHON_TEST) = python-test-target ;
rule python-test-target # test-target : sources : 
{
    python-test-aux $(<) : $(>) ;
    Clean clean : $(<) ; # remove the test-target as part of any clean operation
    type-DEPENDS test : $(<) ;
    MakeLocate $(<) : $(LOCATE_TARGET) ;
}
actions python-test-target
{
    $(SHELL_SET)PYTHONPATH=$(PYTHONPATH)
    $(SHELL_EXPORT)PYTHONPATH
    $(PYTHON) "$(>)" $(ARGS) > "$(<)"
}

SUFPYTHON_RUNTEST = .run ;
gGENERATOR_FUNCTION(PYTHON_RUNTEST) = python-runtest-target ;
rule python-runtest-target # test-target : sources : 
{
    python-test-aux $(<) : $(>) ;
    NOTFILE $(<) ;
    ALWAYS $(<) ;
}
actions python-runtest-target
{
    $(SHELL_SET)PYTHONPATH=$(PYTHONPATH)
    $(SHELL_EXPORT)PYTHONPATH
    $(PYTHON) "$(>)" $(ARGS)
}

rule python-test-aux # target : sources
{
    DEPENDS $(<) : $(>) ;

    ARGS on $(<) += $(gPYTHON_TEST_ARGS) ;
    
    # Some tests need an extra command-line arg if built with
    # msvc. Checking the target grist is a cheap way to
    # find out. 
    switch $(<)
    {
        case <*\\\\msvc\\\\*>* : ARGS on $(<) += --broken-auto-ptr ;
    }

    # compute the PYTHONPATH environment variable that will allow the test to
    # find all of the modules on which it depends.
    PYTHONPATH on $(<) = [ join
        $(gLOCATE($(>[1])))                     # location of python test file
        $(gRUN_PATH($(<)))                      # location of module dependencies
        [ join-path $(TOP) libs python test ]   # location of doctest
        $(PYTHONPATH)                           # base PYTHONPATH from environment
        : $(SPLITPATH) ] ;                      # platform path separator
}

############# comprehensive module and test ###########
boost-python boost_python_test : ../test/comprehensive.cpp ;
boost-python-test comprehensive : [ join-path $(DOTDOT) test comprehensive.py ] <lib>boost_python_test ;

############# simple tests from ../example ############

rule boost-python-example-test
{
    boost-python $(<) : ../example/$(<).cpp ;
    boost-python-test $(<) : [ join-path $(DOTDOT) example test_$(<).py ] <lib>$(<) ;
}


boost-python-example-test abstract ;
boost-python-example-test getting_started1 ;
boost-python-example-test getting_started2 ;
boost-python-example-test simple_vector ;
boost-python-example-test do_it_yourself_convts ;
boost-python-example-test pickle1 ;
boost-python-example-test pickle2 ;
boost-python-example-test pickle3 ;


boost-python ivect : ../example/ivect.cpp ;
boost-python dvect : ../example/dvect.cpp ;
boost-python noncopyable_export : ../example/noncopyable_export.cpp ;
boost-python noncopyable_import : ../example/noncopyable_import.cpp ;

############## cross-module tests from ../example ##########

# A simple rule to build a test which depends on multiple modules in the PYTHONPATH
rule boost-python-multi-example-test # test-name : python-file libs
{
    boost-python-test $(<) : ../example/tst_$(<).py <lib>$(>) : : : $(PYTHON_VECT_ITERATIONS) ;
}
PYTHON_VECT_ITERATIONS ?= 10 ;

boost-python-multi-example-test dvect1 : ivect dvect ;
boost-python-multi-example-test dvect2 : ivect dvect ;

boost-python-multi-example-test ivect1 : ivect dvect ;
boost-python-multi-example-test ivect2 : ivect dvect ;

boost-python-multi-example-test noncopyable : noncopyable_import noncopyable_export ;


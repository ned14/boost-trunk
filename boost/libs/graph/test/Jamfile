subproject libs/graph/test ;

import testing ;

# Define SGB (stanford graph base top level directory) and 
# LEDA (also top level directory) at the command line of jam using -s

unit-test transitive_closure_test : transitive_closure_test.cpp : <sysinclude>$(BOOST_ROOT) ;

compile adj_list_cc.cpp : <sysinclude>$(BOOST_ROOT)  ;

# adj_list_test needs some work -JGS
# unit-test adj_list_test : adj_list_test.cpp : <sysinclude>$(BOOST_ROOT)  ;
compile adj_matrix_cc.cpp : <sysinclude>$(BOOST_ROOT)  ;

unit-test bfs : bfs.cpp <lib>../../test/build/boost_test_exec_monitor : <sysinclude>$(BOOST_ROOT)  ;

compile bfs_cc.cpp : <sysinclude>$(BOOST_ROOT)  ;

unit-test dfs : dfs.cpp <lib>../../test/build/boost_test_exec_monitor : <sysinclude>$(BOOST_ROOT)  ;

compile dfs_cc.cpp : <sysinclude>$(BOOST_ROOT)  ;

compile dijkstra_cc.cpp : <sysinclude>$(BOOST_ROOT)  ;

compile edge_list_cc.cpp : <sysinclude>$(BOOST_ROOT)  ;

compile filtered_graph_cc.cpp : <sysinclude>$(BOOST_ROOT)  ;

unit-test graph : graph.cpp : <sysinclude>$(BOOST_ROOT)  ;

compile graph_concepts.cpp : <sysinclude>$(BOOST_ROOT)  ;

compile reverse_graph_cc.cpp : <sysinclude>$(BOOST_ROOT)  ;


unit-test subgraph : subgraph.cpp <lib>../../test/build/boost_test_exec_monitor : <sysinclude>$(BOOST_ROOT)  ;

unit-test isomorphism : isomorphism.cpp <lib>../../test/build/boost_test_exec_monitor : <sysinclude>$(BOOST_ROOT)  ;

compile vector_graph_cc.cpp : <sysinclude>$(BOOST_ROOT)  ;

compile copy.cpp : <sysinclude>$(BOOST_ROOT) ;


# Run SDB tests only when -sSDB= is set.
if $(SDB) != ""
{
    local SDB_DEPENDCIES =
        <include>$(SGB) <library-file>$(SGB)/libgb.a  ;

    compile stanford_graph_cc.cpp : <sysinclude>$(BOOST_ROOT) 
        $(SDB_DEPENDCIES)  ;
}

# Run LEDA tests only when -sLEDA= is set.
if $(LEDA) != ""
{
     local LEDA_DEPENDENCIES = 
        <include>$(LEDA)/incl 
        <library-file>$(LEDA)/libG.a
        ;

    compile leda_graph_cc.cpp : <sysinclude>$(BOOST_ROOT)  
       $(LEDA_DEPENDENCIES) ;
}

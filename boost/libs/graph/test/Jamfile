subproject libs/graph/test ;

# Define SGB (stanford graph base top level directory) and 
# LEDA (also top level directory) at the command line of jam using -s

exe transitive_closure_test : transitive_closure_test.cpp : <include>$(BOOST_ROOT) : debug ;

exe adj_list_cc : adj_list_cc.cpp : <include>$(BOOST_ROOT) : debug ;
exe adj_list_test : adj_list_test.cpp : <include>$(BOOST_ROOT) : debug ;
exe adj_matrix_cc : adj_matrix_cc.cpp : <include>$(BOOST_ROOT) : debug ;
exe bfs : bfs.cpp : <include>$(BOOST_ROOT) : debug ;
exe bfs_cc : bfs_cc.cpp : <include>$(BOOST_ROOT) : debug ;
exe dfs : dfs.cpp : <include>$(BOOST_ROOT) : debug ;
exe dfs_cc : dfs_cc.cpp : <include>$(BOOST_ROOT) : debug ;
exe dijkstra_cc : dijkstra_cc.cpp : <include>$(BOOST_ROOT) : debug ;
exe edge_list_cc : edge_list_cc.cpp : <include>$(BOOST_ROOT) : debug ;
exe filtered_graph_cc : filtered_graph_cc.cpp : <include>$(BOOST_ROOT) : debug ;
exe graph : graph.cpp : <include>$(BOOST_ROOT) : debug ;
exe graph_concepts : graph_concepts.cpp : <include>$(BOOST_ROOT) : debug ;
exe leda_graph_cc : leda_graph_cc.cpp : <include>$(BOOST_ROOT) : 
  <include>$(LEDA)/incl <library-file>$(LEDA)/libG.a debug ;
exe reverse_graph_cc : reverse_graph_cc.cpp : <include>$(BOOST_ROOT) : debug ;
exe stanford_graph_cc : stanford_graph_cc.cpp : <include>$(BOOST_ROOT) 
   <include>$(SGB) <library-file>$(SGB)/libgb.a : debug ;
exe subgraph : subgraph.cpp : <include>$(BOOST_ROOT) : debug ;
exe vector_graph_cc : vector_graph_cc.cpp : <include>$(BOOST_ROOT) : debug ;

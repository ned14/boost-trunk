# Define SGB (stanford graph base top level directory) and 
# LEDA (also top level directory) at the command line of jam using -s

import modules ;

test-suite graph_test : 

    [ run transitive_closure_test.cpp ]
             
    [ compile adj_list_cc.cpp ]

    # adj_list_test needs some work -JGS
    # unit-test adj_list_test : adj_list_test.cpp  ;
    [ compile adj_matrix_cc.cpp ]

    [ run bfs.cpp ../../test/build//boost_test_exec_monitor ]

    [ compile bfs_cc.cpp ]

    [ run dfs.cpp ../../test/build//boost_test_exec_monitor ]

    [ compile dfs_cc.cpp ]

    [ compile dijkstra_cc.cpp ]

    [ compile edge_list_cc.cpp ]

    [ compile filtered_graph_cc.cpp ]

    [ run graph.cpp ]

    [ compile graph_concepts.cpp ]

    [ compile reverse_graph_cc.cpp ] 

    [ run subgraph.cpp ../../test/build//boost_test_exec_monitor ]

    [ run isomorphism.cpp ../../test/build//boost_test_exec_monitor ]

    [ run adjacency_matrix_test.cpp ]    

    [ compile vector_graph_cc.cpp ]

    [ compile copy.cpp ]
    
    [ compile property_iter.cpp ]    

    [ run bundled_properties.cpp ]
    ;

# Run SDB tests only when -sSDB= is set.
if [ modules.peek : SDB ] != ""
{
    local SDB_DEPENDCIES =
        <include>$(SGB) <library-file>$(SGB)/libgb.a  ;

    compile stanford_graph_cc.cpp 
        $(SDB_DEPENDCIES)  ;
}

# Run LEDA tests only when -sLEDA= is set.
if [ modules.peek : LEDA ] != ""
{
     local LEDA_DEPENDENCIES = 
        <include>$(LEDA)/incl 
        <library-file>$(LEDA)/libG.a
        ;

    compile leda_graph_cc.cpp  
       $(LEDA_DEPENDENCIES) ;
}

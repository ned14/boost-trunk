gcc.bin-directory = [ conditional $(gcc.root-directory) : $(gcc.root-directory)$(SLASH)bin$(SLASH) : " " ] ;
detect-build-tools gcc : "g++ -v" ;

flags gcc LINKFLAGS <runtime-link>static : -static ;
flags gcc CFLAGS <debug-symbols>on : -g ;
flags gcc LINKFLAGS <debug-symbols>on : -g ;
flags gcc CFLAGS <optimization>off : -O0 ;
flags gcc CFLAGS <optimization>speed : -O3 ;
flags gcc CFLAGS <optimization>space : -O2 ;
flags gcc CFLAGS <inlining>off : -fno-inline ;
flags gcc CFLAGS <inlining>on : -Wno-inline ;
flags gcc CFLAGS <inlining>full : -finline-functions -Wno-inline ;

flags gcc CFLAGS <profiling>on : -pg ;
flags gcc LINKFLAGS <profiling>on : -pg ;

flags gcc DEFINES <define> ;
flags gcc UNDEFS <undef> ;
flags gcc HDRS <include> ;

flags gcc STDHDRS : $(gcc.root-directory)$(SLASH)include ;
flags gcc STDLIBPATH : $(gcc.root-directory)$(SLASH)lib ;

flags gcc CFLAGS <shared-linkable>true : -fPIC ;
flags gcc LINKFLAGS <shared-linkable>true : -fPIC ;

flags gcc LINKFLAGS <target-type>DLL : -shared ;

#### Link ####

rule Link-action
{
    if $(NT) && ( $(3) = DLL )
    {
        gcc-DLL-action $(<) : $(>) ;
    }
    else
    {
        gcc-Link-action $(<) : $(>) ;
    }
}

# for gcc, we repeat all libraries so that dependencies are always resolved
actions gcc-Link-action bind NEEDLIBS
{
    $(gcc.bin-directory)g++ $(LINKFLAGS) -o "$(<[1])" -L$(STDLIBPATH) "$(>)" "$(NEEDLIBS)" "$(NEEDLIBS)"
}

actions gcc-DLL-action bind NEEDLIBS 
{
    $(gcc.bin-directory)g++ -Wl,--exclude-symbols,_bss_end__:_bss_start__:_data_end__:_data_start__ -Wl,--out-implib,$(<[2]) $(LINKFLAGS) -L$(STDLIBPATH) "$(>)" "$(NEEDLIBS)" "$(NEEDLIBS)" -o "$(<[1])"
}

# older actions
#    $(gcc.bin-directory)dlltool -e $(<[1]:S=:D=:G=) -l "$(<[2])" "$(>)"
#    $(gcc.bin-directory)g++ $(LINKFLAGS) -L$(STDLIBPATH) "$(>)" "$(NEEDLIBS)" "$(NEEDLIBS)" -o "$(<[1])"


#### Cc #####

rule Cc-action
{
    gcc-Cc-action $(<) : $(>) ;
}

actions gcc-Cc-action
{
    $(gcc.bin-directory)gcc -c  -U$(UNDEFS) -D$(DEFINES) $(CFLAGS) -I"$(HDRS)" -I"$(STDHDRS)" -o"$(<)" "$(>)"
}

#### C++ ####
rule C++-action
{
    gcc-C++-action $(<) : $(>) ;
}

actions gcc-C++-action
{
    $(gcc.bin-directory)g++ -c -U$(UNDEFS) -D$(DEFINES) $(CFLAGS) $(C++FLAGS) -I"$(HDRS)" -I"$(STDHDRS)" -o"$(<)" "$(>)"
}

#### Archive ####
rule Archive-action
{
    gcc-Archive-action $(<) : $(>) ;
}

actions updated together piecemeal gcc-Archive-action
{
    ar ru "$(<)" "$(>)"
}


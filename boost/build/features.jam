# feature name : [values...] : [ PATH ]
#
# Declares a feature with the given name. If values is empty, declares a free
# feature; declares a simple feature otherwise. "PATH" should be supplied for a
# free feature whose values might be paths specified relative to the
# (sub)project directory.
rule feature
{
    gUNGRISTED(<$(<)>) = $(<) ;
    gFEATURE_VALUES(<$(<)>) = $(>) ;
    
    if ( ! $(>) ) && ! ( <$(<)> in $(gFREE_FEATURES) )
    {
        gFREE_FEATURES += <$(<)> ;
        if PATH in $(3)
        {
            gPATH_FEATURES += <$(<)> ;
        }
    }
    else
    {
        if PATH in $(3)
        {
            ECHO "Simple feature" <$(<)> "qualified with PATH in 3rd"
                  "argument. PATH ignored." ;
        }
    }
}

rule ungrist
{
    local result = ; 
    local x ;
    for x in $(<)
    {
        if ! $(x:G)
        {
            result += $(x) ;
        }
        else if $(gUNGRISTED($(x)))
        {
            result += $(gUNGRISTED($(x))) ;
        }
        else
        {
            EXIT gUNGRISTED($(x)) "not defined!" ;
        }
    }
    return $(result) ;
}

feature profiling : off on ;
feature struct-alignment : auto 1 2 4 8 16 ;
feature eh-model : default fast msvc ; # metrowerks only

feature threading : single multi ;

feature runtime-link : dynamic static ;
feature runtime-build : debug release ;

feature optimization : off speed space ;
feature inlining : off on full ;
feature debug-symbols : on off : ;
feature user-interface : console gui : ;

feature wide-character-support : on off ;
feature exception-handling : on off ;

feature define : : ; # <define>PYTHON=foo
feature undef : : ; # <undef>PYTHON=foo
feature "include" : : PATH ; # <include>../foo/bar/mumble

# feature-default <feature>...
#
# return the default values for the given feature(s)
rule feature-default
{
    local result f ;
    for f in $(<)
    {
        result += $(f)$(gFEATURE_VALUES($(f))[1]) ;
    }
    return $(result) ;
}

rule variant # name : properties
{
    local toolset ;
    for toolset in $(TOOLS)
    {
        # We hijack select-properties to do our dirty work here.
        # Because properties in a variant declaration are only qualified with
        # toolset and not variant, we specify the toolset where
        # select-properties expects a variant name. The first toolset parameter
        # is neccessary to get the relevant-features correctly set. We supply
        # the variant name as the target name, so that error messages will look
        # coherent.
        gBASE_PROPERTIES($(toolset),$(<))
            = [ sort [ select-properties $(toolset) $(toolset) $(<) : $(>) ] ] ;
    }
}

common-properties = 
    <profiling>off
    <struct-alignment>auto
    <eh-model>default
    # <threading>multi
    <user-interface>console
    <wide-character-support>on
    <exception-handling>on
    # <runtime-link>dynamic
    ;
    
variant debug :
    $(common-properties)
    <threading>multi
    <debug-symbols>on
    <runtime-build>debug
    <optimization>off
    <inlining>off
    <borland><inlining>on # example only
    ;

variant release : 
    $(common-properties)
    <threading>multi
    <debug-symbols>off
    <runtime-build>release
    <optimization>speed
    <inlining>full
    <msvc><inlining>off # - example only
    <define>NDEBUG ;



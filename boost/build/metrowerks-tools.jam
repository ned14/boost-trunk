# Metrowerks
local msl-c++-path = $(metrowerks.root-directory)$(SLASH)MSL$(SLASH)MSL_C++$(SLASH) ;

flags metrowerks STDLIBPATH : $(msl-c++-path)MSL_Win32$(SLASH)Lib$(SLASH)x86 ;
flags metrowerks STDHDRS : $(msl-c++-path)MSL_Common$(SLASH)Include ;

flags metrowerks DEFINES <define> ;
flags metrowerks UNDEFS <undef> ;
flags metrowerks HDRS <include> ;

flags metrowerks CFLAGS <debug-symbols>on : -g ;
flags metrowerks LINKFLAGS <debug-symbols>on : -g ;
flags metrowerks CFLAGS <optimization>off : -O0 ;
flags metrowerks CFLAGS <optimization>speed : -Op ;
flags metrowerks CFLAGS <optimization>space : -Os ;
flags metrowerks CFLAGS <inlining>off : -inline off ;
flags metrowerks CFLAGS <inlining>on : -inline on ;
flags metrowerks CFLAGS <inlining>full : -inline auto -inline level=8 ;

metrowerks.bin-directory = " " ;
detect-build-tools metrowerks : mwcc ;

if $(metrowerks.root-directory)
{
    metrowerks.bin-directory = "$(.metrowerks.root-directory)$(SLASH)Other Metrowerks Tools$(SLASH)Command Line Tools$(SLASH)" ;
}

#### Link ####

rule Link-action
{
    metrowerks-Link-action $(<) : $(>) ;
}

actions metrowerks-Link-action bind NEEDLIBS
{
    "$(metrowerks.bin-directory)mwld" -msgstyle gcc $(LINKFLAGS) -o $(<) $(UNDEFS) -L$(STDLIBPATH) $(NEEDLIBS) $(>)
}

#### Cc #####

rule Cc-action
{
    metrowerks-Cc-action $(<) : $(>) ;
}

actions metrowerks-Cc-action
{
    "$(metrowerks.bin-directory)mwcc" -c  -U$(UNDEFS) -D$(DEFINES) -msgstyle gcc -nowraplines $(CCFLAGS) $(OPTIM) -I$(HDRS) -I$(STDHDRS) -o $(<) $(>)
}

#### C++ ####
rule C++-action
{
    metrowerks-C++-action $(<) : $(>) ;
}

actions metrowerks-C++-action
{
    "$(metrowerks.bin-directory)mwcc" -c  -U$(UNDEFS) -D$(DEFINES) -msgstyle gcc -nowraplines -lang c++ $(C++FLAGS) $(OPTIM) -I$(HDRS) -I$(STDHDRS) -o $(<) $(>)
}

#### Archive ####
rule Archive-action
{
    metrowerks-Archive-action $(<) : $(>) ;
}

actions updated together piecemeal metrowerks-Archive-action
{
    mwld -library -o $(<) $(>)
}


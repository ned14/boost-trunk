<explicit-failures-markup>
  <mark toolset="cwpro8" library="regex" test="*">
    <note author="M.Bergal" date="11/29/2003">
       ICE. Has been reported to Metrowerks by Beman?.
    </note>
  </mark>

  <mark library="concept_check" test="class_concept_fail_expected" toolset="cwpro8">
    <note author="B.Dawes">
      The failure is caused by a compiler bug, which has been reported to the compiler supplier (or is already known to them).
    </note>
  </mark>

  <mark library="config" test="limits_test" toolset="cwpro8">
    <note author="B.Dawes">
      The failure is caused by a compiler bug, which has been reported to the compiler supplier (or is already known to them).
    </note>
  </mark>

  <mark library="function" test="allocator_test" toolset="msvc">
    <note author="B.Dawes">
      The failure is caused by a standard library bug, which has been reported to the standard library supplier (or is already known to them).
    </note>
  </mark>
  
  <mark library="function" test="allocator_test" toolset="vc7">
    <note author="B.Dawes">
      The failure is caused by a standard library bug, which has been reported to the standard library supplier (or is already known to them).
    </note>
  </mark>

  <mark library="iterator" test="interoperable_fail" toolset="*">
    <note author="D. Abrahams">
      This failure is caused by a compiler bug.  Templated operators
      which combine different iterators built with iterator_facade or
      iterator_adaptor be present in an overload set even when those
      iterators are not interoperable.  The usual result is that error
      messages generated by illegal use of these operators will be of
      lower quality.
    </note>
  </mark>

  <mark library="iterator" test="is_convertible_fail" toolset="*">
    <note author="D. Abrahams">
      This failure is caused by a compiler bug.
      <code>is_convertible&lt;T,U&gt;::value</code> may be true for unrelated
      iterators <code>T</code> and <code>U</code>
      (including many of the Boost specialized adaptors) which use
      <code>enable_if_convertible</code> to restrict the applicability
      of converting constructors, even when <code>T</code> is not
      convertible to <code>U</code> because instantiating the
      conversion will cause a compilation failure.
    </note>
  </mark>

</explicit-failures-markup>

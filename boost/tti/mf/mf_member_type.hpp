
//  (C) Copyright Edward Diener 2011,2012
//  Use, modification and distribution are subject to the Boost Software License,
//  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
//  http://www.boost.org/LICENSE_1_0.txt).

#if !defined(BOOST_TTI_MF_MEMBER_TYPE_HPP)
#define BOOST_TTI_MF_MEMBER_TYPE_HPP
  
#include <boost/mpl/not.hpp>
#include <boost/type_traits/is_same.hpp>
#include <boost/tti/gen/namespace_gen.hpp>
#include <boost/tti/detail/dnotype.hpp>

/*

  The succeeding comments in this file are in doxygen format.

*/

/** \file
*/

namespace boost
  {
  namespace tti
    {
  
    /// A metafunction which checks whether the member 'type' returned from invoking the macro metafunction generated by BOOST_TTI_MEMBER_TYPE ( BOOST_TTI_TRAIT_MEMBER_TYPE ) or from invoking boost::tti::mf_member_type is a valid type.
    /**

        template<class TTI_T>
        struct mf_valid_member_type
          {
          static const value = unspecified;
          typedef mpl::bool_<true-or-false> type;
          };

        The metafunction types and return:

          TTI_T   = the nullary metafunction from invoking the macro metafunction generated by BOOST_TTI_MEMBER_TYPE ( BOOST_TTI_TRAIT_MEMBER_TYPE ) or from invoking boost::tti::mf_member_type.
      
          returns = 'value' is true if the type is valid, otherwise 'value' is false.
                    Validity means that the type being tested is not equal to an unspecified marker type.
                          
    */
    template
      <
      class TTI_T
      >
    struct mf_valid_member_type :
      boost::mpl::not_
        <
        boost::is_same
          <
          typename TTI_T::type,
          BOOST_TTI_NAMESPACE::detail::notype
          >
        >
      {
      };
    }
  }
  
#endif // BOOST_TTI_MF_MEMBER_TYPE_HPP

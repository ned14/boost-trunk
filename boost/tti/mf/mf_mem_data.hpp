
//  (C) Copyright Edward Diener 2011
//  Use, modification and distribution are subject to the Boost Software License,
//  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
//  http://www.boost.org/LICENSE_1_0.txt).

#if !defined(TTI_MF_MEMBER_DATA_HPP)
#define TTI_MF_MEMBER_DATA_HPP

#include <boost/config.hpp>
#include <boost/mpl/apply.hpp>
#include <boost/mpl/identity.hpp>
#include <boost/mpl/placeholders.hpp>

/*

  The succeeding comments in this file are in doxygen format.

*/

/** \file
*/

namespace boost
  {
  namespace tti
    {
  
    /// A metafunction which checks whether a member data exists within an enclosing type.
    /**

        This metafunction takes its specific types as nullary metafunctions whose typedef 'type' member is the actual type used.
    
        The metafunction types and return:

          HasMemberData = a Boost MPL lambda expression using the metafunction generated from the TTI_HAS_MEMBER_DATA ( or TTI_TRAIT_HAS_MEMBER_DATA ) macro.<br />
                          The easiest way to generate the lambda expression is to use a Boost MPL placeholder expression of the form 'metafunction\<_,_\>'.
                          You can also use the metafunction class generated by the TTI_MTFC_HAS_MEMBER_DATA ( or TTI_MTFC_TRAIT_HAS_MEMBER_DATA ) macro.
                          
          T         = the enclosing type as a nullary metafunction.
          
          R         = the type of the member data as a nullary metafunction.
      
          returns = 'value' is true if the member data exists within the enclosing type,
                    otherwise 'value' is false.
                          
    */
    template
      <
      class HasMemberData,
      class T,
      class R
      >
    struct mf_has_member_data :
      boost::mpl::apply
        <
        HasMemberData,
        typename T::type,
        typename R::type
        >::type 
      {
      };
    }
  }
  
#endif // TTI_MF_MEMBER_DATA_HPP

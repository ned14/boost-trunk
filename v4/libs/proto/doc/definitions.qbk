[/
 / Copyright (c) 2008 Eric Niebler
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[/==================]
[section Definitions]
[/==================]

[variablelist
  [ [grammar]
      []]
  [ [transform]
      []]
  [ [polymorphic function object]
      [A class type with an overloaded function call operator
       and an nested `result_type` typedef or `result` template
       for calculating the return type of the function call
       operator.]]
  [ [callable transform]
      [A transform of the form `R(A0,A1,...)` where
       `is_callable<R>::value` is `true`. `R` is treated as
       a polymorphic function object and the arguments are
       treated as transforms that yield the arguments to
       the function object.] ]
  [ [object transform]
      [A transform of the form `R(A0,A1,...)` where
       `is_callable<R>::value` is `false`. `R` is treated as
       type type of an object to construct and the arguments
       are treated as transforms that yield the arguments to
       the constructor.]]
  [ [primitive transform]
      [A polymorphic function object that takes three arguments:
       a Proto expression, a state and a data. Primitive
       transforms can be used in grammars without needing to
       specify arguements. A primitive transform `T` is
       equivalent to `T(_expr, _state, _data)`.]]
]

[endsect]

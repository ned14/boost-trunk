0. add description of empty () for list_of(), list_inserter.
1. add repeat description

3. docs may mention whether hash_map/set can be used
   as well as upcoming boost::unordered_map/set.

  Maybe exotic containers as circular_buffer and/or
  multi index container can be shown in example as well.

4. update docs wrt member function addresses + std namespace
5. update email example to use a local functor

6: find conversion problem in g++ with nested list_of().
7. add repeat etc to header overview.

8. Consider optimising generic_list to store only references
   to the object in the list. Even if compound objects are 
   stored, then maybe tuples of opetional<T&> can be stored
   and construction deferred until the conversion to a 
   container is needed. A special iterator could construct
   the objects on demand
   
9. The decay problem should be solved once and for all by something like

   template< class T >
   generic_list< decay_array<T>::type > list_of( const T& );
   
   or decay_traits<T>::type
   
10. Consider adding list_of and iterable_list_of to complement each other.
    However, for tight code, list_of<7> works pretty well and provides
    random_access iterators. recursive_list_of(2)(6);
    
11. make begin()/end() const members

[/
 / Copyright (C) 2007-2009 Andrew Sutton
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section Graph]
The Graph concept contains a few requirements that are common to all the graph concepts.
These include some associated types for vertex_descriptor, edge_descriptor, etc. One
should note that a model of Graph is not required to be a model of Assignable, so algorithms
should pass graph objects by reference (or `const` reference).

[h4 Associated Types]
[table
    [[Type] [Description]]
    [
        [`graph_traits<G>::vertex_descriptor`]
        [
            A vertex descriptor corresponds to a unique vertex in a graph. A vertex descriptor
            must be DefaultConstructible, Assignable, and EqualityComparable. Vertex
            descriptors are almost always passed by value.
        ]
    ]
    [
        [`graph_traits<G>::edge_descriptor`]
        [
            An edge descriptor corresponds to a unique edge /(u,v)/ in a graph. An edge descriptor
            must be DefaultConstructible, Assignable, and EqualityComparable. Edge descriptors
            are almost always passed by value.
        ]
    ]
    [
        [`graph_traits<G>::directed_category`]
        [
            This type shall be convertible to `directed_tag` or `undirected_tag`.
        ]
    ]
    [
        [`graph_traits<G>::edge_parallel_category`]
        [
            This describes whether the graph class allows the insertion of parallel edges
            (multiple edges between the same source and target vertices). The two tags are
            `allow_parallel_edge_tag` and `disallow_parallel_edge_tag`.
        ]
    ]
    [
        [`graph_traits<G>::traversal_category`]
        [
            This describes the ways in which the vertices and edge of the graph can be visited.
            The choices are `incidence_graph_tag`, `adjacency_graph_tag`, `bidirectional_graph_tag`,
            `vertex_list_graph_tag`, `edge_list_graph_tag`, and `adjacency_matrix_tag`.
        ]
    ]
]

[h4 Valid Expressions]
[table
    [[Expression] [Description]]
    [
        [`graph_traits<G>::null_vertex()`]
        [
            Returns a special `vertex_descriptor` which does not refer to any vertex for graphs
            of type `G`. Note that default initialization of `vertex_descriptors` are /not/
            guaranteed to be equal to then `null_vertex()`.

            *Returns* `vertex_descriptor`
        ]
    ]
]

[endsect]

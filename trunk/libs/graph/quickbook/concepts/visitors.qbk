[/
 / Copyright (C) 2007-2009 Andrew Sutton
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section Visitor Concepts]
The visitor concepts plays the same role in Boost.Graph as functors play in the STL.
Functors provide a mechanism for extending an algorithm; for customizing what is done
at each step of the algorithm. Visitors allow the user to insert their own operations
at various steps within a graph algorithm. Unlike the STL algorithms, graph algorithms
typically have multiple event points where one may want to insert a call-back via a
functor. Therefore visitors do not have a single operator() method like a functor, but
instead have several methods that correspond to the various event points. Each
algorithm has a different set of event points, which are described by the following
visitor concepts:

[include visitor.qbk]
[include bfs_visitor.qbk]
[include dfs_visitor.qbk]
[include dijkstra_visitor.qbk]
[include bellman_ford_visitor.qbk]
[include clique_visitor.qbk]
[include cycle_visitor.qbk]
[include event_visitor.qbk]
[include event_visitor_list.qbk]


[endsect]
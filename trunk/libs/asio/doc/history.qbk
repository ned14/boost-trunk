[/
 / Copyright (c) 2003-2008 Christopher M. Kohlhoff (chris at kohlhoff dot com)
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section:history Revision History]

[heading Asio 1.4.3 / Boost 1.40]

* Added a new ping example to illustrate the use of ICMP sockets.
* Changed the `buffered*_stream<>` templates to treat 0-byte reads and writes as
  no-ops, to comply with the documented type requirements for `SyncReadStream`,
  `AsyncReadStream`, `SyncWriteStream` and `AsyncWriteStream`.
* Changed some instances of the `throw` keyword to `boost::throw_exception()` to
  allow Asio to be used when exception support is disabled. Note that the SSL
  wrappers still require exception support
  ([@https://svn.boost.org/trac/boost/ticket/2754 #2754]).
* Made Asio compatible with the OpenSSL 1.0 beta
  ([@https://svn.boost.org/trac/boost/ticket/3256 #3256]).
* Eliminated a redundant system call in the Solaris [^/dev/poll] backend.
* Fixed a bug in resizing of the bucket array in the internal hash maps
  ([@https://svn.boost.org/trac/boost/ticket/3095 #3095]).
* Ensured correct propagation of the error code when a synchronous accept fails
  ([@https://svn.boost.org/trac/boost/ticket/3216 #3216]).
* Ensured correct propagation of the error code when a synchronous read or
  write on a Windows HANDLE fails.
* Fixed failures reported when `_GLIBCXX_DEBUG` is defined
  ([@https://svn.boost.org/trac/boost/ticket/3098 #3098]).
* Fixed custom memory allocation support for timers
  ([@https://svn.boost.org/trac/boost/ticket/3107 #3107]).
* Tidied up various warnings reported by g++
  ([@https://svn.boost.org/trac/boost/ticket/1341 #1341],
  [@https://svn.boost.org/trac/boost/ticket/2618 #2618]).
* Various documentation improvements, including more obvious hyperlinks to
  function overloads, header file information, examples for the handler type
  requirements, and adding enum values to the index
  ([@https://svn.boost.org/trac/boost/ticket/3157 #3157],
  [@https://svn.boost.org/trac/boost/ticket/2620 #2620]).

[heading Asio 1.4.2 / Boost 1.39]

* Implement automatic resizing of the bucket array in the internal hash maps.
  This is to improve performance for very large numbers of asynchronous
  operations and also to reduce memory usage for very small numbers. A new
  macro `BOOST_ASIO_HASH_MAP_BUCKETS` may be used to tweak the sizes used for
  the bucket arrays. (N.B. this feature introduced a bug which was fixed in
  Asio 1.4.3 / Boost 1.40.)
* Add performance optimisation for the Windows IOCP backend for when no timers
  are used.
* Prevent locale settings from affecting formatting of TCP and UDP endpoints
  ([@https://svn.boost.org/trac/boost/ticket/2682 #2682]).
* Fix a memory leak that occurred when an asynchronous SSL operation's
  completion handler threw an exception
  ([@https://svn.boost.org/trac/boost/ticket/2910 #2910]).
* Fix the implementation of `io_control()` so that it adheres to the
  documented type requirements for IoControlCommand
  ([@https://svn.boost.org/trac/boost/ticket/2820 #2820]).
* Fix incompatibility between Asio and ncurses.h
  ([@https://svn.boost.org/trac/boost/ticket/2156 #2156]).
* On Windows, specifically handle the case when an overlapped `ReadFile` call
  fails with `ERROR_MORE_DATA`. This enables a hack where a
  `windows::stream_handle` can be used with a message-oriented named pipe
  ([@https://svn.boost.org/trac/boost/ticket/2936 #2936]).
* Fix system call wrappers to always clear the error on success, as POSIX
  allows successful system calls to modify errno 
  ([@https://svn.boost.org/trac/boost/ticket/2953 #2953]).
* Don't include termios.h if `BOOST_ASIO_DISABLE_SERIAL_PORT` is defined
  ([@https://svn.boost.org/trac/boost/ticket/2917 #2917]).
* Cleaned up some more MSVC level 4 warnings
  ([@https://svn.boost.org/trac/boost/ticket/2828 #2828]).
* Various documentation fixes
  ([@https://svn.boost.org/trac/boost/ticket/2871 #2871]).

[heading Asio 1.4.1 / Boost 1.38]

* Improved compatibility with some Windows firewall software.
* Ensured arguments to `windows::overlapped_ptr::complete()` are correctly
  passed to the completion handler
  ([@https://svn.boost.org/trac/boost/ticket/2614 #2614]).
* Fixed a link problem and multicast failure on QNX
  ([@https://svn.boost.org/trac/boost/ticket/2504 #2504],
  [@https://svn.boost.org/trac/boost/ticket/2530 #2530]).
* Fixed a compile error in SSL support on MinGW / g++ 3.4.5.
* Drop back to using a pipe for notification if eventfd is not available at
  runtime on Linux ([@https://svn.boost.org/trac/boost/ticket/2683 #2683]).
* Various minor bug and documentation fixes
  ([@https://svn.boost.org/trac/boost/ticket/2534 #2534],
  [@https://svn.boost.org/trac/boost/ticket/2541 #2541],
  [@https://svn.boost.org/trac/boost/ticket/2607 #2607],
  [@https://svn.boost.org/trac/boost/ticket/2617 #2617],
  [@https://svn.boost.org/trac/boost/ticket/2619 #2619]).

[heading Asio 1.4.0 / Boost 1.37]

* Enhanced CompletionCondition concept with the signature
  `size_t CompletionCondition(error_code ec, size_t total)`, where the return
  value indicates the maximum number of bytes to be transferred on the next
  read or write operation. (The old CompletionCondition signature is still
  supported for backwards compatibility).
* New windows::overlapped_ptr class to allow arbitrary overlapped I/O
  functions (such as TransmitFile) to be used with Asio.
* On recent versions of Linux, an eventfd descriptor is now used (rather than
  a pipe) to interrupt a blocked select/epoll reactor.
* Added const overloads of lowest_layer().
* Synchronous read, write, accept and connect operations are now thread safe
  (meaning that it is now permitted to perform concurrent synchronous
  operations on an individual socket, if supported by the OS).
* Reactor-based io_service implementations now use lazy initialisation to
  reduce the memory usage of an io_service object used only as a message
  queue.

[heading Asio 1.2.0 / Boost 1.36]

* Added support for serial ports.
* Added support for UNIX domain sockets.
* Added support for raw sockets and ICMP.
* Added wrappers for POSIX stream-oriented file descriptors (excluding regular
  files).
* Added wrappers for Windows stream-oriented `HANDLE`s such as named pipes
  (requires `HANDLE`s that work with I/O completion ports).
* Added wrappers for Windows random-access `HANDLE`s such as files (requires
  `HANDLE`s that work with I/O completion ports).
* Added support for reactor-style operations (i.e. they report readiness but
  perform no I/O) using a new `null_buffers` type.
* Added an iterator type for bytewise traversal of buffer sequences.
* Added new `read_until()` and `async_read_until()` overloads that take a
  user-defined function object for locating message boundaries.
* Added an experimental two-lock queue (enabled by defining
  `BOOST_ASIO_ENABLE_TWO_LOCK_QUEUE`) that may provide better `io_service`
  scalability across many processors.
* Various fixes, performance improvements, and more complete coverage of the
  custom memory allocation support.

[heading Asio 1.0.0 / Boost 1.35]

First release of Asio as part of Boost.

[endsect]

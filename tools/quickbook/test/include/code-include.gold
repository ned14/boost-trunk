<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN" "http://www.boost.org/tools/boostbook/dtd/boostbook.dtd">
<article id="include" last-revision="DEBUG MODE Date: 2000/12/20 12:00:00 $" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Include</title>
  <para>
    
<programlisting><phrase role="comment">/*=============================================================================
    Copyright (c) 2006 Joel de Guzman
    http://spirit.sourceforge.net/

    Use, modification and distribution is subject to the Boost Software
    License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
    http://www.boost.org/LICENSE_1_0.txt)
=============================================================================*/</phrase>

</programlisting>
  </para>
  <para>
    This is the C <emphasis role="bold"><emphasis>foo</emphasis></emphasis> function.
  </para>
  <para>
    This description can have paragraphs...
  </para>
  <itemizedlist>
    <listitem>
      <simpara>
        lists
      </simpara>
    </listitem>
    <listitem>
      <simpara>
        etc.
      </simpara>
    </listitem>
  </itemizedlist>
  <para>
    And any quickbook block markup.
  </para>
  <para>
    
<programlisting><phrase role="keyword">char</phrase><phrase role="special">*</phrase> <phrase role="identifier">foo</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
    <phrase role="comment">// return 'em, foo man!</phrase>
    <phrase role="keyword">return</phrase> <phrase role="string">&quot;foo&quot;</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
  </para>
  <para>
    
<programlisting><phrase role="comment"># Copyright 2009 Daniel James</phrase>
<phrase role="comment">#</phrase>
<phrase role="comment"># Use, modification and distribution is subject to the Boost Software</phrase>
<phrase role="comment"># License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at</phrase>
<phrase role="comment"># http://www.boost.org/LICENSE_1_0.txt)</phrase>

</programlisting>
  </para>
  <para>
    This is the Python <emphasis role="bold"><emphasis>foo</emphasis></emphasis>
    function.
  </para>
  <para>
    This description can have paragraphs...
  </para>
  <itemizedlist>
    <listitem>
      <simpara>
        lists
      </simpara>
    </listitem>
    <listitem>
      <simpara>
        etc.
      </simpara>
    </listitem>
  </itemizedlist>
  <para>
    And any quickbook block markup.
  </para>
  <para>
    
<programlisting><phrase role="keyword">def</phrase> <phrase role="identifier">foo</phrase><phrase role="special">():</phrase>
    <phrase role="comment"># return 'em, foo man!</phrase>
    <phrase role="keyword">return</phrase> <phrase role="string">&quot;foo&quot;</phrase>

<phrase role="keyword">print</phrase> <phrase role="identifier">foo</phrase><phrase role="special">()</phrase></programlisting>
  </para>
  <para>
    
<programlisting><phrase role="comment">/*=============================================================================
    Copyright (c) 2006 Joel de Guzman
    http://spirit.sourceforge.net/

    Use, modification and distribution is subject to the Boost Software
    License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
    http://www.boost.org/LICENSE_1_0.txt)
=============================================================================*/</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">string</phrase><phrase role="special">&gt;</phrase>

</programlisting>
  </para>
  <para>
    This is the <emphasis role="bold"><emphasis>bar</emphasis></emphasis> function
  </para>
  <para>
    
<programlisting><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">bar</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
    <phrase role="comment">// return 'em, bar man!</phrase>
    <phrase role="keyword">return</phrase> <phrase role="string">&quot;bar&quot;</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase></programlisting>
  </para>
  <para>
    Some trailing text here
  </para>
  <para>
    This is the <emphasis role="bold"><emphasis>foo</emphasis></emphasis> function.
  </para>
  <para>
    This description can have paragraphs...
  </para>
  <itemizedlist>
    <listitem>
      <simpara>
        lists
      </simpara>
    </listitem>
    <listitem>
      <simpara>
        etc.
      </simpara>
    </listitem>
  </itemizedlist>
  <para>
    And any quickbook block markup.
  </para>
  <para>
    
<programlisting><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">foo</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
    <phrase role="comment">// return 'em, foo man!</phrase>
    <phrase role="keyword">return</phrase> <phrase role="string">&quot;foo&quot;</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">foo_bar</phrase><phrase role="special">()</phrase> <co id="include.c0" linkends="include.c1" />
<phrase role="special">{</phrase>
    <phrase role="keyword">return</phrase> <phrase role="string">&quot;foo-bar&quot;</phrase><phrase role="special">;</phrase> <co id="include.c2" linkends="include.c3" />
<phrase role="special">}</phrase>
<phrase role="keyword">class</phrase> <phrase role="identifier">x</phrase>
<phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>

    <co id="include.c4" linkends="include.c5" /><phrase role="identifier">x</phrase><phrase role="special">()</phrase> <phrase role="special">:</phrase> <phrase role="identifier">n</phrase><phrase role="special">(</phrase><phrase role="number">0</phrase><phrase role="special">)</phrase>
    <phrase role="special">{</phrase>
    <phrase role="special">}</phrase>

    <co id="include.c6" linkends="include.c7" /><phrase role="special">~</phrase><phrase role="identifier">x</phrase><phrase role="special">()</phrase>
    <phrase role="special">{</phrase>
    <phrase role="special">}</phrase>

    <co id="include.c8" linkends="include.c9" /><phrase role="keyword">int</phrase> <phrase role="identifier">get</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase>
    <phrase role="special">{</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">n</phrase><phrase role="special">;</phrase> 
    <phrase role="special">}</phrase>

    <co id="include.c10" linkends="include.c11" /><phrase role="keyword">void</phrase> <phrase role="identifier">set</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">n_</phrase><phrase role="special">)</phrase>
    <phrase role="special">{</phrase>
        <phrase role="identifier">n</phrase> <phrase role="special">=</phrase> <phrase role="identifier">n_</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>
<phrase role="special">};</phrase>
</programlisting>
  </para>
  <calloutlist>
    <callout arearefs="include.c0" id="include.c1">
      <para>
        The <emphasis>Mythical</emphasis> FooBar. See <ulink url="http://en.wikipedia.org/wiki/Foobar">Foobar
        for details</ulink>
      </para>
    </callout>
    <callout arearefs="include.c2" id="include.c3">
      <para>
        return 'em, foo-bar man!
      </para>
    </callout>
    <callout arearefs="include.c4" id="include.c5">
      <para>
        Constructor
      </para>
    </callout>
    <callout arearefs="include.c6" id="include.c7">
      <para>
        Destructor
      </para>
    </callout>
    <callout arearefs="include.c8" id="include.c9">
      <para>
        Get the <code><phrase role="identifier">n</phrase></code> member variable
      </para>
    </callout>
    <callout arearefs="include.c10" id="include.c11">
      <para>
        Set the <code><phrase role="identifier">n</phrase></code> member variable
      </para>
    </callout>
  </calloutlist>
  <para>
    [foo]
  </para>
  <para>
    [foo_py]
  </para>
  <para>
    [foo_c]
  </para>
</article>

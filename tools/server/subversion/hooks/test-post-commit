#!/bin/sh

# POST-COMMIT HOOK
#
# The post-commit hook is invoked after a commit. Subversion runs
# this hook by invoking a program (script, executable, binary,
# etc.) named 'post-commit' (for which
# this file is a template) with the following ordered arguments:
#
#   [1] REPOS-PATH   (the path to this repository)
#   [2] REV          (the number of the revision just committed)
#
# Because the commit has already completed and cannot be undone,
# the exit code of the hook program is ignored.  The hook program
# can use the 'svnlook' utility to help it examine the
# newly-committed tree.
#
# On a Unix system, the normal procedure is to have 'post-commit'
# invoke other programs to do the real work, though it may do the
# work itself too.
#
# Note that 'post-commit' must be executable by the user(s) who will
# invoke it (typically the user httpd runs as), and that user must
# have filesystem-level permission to access the repository.
#
# On a Windows system, you should name the hook program
# 'post-commit.bat' or 'post-commit.exe',
# but the basic idea is the same.
#

REPOS="$1"
REV="$2"


#
# New Mailer script hooks
#
MAILER_SCRIPT=/opt/subversion/mailer_boost.py
SVNDIR=/home/subversion/boost
${MAILER_SCRIPT} commit "${SVNDIR}" "$REV" ${SVNDIR}/conf/mailer_dikim.conf

LOG=`/usr/bin/svnlook log -r $REV $REPOS`
AUTHOR=`/usr/bin/svnlook author -r $REV $REPOS`
TRAC_ENV='/opt/trac/boost/'
TRAC_URL='http://svn.boost.org/trac/boost/'
#export PYTHONPATH="/opt/trac/lib/python2.3/site-packages/Trac-0.11-py2.3.egg/"
export PYTHONPATH="/opt/trac2/lib/python2.4/site-packages/Trac-0.11.5-py2.4.egg/"

/usr/bin/python24 /home/subversion/boost/hooks/trac-post-commit-hook \
  -p "$TRAC_ENV"  \
  -r "$REV"       \
  -u "$AUTHOR"    \
  -m "$LOG"       \
  -s "$TRAC_URL"

#
# Update boost website
#
WEBDIR=/home/www/beta.boost.org
cd $WEBDIR
svn up
cd /home/www/live.boost.org
svn up

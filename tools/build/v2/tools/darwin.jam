# Copyright 2003 Christopher Currie
# Copyright 2006 Dave Abrahams 
# Copyright 2003, 2004, 2005, 2006 Vladimir Prus 
# Copyright 2005-2007 Mat Marcus
# Copyright 2005-2007 Adobe Systems Incorporated
# Copyright 2007-2008 Rene Rivera
# Distributed under the Boost Software License, Version 1.0. 
# (See accompanying file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt) 

#  Please see http://article.gmane.org/gmane.comp.lib.boost.build/3389/
#  for explanation why it's a separate toolset.

import feature : feature ;
import toolset : flags ;
import type ;
import common ;
import generators ;
import path : basename ;

feature.extend toolset : darwin ;
import gcc ;
toolset.inherit-generators darwin : gcc ;

generators.override darwin.prebuilt : builtin.prebuilt ;
generators.override darwin.searched-lib-generator : searched-lib-generator ;

# Override default do-nothing generators.
generators.override darwin.compile.c.pch   : pch.default-c-pch-generator   ;
generators.override darwin.compile.c++.pch : pch.default-cpp-pch-generator ;

toolset.inherit-rules darwin : gcc ;
toolset.inherit-flags darwin : gcc     
  :  <runtime-link>static
     <architecture>arm/<address-model>32
     <architecture>arm/<address-model>64
     <architecture>arm/<instruction-set>
     <architecture>x86/<address-model>32
     <architecture>x86/<address-model>64
     <architecture>x86/<instruction-set>
     <architecture>power/<address-model>32
     <architecture>power/<address-model>64
     <architecture>power/<instruction-set>  ;

# No additional initialization should be necessary
rule init ( version ? : command * : options * : requirement * )
{
    condition = [ common.check-init-parameters darwin $(requirement) : version $(version) ] ;
    local command = [ common.get-invocation-command darwin : g++ : $(command) ] ;
    
    common.handle-options darwin : $(condition) : $(command) : $(options) ;
    
    # GCC 4.0 and higher in Darwin does not have -fcoalesce-templates.
    local gccversion = [ SHELL "$(command:J= ) -dumpversion" ] ;
    if $(gccversion) < "4.0.0"
    {
        flags darwin.compile.c++ OPTIONS $(condition) : -fcoalesce-templates ;
    }

    gcc.init-link-flags darwin darwin $(condition) ;

    # - The symbol strip program.
    if <striper> in $(options)
    {
        # We can turn off strip by specifying it as empty. In which
        # case we switch to using the linker to do the strip.
        flags darwin.link.dll OPTIONS
            $(condition)/<main-target-type>LIB/<link>shared/<address-model>32/<debug-symbols>off : -Wl,-x ;
        flags darwin.link.dll OPTIONS
            $(condition)/<main-target-type>LIB/<link>shared/<address-model>/<debug-symbols>off : -Wl,-x ;
        flags darwin.link OPTIONS
            $(condition)/<main-target-type>EXE/<address-model>32/<debug-symbols>off : -s ;
        flags darwin.link OPTIONS
            $(condition)/<main-target-type>EXE/<address-model>/<debug-symbols>off : -s ;
    }
    else
    {
        # Otherwise we need to find a strip program to use. And hence
        # also tell the link action that we need to use a strip
        # post-process.
        flags darwin.link NEED_STRIP $(condition)/<debug-symbols>off : "" ;        
        local strip =
            [ common.get-invocation-command darwin
                : strip : [ feature.get-values <striper> : $(options) ] : $(bin) : search-path ] ;
        flags darwin.link .STRIP $(condition) : $(strip[1]) ;
        if $(.debug-configuration)
        {
            ECHO notice: using strip :: $(condition) :: $(strip[1]) ;
        }
    }

    # - The archive builder (libtool is the default as creating
    #   archives in darwin is complicated.
    local archiver =
        [ common.get-invocation-command darwin
            : libtool : [ feature.get-values <archiver> : $(options) ] : $(bin) : search-path ] ;
    flags darwin.archive .LIBTOOL $(condition) : $(archiver[1]) ;
    if $(.debug-configuration)
    {
        ECHO notice: using archiver :: $(condition) :: $(archiver[1]) ;
    }
}

feature framework : : free ;

flags darwin.compile OPTIONS <flags> ;

# The following adds objective-c support to darwin.
# Thanks to http://thread.gmane.org/gmane.comp.lib.boost.build/13759

generators.register-c-compiler darwin.compile.m : OBJECTIVE_C : OBJ : <toolset>darwin ;
generators.register-c-compiler darwin.compile.mm : OBJECTIVE_CPP : OBJ : <toolset>darwin ;

rule compile.m
{
    LANG on $(<) = "-x objective-c" ;
}

actions compile.m
{
    "$(CONFIG_COMMAND)" $(LANG) $(OPTIONS) $(USER_OPTIONS) -D$(DEFINES) -I"$(INCLUDES)" -c -o "$(<)" "$(>)"
}

rule compile.mm
{
    LANG on $(<) = "-x objective-c++" ;
}

actions compile.mm
{
    "$(CONFIG_COMMAND)" $(LANG) $(OPTIONS) $(USER_OPTIONS) -D$(DEFINES) -I"$(INCLUDES)" -c -o "$(<)" "$(>)"
}

# Determine the MacOSX SDK versions installed and their locations.
local rule available-macosx-versions ( )
{
    local sdks = [ GLOB /Developer/SDKs : MacOSX* ] ;
    for local sdk in $(sdks)
    {
        local sdk-version = [ MATCH ([0-9]+)[.]([0-9]+)[.]?([0-9]+)? : $(sdk:D=) ] ;
        sdk-version = $(sdk-version:J=.) ;
        if $(sdk-version)
        {
            .macosx-sdk = $(sdk-version) $(.macosx-sdk) ;
            .macosx-sdk.$(sdk-version) = $(sdk) ;
        }
    }
    return $(.macosx-sdk) ;
}

# Add the found SDK version only to the allowed set. The "latests" SDKs
# will be first in the list, and hence the default.
feature macosx-version
    : [ available-macosx-versions ]
    : propagated link-incompatible symmetric optional ;
if 10.4 in [ feature.values macosx-version ]
{
    feature.set-default macosx-version : 10.4 ;
}

# Add the options for all the found SDKs.
for local sdk in $(.macosx-sdk)
{
    flags darwin.compile OPTIONS <target-os>darwin/<macosx-version>$(sdk) :
        -isysroot $(.macosx-sdk.$(sdk))
        -mmacosx-version-min=$(sdk)
        ;
    flags darwin.link OPTIONS <target-os>darwin/<macosx-version>$(sdk) :
        -isysroot $(.macosx-sdk.$(sdk))
        -mmacosx-version-min=$(sdk)
        ;
}

# Add option selection for combined and specific architecture combinations.

local rule arch-addr-flags ( toolset variable
    : architecture : address-model + : values + : default ? )
{
    if $(default)
    {
        flags $(toolset) $(variable)
            <architecture>$(architecture)/<address-model>
            : $(values) ;
    }
    flags $(toolset) $(variable)
        <architecture>/<address-model>$(address-model)
        <architecture>$(architecture)/<address-model>$(address-model)
        : $(values) ;
}

arch-addr-flags darwin OPTIONS : combined : 32 : -arch i386 -arch ppc : default ;
arch-addr-flags darwin OPTIONS : combined : 64 : -arch x86_64 -arch ppc64 ;

arch-addr-flags darwin OPTIONS : x86 : 32 : -arch i386 : default ;
arch-addr-flags darwin OPTIONS : x86 : 64 : -arch x86_64 ;

arch-addr-flags darwin OPTIONS : power : 32 : -arch ppc : default ;
arch-addr-flags darwin OPTIONS : power : 64 : -arch ppc64 ;

arch-addr-flags darwin OPTIONS : arm : 32 : -arch arm : default ;


flags darwin.link OPTIONS <runtime-link>static
    : -nodefaultlibs -shared-libgcc -lstdc++-static -lgcc_eh -lgcc -lSystem ;

flags darwin.link OPTIONS <variant>release : -Wl,-dead_strip -no_dead_strip_inits_and_terms ;

flags darwin.compile OPTIONS <link>shared : -dynamic ;
flags darwin.compile OPTIONS : -Wno-long-double -no-cpp-precomp  -gdwarf-2  ;

flags darwin.link FRAMEWORK <framework> ;

# This is flag is useful for debugging the link step
# uncomment to see what libtool is doing under the hood
#~ flags darwin.link.dll OPTIONS : -Wl,-v ;

_ = " " ;

# set up the -F option to include the paths to any frameworks used.
local rule prepare-framework-path ( target + )
{
    # The -framework option only takes basename of the framework.
    # The -F option specifies the directories where a framework
    # is searched for.  So, if we find <framework> feature
    # with some path, we need to generate property -F option.
    local framework-path = [ on $(target) return $(FRAMEWORK:D) ] ;

    # Be sure to generate no -F if there's no path.
    if $(framework-path) != ""
    {
        FRAMEWORK_PATH on $(target) += -F$(framework-path) ;
    }
}

rule link
{
    prepare-framework-path $(<) ;
}

actions link bind LIBRARIES
{
    "$(CONFIG_COMMAND)" -L"$(LINKPATH)" -o "$(<)" "$(>)" "$(LIBRARIES)" -l$(FINDLIBS-SA) -l$(FINDLIBS-ST) $(FRAMEWORK_PATH) -framework$(_)$(FRAMEWORK:D=:S=) $(OPTIONS) $(USER_OPTIONS)
    $(NEED_STRIP)"$(.STRIP)" $(NEED_STRIP)"$(<)"
}

rule link.dll
{
    prepare-framework-path $(<) ;
}

actions link.dll bind LIBRARIES
{
    "$(CONFIG_COMMAND)" -dynamiclib -Wl,-single_module -install_name "$(<:B)$(<:S)" -L"$(LINKPATH)" -o "$(<)" "$(>)" "$(LIBRARIES)" -l$(FINDLIBS-SA) -l$(FINDLIBS-ST) $(FRAMEWORK_PATH) -framework$(_)$(FRAMEWORK:D=:S=) $(OPTIONS) $(USER_OPTIONS)
}

# We use libtool instead of ar to support universal binary linking
# TODO: Find a way to use the underlying tools, i.e. lipo, to do this.
actions piecemeal archive
{
    "$(.LIBTOOL)" -static -o "$(<:T)"  $(ARFLAGS)  "$(>:T)"
}

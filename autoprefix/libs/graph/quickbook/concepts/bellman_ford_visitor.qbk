[/
 / Copyright (C) 2007-2009 Andrew Sutton
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section Bellman Ford Visitor]
This concept defines the visitor interface for [bellman_ford_shortest_paths]. Users
can define a class with the Bellman Ford Visitor interface and pass and object of the
class to [bellman_ford_shortest_paths], thereby augmenting the actions taken during the
graph search.

[h4 Refinement Of]
[Visitor]

[h4 Valid Expressions]
[table
    [[Expression] [Description]]
    [
        [`vis.examine_edge(v,g)`]
        [
            This is invoked on every out-edge of each vertex after it is discovered.

            *Returns* `void`
        ]
    ]
    [
        [`vis.edge_relaxed(e,g)`]
        [
            If the relaxation predicate holds for this given edge then this method is invoked.
            See [dijkstra_shortest_paths] for more information on relaxation.

            *Returns* `void`
        ]
    ]
    [
        [`vis.edge_not_relaxed(e,g)`]
        [
            If the relaxation predicate does not hold for this edge, then this method is invoked.
            See [dijkstra_shortest_paths] for more information on relaxation.

            *Returns* `void`
        ]
    ]
    [
        [`vis.edge_minimized(e,g)`]
        [
            After the `num_vertices(g)` iterators through the edge det of the graph is complete,
            one last iteration is made to test whether each edge was minimized. If the edge is
            minimized then this function is invoked.

            *Returns* `void`
        ]
    ]
    [
        [`vis.edge_relaxed(e,g)`]
        [
            If the edge is not minimized then this function is invoked. This happens when there
            is a negative weight cycle in the graph.

            *Returns* `void`
        ]
    ]
]

[h4 Models]
* [bellman_ford_visitor]

[endsect]

[/
 / Copyright (C) 2007-2009 Andrew Sutton
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section Adjacency Graph]
The AdjacencyGraph concept provides and interface for efficient access of the adjacent vertices
to a vertex in a graph. This is quite similar to the IncidenceGraph concept (the target of an
out-edge is an adjacent vertex). Both concepts are provided because in some contexts there is only
concern for the vertices, whereas in other contexts the edges are also important.

[h4 Refinement Of]
[Graph]

[h4 Associated Types]
[table
    [[Type] [Description]]
    [
        [`graph_traits<G>::traversal_category`]
        [
            This tag type must be convertible to `adjacency_graph_tag`.
        ]
    ]
    [
        [`graph_traits<G>::adjacency_iterator`]
        [
            An adjacency iterator for a vertex v provides access to the vertices adjacent to v.
            As such, the value type of an adjacency iterator is the vertex descriptor type of its
            graph. An adjacency iterator must meet the requirements of [MultiPassInputIterator].
        ]
    ]
]

[h4 Valid Expressions]
[table
    [[Expression] [Description]]
    [
        [`adjacent_vertices(v,g)`]
        [
            Returns an iterator-range providing access to the vertices adjacent to vertex `v` in
            the graph `g`.

            *Returns* `std::pair<adjacency_iterator, adjacency_iterator>`
        ]
    ]
]

[h4 Complexity Guarantees]
The `adjacent_vertices(v,g)` function must return in constant time.

[h4 Design Rationale]
The AdjacencyGraph concept is somewhat frivolous since [IncidenceGraph] really covers the same
functionality (and more). The AdjacencyGraph concept exists because there are situations when
`adjacent_vertices()` is more convenient to use than `out_edges()`. If you are constructing a graph
class and do not want to put in the extra work of creating an adjacency iterator, have no fear. There
is an adaptor class named `adjacency_iterator` that you can use to create an adjacency iterator out
of an out-edge iterator.

[h4 Notes]
The case of a /multigraph/ (where multiple edges can connect the  same two vertices) brings up an issue
as to whether the iterators returned by the `adjacent_vertices()` function access a range that includes
each adjacent vertex once, or whether it should match the behavior of the `out_edges()` function, and
access a range that may include an adjacent vertex more than once. For now the behavior is defined to
match that of `out_edges()`, though this decision may need to be reviewed in light of more experience
with graph algorithm implementations.

[endsect]
